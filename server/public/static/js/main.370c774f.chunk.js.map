{"version":3,"sources":["graphql/subscriptions.ts","graphql/queries.ts","components/UtilityComponents/UserContext.tsx","components/Navbar/Dropdowns/NotificationsDropdown.tsx","utils/constants.ts","utils/utilityFunctions.ts","components/UtilityComponents/UtilityComponents.tsx","components/Navbar/Dropdowns/ProfileDropdown.tsx","components/Navbar/Navbar.tsx","components/Pages/Messages/Navigation/MessageNavigation.tsx","graphql/mutations.ts","components/Pages/Messages/Conversation/Conversation.tsx","components/Pages/Messages/Messages.tsx","components/Pages/Jobmarket/Pages/JobDetails.tsx","components/Pages/Jobmarket/Pages/Jobqueries.tsx","components/Pages/Jobmarket/JobmarketNavigation/JobmarketNavigation.tsx","components/Pages/Jobmarket/Pages/SendQueryForm/Views/JobqueryInfoForm.tsx","components/Pages/Jobmarket/Pages/SendQueryForm/Views/WantedCategoriesSelection.tsx","components/Pages/Jobmarket/Pages/SendQueryForm/Views/Summary.tsx","components/Pages/Jobmarket/Pages/SendQueryForm/SendQueryForm.tsx","components/Pages/Jobmarket/Pages/SendQuery.tsx","components/Pages/Jobmarket/Pages/MyQueries.tsx","components/Pages/Profiles/Profiles.tsx","components/Pages/Jobmarket/Pages/FindPlayers.tsx","components/Pages/Jobmarket/Pages/JobInfo.tsx","components/Pages/Jobmarket/Jobmarket.tsx","components/Pages/Registrations/SignIn.tsx","components/Pages/Registrations/SignUp.tsx","images/musician1svg.svg","images/musician2svg.svg","images/pianosvg.svg","components/Pages/Home/Home.tsx","components/Pages/Welcome/Welcome.tsx","components/Pages/Settings/Settings.tsx","components/Pages/Profiles/CreateGroup/Views/About.tsx","components/Pages/Profiles/CreateGroup/Views/GroupSkills.tsx","components/Pages/Profiles/CreateGroup/Views/NameAndImage.tsx","components/Pages/Profiles/CreateGroup/Views/Summary.tsx","components/Pages/Profiles/CreateGroup/Views/UserSelection.tsx","components/Pages/Profiles/CreateGroup/CreateGroupForm.tsx","components/Pages/Profiles/CreateGroup/CreateGroup.tsx","components/Pages/Profiles/Profile/Profile.tsx","components/Pages/Profiles/CreateProfile/Views/CreateProfileInfo.tsx","components/Pages/Profiles/CreateProfile/Views/Skills.tsx","components/Pages/Profiles/CreateProfile/Views/About.tsx","components/Pages/Profiles/CreateProfile/Views/Image.tsx","components/Pages/Profiles/CreateProfile/Views/Summary.tsx","components/Pages/Profiles/CreateProfile/CreateProfileForm.tsx","components/Pages/Profiles/CreateProfile/CreateProfile.tsx","components/UtilityComponents/ErrorBoundary.tsx","components/Pages/ErrorPage.tsx","App.tsx","index.tsx"],"names":["MESSAGE_ADDED","gql","NOTIFICATION_ADDED","ME","MY_ID","GET_NOTIFICATIONS","FIND_USER_OR_GROUP","CONVERSATION_PARTICIPANTS_BY_SESSION_ID","JOBQUERIES_SENT_BY_SESSION_ID","FIND_CONVERSATION","FIND_JOBQUERY","ALL_JOBQUERIES","ALL_USERS","ALL_SKILL_CATEGORIES","ALL_GROUP_SKILL_CATEGORIES","ALL_USERS_AND_GROUPS","UserContext","createContext","token","setToken","sessionId","setSessionId","NotificationsDropdown","show","setShow","history","useHistory","client","useApolloClient","userContext","useContext","useState","notifications","setNotifications","useLazyQuery","getNotifications","data","useEffect","variables","id","sorted","findUserOrGroup","sort","n1","n2","n1date","Date","date","getTime","useSubscription","onSubscriptionData","a","subscriptionData","reFetchObservableQueries","className","length","map","n","onClick","notification","push","link","content","SIGN_IN_TOKEN","SESSION_TOKEN","categoriesWithParentsRemoved","categories","filtered","category","parentObj","find","c","name","parent","filter","dateAsDDMMYYYY","dateInput","substring","year","month","day","Loading","Toggle","state","toggleClick","Button","text","handleClick","Searchbar","input","setInput","value","onChange","e","target","SmallProfileImage","image","src","alt","LargeProfileImage","SmallProfileCard","LargeProfileCard","skills","url","contactFunction","skill","profession","CategorySelection","allCategories","selectedCategories","setSelectedCategories","currentPath","setCurrentPath","skillsIncludeCategory","selectedObj","objId","found","forEach","categoriesToRemove","obj","children","removableArray","child","childObj","s","includes","concat","handlePathClick","clickedName","filteredSkills","indexOf","splice","TitleAndLogo","window","location","assign","ProfileDropdown","me","useQuery","loading","handleLogout","resetStore","localStorage","clear","sessionStorage","profile","groups","setItem","username","group","groupId","Navbar","currentUserNameResult","showMenu","setShowMenu","showNotification","setShowNotifications","showProfileOptionsDropdown","setShowProfileOptionsDropdown","to","exact","activeClassName","tabIndex","firstName","MessageNavigation","setShowContacts","searchInput","setSearchInput","participants","conversations","conversation","names","participant","object","join","linkTo","toLowerCase","LOGIN","SIGNUP","CREATE_JOBQUERY","NEW_CONVERSATION","SEND_MESSAGE","CREATE_GROUP","CREATE_USER_PROFILE","Conversation","useParams","numberOfMessages","setNumberOfMessages","conversationResult","onCompleted","findConversation","messages","scrollToBottom","element","document","getElementById","scrollTo","top","scrollHeight","behavior","updateCacheWith","addedMessage","includedIn","set","message","readQuery","query","dataInStore","console","log","writeQuery","useMutation","onError","error","sendMessage","messageInput","setMessageInput","conversationId","handleSendMessage","event","preventDefault","senderId","body","p","sender","type","Messages","showContacts","path","component","JobDetails","job","postedBy","wantedCategories","salary","startSchedule","endSchedule","Jobqueries","result","setOrderedQueries","allJobqueries","q1","q2","postedOn","orderOptions","orderedQueries","selectedJob","setSelectedJob","showJobInfo","setShowJobInfo","jobqueries","option","q","contactText","handleMoreInfoClick","JobmarketNavigation","JobqueryInfoForm","setContent","setLocation","setSalary","setStartSchedule","setEndSchedule","cols","rows","WantedCategoriesSelection","skillCategories","groupCategories","setWantedCategories","undefined","Summary","submitCompleted","setSubmitCompleted","redirectAdress","setRedirectAdress","createQuery","submit","parentsRemoved","categoryIds","response","createJobquery","href","SendQueryForm","setSkillCategories","setGroupCategories","skillCategoriesResult","allSkillCategories","groupCategoriesResult","allGroupSkillCategories","views","currentView","setCurrentView","SendQuery","MyQueries","jobQueries","visible","Profiles","myIdResult","allUsersAndGroups","setAllUsersAndGroups","allUsersAndGroupsResult","newConversation","handleContactButtonPress","receiverId","newConversationId","createConversation","item","profileUrl","groupTypes","FindPlayers","JobInfo","jobInfoResult","findJobquery","Jobmarket","SignIn","setUsername","password","setPassword","graphQLErrors","login","onSubmit","SignUp","setFirstName","lastName","setLastName","signup","Home","Musician1Svg","Musician2Svg","Pianosvg","Welcome","userOrGroup","currentHour","getHours","getTitleByTime","isEditedByUser","__typename","Settings","About","setText","GroupSkills","setSkills","setAllCategories","NameAndImage","groupName","setGroupName","setImage","accept","files","size","reader","FileReader","onload","String","readAsDataURL","handleImageChange","selectedUsers","about","createGroup","handleSubmit","skillIds","userIds","user","users","kind","u","UserSelection","setSelectedUsers","allUsersResult","meObject","allUsers","handleRemoveFromSelectedUsers","CreateGroupForm","setAbout","CreateGroup","Profile","width","CreateProfileInfo","Skills","Image","myId","createUserProfile","CreateProfileForm","aboutText","setAboutText","CreateProfile","ErrorBoundary","props","hasError","errorInfo","this","React","Component","ErrorPage","App","localStorageToken","getItem","Provider","authLink","setContext","_","headers","authorization","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","splitLink","split","definition","getMainDefinition","operation","cache","InMemoryCache","typePolicies","fields","merge","incoming","User","existing","Query","ApolloClient","connectToDevTools","ReactDOM","render","ApolloProvider"],"mappings":"upBAEaA,GAAgBC,YAAH,0FAQbC,GAAqBD,YAAH,kGCRlBE,GAAKF,YAAH,ogBAoCFG,GAAQH,YAAH,6FASLI,GAAoBJ,YAAH,uXA2CjBK,IApBYL,YAAH,0KAYIA,YAAH,6GAQWA,YAAH,ydAyDlBM,IA3BqCN,YAAH,ueA2BQA,YAAH,qpCA2DvCO,GAAgCP,YAAH,4VAqB7BQ,GAAoBR,YAAH,6xBA6CjBS,GAAgBT,YAAH,gtBAyCbU,GAAiBV,YAAH,8uBA2CdW,GAAYX,YAAH,gJA8BTY,IAlBoBZ,YAAH,wOAkBMA,YAAH,uMAepBa,GAA6Bb,YAAH,gNAe1Bc,GAAuBd,YAAH,mpBCvZpBe,GAAcC,wBAA+B,CACxDC,MAAO,KACPC,SAAU,aACVC,UAAW,KACXC,aAAc,e,QC8DDC,GA3De,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,QAC/BC,EAAUC,cACVC,EAASC,cACTC,EAAcC,qBAAWd,IAC/B,EAA0Ce,mBAA0B,IAApE,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAqCC,YAAa7B,IAAlD,mBAAO8B,EAAP,KAA2BC,EAA3B,KAA2BA,KAE3BC,qBAAU,WACRF,EAAiB,CACfG,UAAW,CAAEC,GAAIV,EAAYT,eAG9B,CAACS,EAAYT,YAEhBiB,qBAAU,WACR,GAAID,EAAM,CACR,IAAMI,EAAS,YAAIJ,EAAKK,gBAAgBT,eAAeU,MAAK,SAACC,EAASC,GACpE,IAAMC,EAAS,IAAIC,KAAKH,EAAGI,MAAMC,UAEjC,OADe,IAAIF,KAAKF,EAAGG,MAAMC,UACjBH,KAElBZ,EAAiBO,MAGlB,CAACJ,IAEJa,YAAgB/C,GAAoB,CAClCgD,mBAAmB,WAAD,4BAAE,uBAAAC,EAAA,wDAASC,iBAE3BzB,EAAO0B,2BAFW,2CAAF,mDAAC,KAWrB,OACE,uBAAKC,UAAW/B,EAAO,kBAAoB,WAA3C,UACE,qBAAI+B,UAAU,sBAAd,2BAC0B,IAAzBtB,EAAcuB,OAEbvB,EAAcwB,KAAI,SAAAC,GAChB,OACE,+BACE,8BACE,qBAAIH,UAAU,yBAAyBI,QAAS,kBAd7BC,EAc2DF,EAb1FjC,GAAQ,QACRC,EAAQmC,KAAKD,EAAaE,MAFI,IAACF,GAcnB,SAAmFF,EAAEK,aAF/EL,EAAElB,OAQhB,wD,UCrEKwB,GAAgB,2BAChBC,GAAgB,8B,SCMhBC,GAA+B,SAACC,GAC3C,IADsE,EAClEC,EAAQ,YAAOD,GADmD,eAEjDA,GAFiD,yBAE7DE,EAF6D,QAG9DC,EAAYF,EAASG,MAAK,SAAAC,GAAC,aAAIA,EAAEC,QAAF,UAAWJ,EAASK,cAApB,aAAW,EAAiBD,SAC7DH,IACFF,EAAWA,EAASO,QAAO,SAAAH,GAAC,OAAIA,EAAEC,OAASH,EAAUG,UAHzD,2BAAkC,IAFoC,8BAQtE,OAAOL,GAGIQ,GAAiB,SAACC,GAC7B,IAAM7B,EAAO6B,EAAUC,UAAU,EAAG,IAC9BC,EAAO/B,EAAK8B,UAAU,EAAE,GACxBE,EAAQhC,EAAK8B,UAAU,EAAG,GAC1BG,EAAMjC,EAAK8B,UAAU,EAAG,IAC9B,MAAM,GAAN,OAAUG,EAAV,YAAiBD,EAAjB,YAA0BD,IChBfG,I,OAAU,WACrB,OAAO,sBAAK3B,UAAU,aAIX4B,GAAS,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,YAC9B,OACE,sBACE9B,UAAW6B,EAAQ,6BAA+B,8BAClDzB,QAAS0B,EAFX,SAGE,sBACE9B,UAAW6B,EAAQ,iCAAmC,uCAMjDE,GAAS,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YAC7B,OACE,sBACEjC,UAAU,mBACVI,QAAS6B,EAFX,SAGGD,KAKME,GAAY,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,SAEhC,OACE,sBAAKpC,UAAU,sBAAf,SACE,uBAAKA,UAAqB,KAAVmC,EAAe,0BAA2B,oBAA1D,UACE,wBAAOnC,UAAU,kBAAkBqC,MAAOF,EAAOG,SAAU,SAAAC,GAAC,OAAIH,EAASG,EAAEC,OAAOH,UAClF,sBAAKrC,UAAU,2BAAf,SACE,sBAAKA,UAAU,iBAAf,4BAOGyC,GAAoB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAClC,OACE,sBAAKC,IAAKD,EAAOE,IAAI,aAAa5C,UAAU,yBAInC6C,GAAoB,SAAC,GAAe,IAAbH,EAAY,EAAZA,MAClC,OACE,sBAAKC,IAAKD,EAAOE,IAAI,aAAa5C,UAAU,yBAInC8C,GAAmB,SAAC,GAAwB,EAAtB7D,GAAuB,IAAnByD,EAAkB,EAAlBA,MAAOxB,EAAW,EAAXA,KAC5C,OACE,uBAAKlB,UAAU,+BAAf,UACE,sBAAKA,UAAU,kBAAf,SACE,sBAAKA,UAAU,0BAAf,SACE,eAAC,GAAD,CAAmB0C,MAAOA,QAG9B,sBAAK1C,UAAU,kBAAf,SACE,sBAAKA,UAAU,iBAAf,SACE,qBAAIA,UAAU,qBAAd,SAAoCkB,YAQjC6B,GAAmB,SAAC,GAAuD,IAArD9D,EAAoD,EAApDA,GAAIyD,EAAgD,EAAhDA,MAAOxB,EAAyC,EAAzCA,KAAM8B,EAAmC,EAAnCA,OAAQC,EAA2B,EAA3BA,IAAKC,EAAsB,EAAtBA,gBACzD/E,EAAUC,cACVG,EAAcC,qBAAWd,IAC/B,OACE,uBAAKsC,UAAU,+BAAf,UACE,sBAAKA,UAAU,kBAAf,SACE,sBAAKA,UAAU,0BAAf,SACE,eAAC,GAAD,CAAmB0C,MAAOA,QAG9B,uBAAK1C,UAAU,kBAAf,UACE,uBAAKA,UAAU,iBAAf,UACE,qBAAIA,UAAU,eAAd,SAA8BkB,IAE7BP,GAA6BqC,GAAQ9C,KAAI,SAAAiD,GAAK,OAAI,6BAAmBA,EAAMC,YAAcD,EAAMjC,MAArCiC,EAAMlE,UAEnE,uBAAKe,UAAU,6BAAf,UACE,eAAC,GAAD,CAAQgC,KAAK,UAAUC,YAAa,kBAAM9D,EAAQmC,KAAK2C,MACtDhE,IAAOV,EAAYT,UAChB,eAAC,GAAD,CAAQkE,KAAK,UAAUC,YAAaiB,IACpC,eAQDG,GAAoB,SAAC,GAA+F,IAA7FC,EAA4F,EAA5FA,cAAeC,EAA6E,EAA7EA,mBAAoBC,EAAyD,EAAzDA,sBAAuBC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,eAEnGC,EAAwB,SAACC,GAC7B,IAAMC,EAAQD,EAAY3E,GACtB6E,GAAQ,EAEZ,OADAP,EAAmBQ,SAAQ,SAAAZ,GAAK,OAAKU,IAAUV,EAAMlE,KAAQ6E,GAAQ,MAC9DA,GAGHE,EAAqB,SAArBA,EAAsBC,EAAKC,EAAUC,GAAoB,IAAD,iBAC1CD,GAD0C,yBACnDE,EADmD,QAEpDC,EAAWf,EAActC,MAAK,SAAAiD,GAAG,OAAIA,EAAI/C,OAASkD,EAAMlD,QAC1DmD,GAAYd,EAAmBrD,KAAI,SAAAoE,GAAC,OAAIA,EAAErF,MAAIsF,SAAlC,OAA2CF,QAA3C,IAA2CA,OAA3C,EAA2CA,EAAUpF,MACnEkF,EAAiBH,EAAmBK,EAAUA,EAASH,SAAUC,KAHrE,2BAA6B,IAD+B,8BAO5D,OAAOA,EAAeK,OAAOP,IAGzBQ,EAAkB,SAACC,GACvB,IAAMT,EAAMX,EAActC,MAAK,SAAAiD,GAAG,OAAIA,EAAI/C,OAASwD,KACnD,GAAIT,EACF,GAAKN,EAAsBM,IAGpB,GAAIN,EAAsBM,GAAM,CACrC,IAAME,EAAiBH,EAAmBC,EAAKA,EAAIC,SAAU,IACvDS,EAAiBpB,EAAmBnC,QAAO,SAACN,GAChD,OAAQqD,EAAejE,KAAI,SAAAe,GAAC,OAAIA,EAAEhC,MAAIsF,SAASzD,EAAS7B,OAE1DuE,EAAsBmB,SAPtBV,EAAIC,SAASjE,QAAUyD,EAAeD,EAAYe,OAAOE,IACzDlB,EAAsBD,EAAmBiB,OAAOP,KAiBtD,OACE,uBAAKjE,UAAU,mBAAf,UACE,8BAAKyD,EAAYvD,KAAI,SAAAgB,GAAI,OAAI,kCAAuCA,EAAvC,aAAWuC,EAAYmB,QAAQ1D,SAC3DoC,EAAcpD,KAAI,SAAA+D,GAAQ,IAAD,EACxB,OACER,EAAYA,EAAYxD,OAAS,MAAjC,UAAwCgE,EAAI9C,cAA5C,aAAwC,EAAYD,OACpD,uBACElB,UAAW2D,EAAsBM,GAAO,2CAA6C,kBAErF7D,QAAS,kBAAMqE,EAAgBR,EAAI/C,OAHrC,UAIG+C,EAAI/C,KAJP,IAIc+C,EAAIC,SAASjE,OAAS,SAAM,WAFnCgE,EAAIhF,OAKf,eAAC,GAAD,CAAQgD,YAAa,WAlBnBwB,EAAYxD,OAAS,GACvByD,EAAeD,EAAYoB,OAAO,EAAGpB,EAAYxD,OAAS,KAiBD+B,KAAI,eAKtD8C,GAAe,WAC1B,OACE,sBAAI9E,UAAU,iBAAiBI,QAAS,kBAAM2E,OAAOC,SAASC,OAAO,MAArE,8BAA4F,oBAAGjF,UAAU,2BCtE9FkF,GAvFS,SAAC,GAA4B,IAA1BjH,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,QACzBG,EAASC,cAET6G,EAAKC,aAASvI,IACd0B,EAAcC,qBAAWd,IAE/B,EAA6CkB,YAAa5B,IAA1D,mBAAOmC,EAAP,YAA0BkG,EAA1B,EAA0BA,QAASvG,EAAnC,EAAmCA,KACnCC,qBAAU,WACRR,EAAYT,WAAaqB,EAAgB,CAAEH,UAAW,CAAEC,GAAIV,EAAYT,eAEvE,IAEH,IAAMK,EAAUC,cAEhB,GAAIiH,GAAWF,EAAGE,QAChB,OAAO,sBAAKrF,UAAW/B,EAAO,kBAAoB,WAA3C,SACL,eAAC,GAAD,MAIJ,IAAMqH,EAAY,uCAAG,sBAAAzF,EAAA,sEACbxB,EAAOkH,aADM,OAEnBC,aAAaC,QACbC,eAAeD,QACfV,OAAOC,SAASC,OAAO,KAJJ,2CAAH,qDAkClB,OACE,uBAAKjF,UAAW/B,EAAO,kBAAoB,WAA3C,UACE,uBAAK+B,UAAU,mBAAmBI,QA7BX,WACzBjC,EAAQmC,KAAR,oBAA0BxB,EAAKK,gBAAgBF,KAC/Cf,GAAQ,IA2BN,UACE,+BACE,eAAC,GAAD,CAAmBwE,MAAO5D,EAAKK,gBAAgBwG,QAAQjD,UAEzD,qBAAI1C,UAAU,eAAd,SAA8BlB,EAAKK,gBAAgBwG,QAAQzE,OAC3D,oBAAGlB,UAAU,iBAAb,6BAEDmF,EAAGrG,KAAKqG,GAAGS,OAAO3F,OAAS,GAC1B,uBAAKD,UAAU,yBAAf,UACE,gDACCmF,EAAGrG,KAAKqG,GAAGlG,KAAOV,EAAYT,WAC7B,sBAAKkC,UAAU,gBAAgBI,QA9BnB,WACpBsF,eAAeG,QAAQnF,GAAeyE,EAAGrG,KAAKqG,GAAGlG,IACjDV,EAAYR,aAAaoH,EAAGrG,KAAKqG,GAAGlG,IACpCE,EAAgB,CAAEH,UAAW,CAAEC,GAAIkG,EAAGrG,KAAKqG,GAAGlG,OA2BtC,SAAwDkG,EAAGrG,KAAKqG,GAAGW,WAEpEX,EAAGrG,KAAKqG,GAAGS,OAAO1F,KAAI,SAAA6F,GAAK,OAC1BA,EAAM9G,KAAOV,EAAYT,WACzB,sBACEkC,UAAU,gBACVI,QAAS,kBA9BQ4F,EA8BkBD,EAAM9G,GA7BnDyG,eAAeG,QAAQnF,GAAesF,GACtCzH,EAAYR,aAAaiI,QACzB7G,EAAgB,CAAEH,UAAW,CAAEC,GAAI+G,KAHT,IAACA,GA4BnB,SAIGD,EAAMJ,QAAQzE,MADV6E,EAAM9G,UAMnB,sBAAKe,UAAU,gBAAgBI,QA/BP,WAC1BjC,EAAQmC,KAAK,gBACbpC,GAAQ,IA6BN,yBACA,sBAAK8B,UAAU,gBAAgBI,QAjDP,WAC1BjC,EAAQmC,KAAK,aACbpC,GAAQ,IA+CN,sBACA,sBAAK8B,UAAU,gBAAgBI,QAASkF,EAAxC,yBCuBSW,GA1GA,WACb,IAAM1H,EAAcC,qBAAWd,IACzBwI,EAAwBd,aAASpI,GAAoB,CAACgC,UAAW,CAACC,GAAIV,EAAYT,aAExF,EAAgCW,oBAAS,GAAzC,mBAAO0H,EAAP,KAAiBC,EAAjB,KACA,EAAiD3H,oBAAS,GAA1D,mBAAO4H,EAAP,KAAyBC,EAAzB,KACA,EAAoE7H,oBAAS,GAA7E,mBAAO8H,EAAP,KAAmCC,EAAnC,KAEMvE,EAAc,WAClBmE,GAAaD,GACbG,GAAqB,GACrBE,GAA8B,IAqBhC,OACE,qCACE,sBAAKxG,UAAU,SAAf,SACE,uBAAKA,UAAU,gBAAf,UAEE,sBAAKA,UAAU,oBAAoBI,QAAS6B,EAA5C,SACE,oBAAGjC,UAAWmG,EAAW,oBAAsB,kBAGjD,gBAAC,IAAD,CAASM,GAAG,IAAIzG,UAAU,oBAAoBI,QAAS,kBAAM2E,OAAOC,SAASC,OAAO,MAApF,8BACmB,oBAAGjF,UAAU,0BAGhC,sBAAIA,UAAWmG,EAAW,+BAAiC,wBAA3D,UACE,qBAAInG,UAAU,WAAd,SACE,eAAC,IAAD,CAAS0G,OAAK,EAACD,GAAG,IAAIE,gBAAgB,SAAS3G,UAAU,YAAYI,QAAS6B,EAA9E,oBAIF,qBAAIjC,UAAU,WAAd,SACE,eAAC,IAAD,CAAS0G,OAAK,EAACD,GAAG,qBAAqBE,gBAAgB,SAAS3G,UAAU,YAAYI,QAAS6B,EAA/F,yBAIF,qBAAIjC,UAAU,WAAd,SACE,eAAC,IAAD,CAAS0G,OAAK,EAACD,GAAG,YAAYE,gBAAgB,SAAS3G,UAAU,YAAYI,QAAS6B,EAAtF,2BAMJ,sBAAIjC,UAAU,0BAAd,UACE,qBAAIA,UAAU,WAAd,SACE,eAAC,IAAD,CAAS0G,OAAK,EAACD,GAAG,YAAYE,gBAAgB,SAAS3G,UAAU,YAAYI,QAvC9D,WACzBgG,GAAY,GACZE,GAAqB,GACrBE,GAA8B,IAoCpB,SAEE,oBAAGxG,UAAU,sBAKjB,sBAAIA,UAAU,8BAAd,UACE,sBACEI,QA5DiB,WAC7BoG,GAA8B,GAC9BF,GAAsBD,GACtBD,GAAY,IA0DAQ,SAAU,EACV5G,UAAU,YAHZ,SAKE,oBAAGA,UAAU,aAAb,uBAEF,eAAC,GAAD,CACE/B,KAAMoI,EACNnI,QAASoI,OAGb,sBAAItG,UAAU,8BAAd,UACE,uBACEI,QAnEY,WACxBkG,GAAqB,GACrBE,GAA+BD,GAC/BH,GAAY,IAiEAQ,SAAU,EACV5G,UAAU,YAHZ,UAIE,oBAAGA,UAAU,aAAb,sBACA,wBAAMA,UAAU,2BAAhB,cAA6CkG,EAAsBpH,OAASoH,EAAsBpH,KAAKK,gBAAgBwG,QAAQkB,WAAaX,EAAsBpH,KAAKK,gBAAgBwG,QAAQzE,YAEjM,eAAC,GAAD,CACEjD,KAAMsI,EACNrI,QAASsI,kBCxDVM,I,OAvCW,SAAC,GAA8B,IAAD,EAA3BC,EAA2B,EAA3BA,gBAC3B,EAAsCtI,mBAAS,IAA/C,mBAAOuI,EAAP,KAAoBC,EAApB,KACM1I,EAAcC,qBAAWd,IACzBwJ,EAAe9B,aAASnI,GAAyC,CACrE+B,UAAW,CACTC,GAAIV,EAAYT,aAIpB,OAAIoJ,EAAa7B,QACR,eAAC,GAAD,IAIP,sBAAKrF,UAAU,iBAAf,SACE,uBAAKA,UAAU,oBAAf,UACE,sBAAKA,UAAU,4BAAf,SACE,eAAC,GAAD,CAAWmC,MAAO6E,EAAa5E,SAAU6E,MAE3C,qBAAIjH,UAAU,eAAd,mBACGkH,EAAapI,YADhB,aACG,EAAmBK,gBAAgBgI,cAAcjH,KAAI,SAAAkH,GACpD,IAAMC,EAAQD,EAAaF,aAAahH,KAAI,SAAAoH,GAAW,OAAIA,EAAYC,OAAO5B,QAAQzE,QAAMsG,KAAK,MAC3FC,EAAM,oBAAgBL,EAAanI,IACzC,OAAIoI,EAAMK,cAAcnD,SAASyC,EAAYU,eAEzC,qBAAI1H,UAAU,eAAd,SACE,eAAC,IAAD,CAAS0G,OAAK,EAACD,GAAIgB,EAAQd,gBAAgB,aAAa3G,UAAU,gBAAgBI,QAAS,kBAAM2G,GAAgB,IAAjH,SACGM,KAF6BD,EAAanI,IAM1C,iB,UCtCR0I,I,OAAQhL,YAAH,sLASLiL,GAASjL,YAAH,wQAONkL,GAAkBlL,YAAH,ibASfmL,GAAmBnL,YAAH,0LAQhBoL,GAAepL,YAAH,6NAQZqL,GAAerL,YAAH,uQASZsL,GAAsBtL,YAAH,uNCiGjBuL,GA1IM,SAAC,GAA8B,IAA5BnB,EAA2B,EAA3BA,gBAChBxI,EAAcC,qBAAWd,IACvBuB,EAAYkJ,cAAZlJ,GACFZ,EAASC,cACf,EAAgDG,mBAAS,GAAzD,mBAAO2J,EAAP,KAAyBC,EAAzB,KAEMC,EAAqBlD,aAASjI,GAAmB,CACrD6B,UAAW,CAAEC,MACbsJ,YAAa,SAACzJ,GACZuJ,EAAoBvJ,EAAK0J,iBAAiBC,SAASxI,WAKvDlB,qBAAU,WAER2J,MACC,CAACN,IAEJ,IAAMM,EAAiB,WACrB,IAAMC,EAAUC,SAASC,eAAe,wBACjC,OAAPF,QAAO,IAAPA,KAASG,SAAS,CAChBC,IAAKJ,EAAQK,aACbC,SAAU,YAIRC,EAAe,uCAAG,WAAOC,GAAP,iBAAAtJ,EAAA,6DAChBuJ,EAAa,SAACC,EAAK9B,GAEvB,OADmB8B,EAAInJ,KAAI,SAAAoJ,GAAO,OAAIA,EAAQrK,MAAIsF,SAASgD,EAAOtI,KAF9C,SAMIZ,EAAOkL,UAAU,CACzCC,MAAOrM,GACP6B,UAAW,CAAEC,QARO,OAWF,QALdwK,EANgB,QAYpBC,QAAQC,IAAI,oBAKJP,EAAWK,EAAYjB,iBAAiBC,SAAUU,KAC1DO,QAAQC,IAAI,aAAcF,EAAYjB,iBAAiBC,SAASxI,QAChE5B,EAAOuL,WAAW,CAChBJ,MAAOrM,GACP6B,UAAW,CAAEC,MACbH,KAAM,CAAE0J,iBAAkBiB,EAAYjB,iBAAiBC,SAASjE,OAAO2E,MAEzEd,EAAoBD,EAAmB,IAxBnB,2CAAH,sDA4BrBzI,YAAgBjD,GAAe,CAC7BkD,mBAAmB,WAAD,4BAAE,+BAAAC,EAAA,6DAASC,EAAT,EAASA,iBAC3B4J,QAAQC,IAAI,oBAAqB7J,GAC3BqJ,EAAerJ,EAAiBhB,KAFpB,SAGZoK,EAAgBC,GAHJ,2CAAF,mDAAC,KAOrB,MAAsBU,aAAY9B,GAAc,CAC9C+B,QAAS,SAACC,GACRL,QAAQC,IAAI,2BAA4BI,MAFrCC,EAAP,oBASA,EAAwCvL,mBAAS,IAAjD,mBAAOwL,EAAP,KAAqBC,EAArB,KAEA,GAAI5B,EAAmBjD,QACrB,OAAO,eAAC,GAAD,IAGT,IAAKiD,EAAmBxJ,KACtB,OAAO,yDAGT,IAAMoI,EAAeoB,EAAmBxJ,KAAK0J,iBAAiBtB,aACxDuB,EAAWH,EAAmBxJ,KAAK0J,iBAAiBC,SACpD0B,EAAiB7B,EAAmBxJ,KAAK0J,iBAAiBvJ,GAE1DmL,EAAiB,uCAAG,WAAOC,GAAP,SAAAxK,EAAA,6DACxBwK,EAAMC,iBADkB,SAElBN,EAAY,CAChBhL,UAAW,CACTmL,eAAgBA,EAChBI,SAAUhM,EAAYT,UACtB0M,KAAMP,KANc,OASxBC,EAAgB,IATQ,2CAAH,sDAavB,OAAKhD,EAAahH,KAAI,SAAAuK,GAAC,OAAIA,EAAElD,OAAOtI,MAAIsF,SAAShG,EAAYT,WAK3D,uBAAKkC,UAAU,yBAAf,UACE,uBAAKA,UAAU,oBAAf,UACE,sBAAKA,UAAU,yBAAf,SACGkH,EAAahH,KAAI,SAAAuK,GAChB,OAAOA,EAAElD,OAAOtI,KAAOV,EAAYT,UAC/B,2CAAQ2M,EAAElD,OAAOtI,IACjB,+BAAsBwL,EAAElD,OAAOzB,UAAY2E,EAAElD,OAAO5B,QAAQzE,KAA5D,aAAQuJ,EAAElD,OAAOtI,SAIzB,sBAAKmB,QAAS,kBAAM2G,GAAgB,IAAO/G,UAAU,uBAArD,SAA4E,oBAAGA,UAAW,2BAE5F,sBAAKf,GAAG,uBAAuBe,UAAU,uBAAzC,SACGyI,EAASvI,KAAI,SAAAoJ,GACZ,OACE,uBACEtJ,UAAWsJ,EAAQoB,OAAOnD,OAAOtI,KAAOV,EAAYT,UAAY,8BAAgC,oBADlG,UAGE,sBAAK6E,IAAK2G,EAAQoB,OAAOnD,OAAO5B,QAAQjD,MAAOE,IAAI,aAAa5C,UAAU,0BACzEsJ,EAAQkB,OAFJlB,EAAQrK,SAOrB,sBAAKe,UAAU,+BAAf,SACE,wBAAMA,UAAU,0BAAhB,UACE,wBAAOA,UAAU,0BAA0B2K,KAAK,OAAOrI,SAAU,SAAAC,GAAC,OAAI2H,EAAgB3H,EAAEC,OAAOH,QAAQA,MAAO4H,IAC9G,yBAAQjK,UAAU,2BAA2BI,QAASgK,EAAtD,4BA/BC,MCnFIQ,I,OApBE,WACf,MAAwCnM,oBAAS,GAAjD,mBAAOoM,EAAP,KAAqB9D,EAArB,KAEA,OACE,sBAAK/G,UAAU,qBAAf,SACE,gBAAC,IAAD,WACE,sBAAKA,UAAW6K,EAAe,gCAAiC,yBAAhE,SACE,eAAC,GAAD,CAAmB9D,gBAAiBA,MAEtC,sBAAK/G,UAAU,6BAAf,SACE,eAAC,IAAD,UACE,eAAC,IAAD,CAAO8K,KAAK,gBAAgBC,UAAW,kBAAM,eAAC,GAAD,CAAchE,gBAAiBA,kBCqBzEiE,I,MArCI,SAAC,GAAa,IAAXC,EAAU,EAAVA,IACpB,OAAIA,EAEA,iCACE,eAAC,GAAD,CAAmBvI,MAAOuI,EAAIC,SAAS3D,OAAO5B,QAAQjD,QACtD,uBAAK1C,UAAU,yBAAf,UACE,sBAAKA,UAAU,2BAAf,SAEE,+BAAG,6BAAIiL,EAAIC,SAAS3D,OAAOzB,UAAYmF,EAAIC,SAAS3D,OAAO5B,QAAQzE,OAAnE,mBAA4F,wBACzF+J,EAAIE,iBAAiBjL,KAAI,SAAAY,GAAQ,OAAIA,EAASyG,OAAOrG,aAK1D,uBAAKlB,UAAU,oBAAf,UACE,uBAAKA,UAAU,eAAf,UACE,wCACA,oBAAGA,UAAU,gBAAb,SAA8BiL,EAAIG,YAEpC,uBAAKpL,UAAU,eAAf,UACE,0CACA,oBAAGA,UAAU,gBAAb,SAA8BiL,EAAIjG,cAEpC,uBAAKhF,UAAU,eAAf,UACE,0CACA,qBAAGA,UAAU,gBAAb,UAA8BqB,GAAe4J,EAAII,eAAjD,MAAoEhK,GAAe4J,EAAIK,yBAI5FL,EAAIzK,WAIF,OC2EI+K,GAlGI,WACjB,IAAMC,EAASpG,aAAS/H,GAAgB,CACtCkL,YAAa,SAACzJ,GACZ2M,EAAkB,YAAI3M,EAAK4M,eAAetM,MAAK,SAACuM,EAAIC,GAAL,OAAY,IAAIpM,KAAKoM,EAAGC,UAAUnM,UAAY,IAAIF,KAAKmM,EAAGE,UAAUnM,iBAGjHoM,EAAe,CAAC,mBAAoB,gBAAiB,sBAAuB,yBAClF,EAA4CrN,mBAAqB,IAAjE,mBAAOsN,EAAP,KAAuBN,EAAvB,KAEA,EAAsChN,qBAAtC,mBAAOuN,EAAP,KAAoBC,EAApB,KACA,EAAsCxN,oBAAS,GAA/C,mBAAOyN,EAAP,KAAoBC,EAApB,KAEA,GAAIX,EAAOnG,QACT,OAAO,eAAC,GAAD,IAET,IAMM+G,EAAaZ,EAAO1M,KAAK4M,cAiB/B,OACE,iCACE,sBAAK1L,UAAWkM,EAAc,+BAAiC,wBAA/D,SACE,uBAAKlM,UAAU,sBAAf,UACE,yBAAQI,QAAS,kBAAM+L,GAAe,IAAtC,kBACA,eAAC,GAAD,CAAYlB,IAAKe,SAIrB,uBAAKhM,UAAWkM,EAAc,uBAAyB,8BAAvD,wEAEE,+CACA,yBAAQ5J,SAAU,SAACC,GA3BS,IAACF,KA2BsBE,EAAEC,OAAOH,SA1BlDyJ,EAAa,GACzBL,EAAkB,YAAIW,GAAYhN,MAAK,SAACuM,EAAIC,GAAL,OAAY,IAAIpM,KAAKoM,EAAGC,UAAUnM,UAAY,IAAIF,KAAKmM,EAAGE,UAAUnM,cAEpG2C,IAAUyJ,EAAa,GAC9BL,EAAkB,YAAIW,GAAYhN,MAAK,SAACuM,EAAIC,GAAL,OAAY,IAAIpM,KAAKmM,EAAGE,UAAUnM,UAAY,IAAIF,KAAKoM,EAAGC,UAAUnM,cAEpG2C,IAAUyJ,EAAa,GAC9BL,EAAkB,YAAIW,GAAYhN,MAAK,SAACuM,EAAIC,GAAL,OAAY,IAAIpM,KAAKoM,EAAGP,eAAe3L,UAAY,IAAIF,KAAKmM,EAAGN,eAAe3L,cAE9G2C,IAAUyJ,EAAa,IAC9BL,EAAkB,YAAIW,GAAYhN,MAAK,SAACuM,EAAIC,GAAL,OAAY,IAAIpM,KAAKmM,EAAGN,eAAe3L,UAAY,IAAIF,KAAKoM,EAAGP,eAAe3L,eAgBnH,SACGoM,EAAa5L,KAAI,SAAAmM,GAAM,OAAI,kCAAsBA,GAATA,QAG3C,8BACGN,EAAe7L,KAAI,SAACoM,GACnB,IAAMC,EAAW,kBAAcD,EAAEpB,SAAS3D,OAAO5B,QAAQkB,WAAayF,EAAEpB,SAAS3D,OAAO5B,QAAQzE,MAChG,OACE,uBAAKlB,UAAU,OAAf,UACE,uBAAKA,UAAU,yBAAf,UACE,uBAAKA,UAAU,2BAAf,UACE,sBAAKA,UAAU,kBAAf,SACE,sBAAK2C,IAAK2J,EAAEpB,SAAS3D,OAAO5B,QAAQjD,MAAOE,IAAI,aAAa5C,UAAU,kCAExE,+BAAG,6BAAIsM,EAAEpB,SAAS3D,OAAO5B,QAAQzE,OAAjC,mBAA0D,wBACvDoL,EAAEnB,iBAAiBjL,KAAI,SAAAY,GAAQ,OAAIA,EAASyG,OAAOnE,YAActC,EAASyG,OAAOrG,cAItF,uBAAKlB,UAAU,oBAAf,UACE,uBAAKA,UAAU,eAAf,UACE,wCACA,oBAAGA,UAAU,gBAAb,SAA8BsM,EAAElB,YAElC,uBAAKpL,UAAU,eAAf,UACE,0CACA,oBAAGA,UAAU,gBAAb,SAA8BsM,EAAEtH,cAElC,uBAAKhF,UAAU,eAAf,UACE,0CACA,qBAAGA,UAAU,gBAAb,UAA8BqB,GAAeiL,EAAEjB,eAA/C,MAAkEhK,GAAeiL,EAAEhB,yBAIzF,uBAAKtL,UAAU,oBAAf,UACE,eAAC,GAAD,CAAQgC,KAAMuK,EAAatK,YAAa,kBAAMyH,QAAQC,IAAI,uBAC1D,eAAC,GAAD,CAAQ3H,KAAK,YAAYC,YAAa,kBAvE1B,SAACqK,GAE3BL,EAAeK,GACfH,GAAe,GAoE2CK,CAAoBF,WA5BzCA,EAAErN,gBCpC5BwN,GA/Ba,WAC1B,OACE,sBAAKzM,UAAU,iBAAf,SACI,sBAAKA,UAAU,oBAAf,SACE,sBAAIA,UAAU,eAAd,UACE,qBAAIA,UAAU,eAAd,SACE,eAAC,IAAD,CAAS0G,OAAK,EAACD,GAAG,sBAAsBE,gBAAgB,aAAa3G,UAAU,gBAA/E,uBAIF,qBAAIA,UAAU,eAAd,SACE,eAAC,IAAD,CAAS0G,OAAK,EAACD,GAAG,0BAA0BE,gBAAgB,aAAa3G,UAAU,gBAAnF,4BAIF,qBAAIA,UAAU,eAAd,SACE,eAAC,IAAD,CAAS0G,OAAK,EAACD,GAAG,wBAAwBE,gBAAgB,aAAa3G,UAAU,gBAAjF,0BAIF,qBAAIA,UAAU,eAAd,SACE,eAAC,IAAD,CAAS0G,OAAK,EAACD,GAAG,wBAAwBE,gBAAgB,aAAa3G,UAAU,gBAAjF,kCC4BC0M,GArDU,SAAC,GAWnB,IAVLlM,EAUI,EAVJA,QACAmM,EASI,EATJA,WACA3H,EAQI,EARJA,SACA4H,EAOI,EAPJA,YACAxB,EAMI,EANJA,OACAyB,EAKI,EALJA,UACAxB,EAII,EAJJA,cACAyB,EAGI,EAHJA,iBACAxB,EAEI,EAFJA,YACAyB,EACI,EADJA,eAEA,OACE,iCACE,qDAGA,gDACc,2BACVC,KAAM,GACNC,KAAM,EACN5K,MAAO7B,EACP8B,SAAU,gBAAGE,EAAH,EAAGA,OAAH,OAAgBmK,EAAWnK,EAAOH,aAGhD,6CACW,wBACPA,MAAO2C,EACP1C,SAAU,gBAAGE,EAAH,EAAGA,OAAH,OAAgBoK,EAAYpK,EAAOH,aAGjD,2CACS,wBACLA,MAAO+I,EACP9I,SAAU,gBAAGE,EAAH,EAAGA,OAAH,OAAgBqK,EAAUrK,EAAOH,aAG/C,kFACgD,wBAC5CA,MAAOgJ,EACP/I,SAAU,gBAAGE,EAAH,EAAGA,OAAH,OAAgBsK,EAAiBtK,EAAOH,aAGtD,gDACc,wBACVA,MAAOiJ,EACPhJ,SAAU,gBAAGE,EAAH,EAAGA,OAAH,OAAgBuK,EAAevK,EAAOH,iBCjB3C6K,GArBmB,SAAC,GAAiF,IAA/EC,EAA8E,EAA9EA,gBAAiBC,EAA6D,EAA7DA,gBAAiBjC,EAA4C,EAA5CA,iBAAkBkC,EAA0B,EAA1BA,oBACvF,EAAsC5O,mBAAS,MAAC6O,IAAhD,mBAAO7J,EAAP,KAAoBC,EAApB,KACA,EAAoDjF,mBAAqB,IAAzE,mBAAO8E,EAAP,KAA2BC,EAA3B,KAEA,OACE,iCACE,+DACA,yBAAQpD,QAAS,kBAAMoD,EAAsB2J,IAA7C,gDACA,yBAAQ/M,QAAS,kBAAMoD,EAAsB4J,IAA7C,qCACA,eAAC,GAAD,CACE7J,mBAAoB4H,EACpB3H,sBAAuB6J,EACvB/J,cAAeC,EACfE,YAAaA,EACbC,eAAgBA,IAEjByH,EAAiBjL,KAAI,SAAAoE,GAAC,OAAI,+BAAiBA,EAAEpD,MAAToD,EAAErF,WC8C9BsO,GA9DC,SAAC,GAAkF,IAAhFpC,EAA+E,EAA/EA,iBAAkB3K,EAA6D,EAA7DA,QAASwE,EAAoD,EAApDA,SAAUoG,EAA0C,EAA1CA,OAAQC,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,YAE7E,EAA8C7M,oBAAS,GAAvD,mBAAO+O,EAAP,KAAwBC,EAAxB,KACA,EAA4ChP,mBAAS,IAArD,mBAAOiP,EAAP,KAAuBC,EAAvB,KAEMpP,EAAcC,qBAAWd,IAE/B,EAAmCmM,aAAYhC,GAAiB,CAC9DiC,QAAS,SAACC,GACRL,QAAQC,IAAI,qCAAsCI,MAFtD,mBAAO6D,EAAP,KAAsBvI,EAAtB,KAAsBA,QAMhBwI,EAAM,uCAAG,oCAAAhO,EAAA,6DACPqL,EAAW3M,EAAYT,UACvBgQ,EAAiBnN,GAA6BwK,GAC9C4C,EAAcD,EAAe5N,KAAI,SAAAe,GAAC,OAAIA,EAAEhC,MAHjC,SAKU2O,EAAY,CACjC5O,UAAW,CACTwB,QAASA,EACT6K,cAAeA,EACfC,YAAaA,EACbH,iBAAkB4C,EAClB7C,SAAUA,EACVE,OAAQA,EACRpG,SAAUA,KAbD,OAKPgJ,EALO,QAgBT,UAAAA,EAASlP,YAAT,eAAemP,eAAezN,WAAYA,GAC5CiN,GAAmB,GACnBE,EAAkB,sBAAD,OAAuBK,EAASlP,KAAKmP,eAAehP,MAErEyK,QAAQC,IAAI,2BApBD,2CAAH,qDAwBZ,OAAItE,EACK,eAAC,GAAD,IAINmI,EAaC,iCACE,gDACA,yCAAU,oBAAGU,KAAMR,EAAT,wBAbZ,iCACE,0CACC/M,GAA6BwK,GAAkBjL,KAAI,SAAAY,GAAQ,OAAI,+BAAwBA,EAASI,MAAvBJ,EAAS7B,OACnF,2CAAauB,KACb,4CAAcwE,KACd,0CAAYoG,KACZ,iDAAmBC,KACnB,+CAAiBC,KACjB,eAAC,GAAD,CAAQtJ,KAAK,SAASC,YAAa4L,QCkC5BM,GAhFO,WAEpB,MAA8B1P,mBAAS,kGAAvC,mBAAO+B,EAAP,KAAgBmM,EAAhB,KACA,EAAgClO,mBAAS,IAAzC,mBAAOuG,EAAP,KAAiB4H,EAAjB,KACA,EAA4BnO,mBAAS,IAArC,mBAAO2M,EAAP,KAAeyB,EAAf,KACA,EAA0CpO,mBAAS,cAAnD,mBAAO4M,EAAP,KAAsByB,EAAtB,KACA,EAAsCrO,mBAAS,cAA/C,mBAAO6M,EAAP,KAAoByB,EAApB,KAEA,EAAgDtO,mBAAqB,IAArE,mBAAO0M,EAAP,KAAyBkC,EAAzB,KACA,EAA8C5O,mBAAqB,IAAnE,mBAAO0O,EAAP,KAAwBiB,EAAxB,KACA,EAA8C3P,mBAAqB,IAAnE,mBAAO2O,EAAP,KAAwBiB,EAAxB,KAEMC,EAAwBlJ,aAAS7H,GAAsB,CAC3DgL,YAAa,kBAAM6F,EAAmBE,EAAsBxP,KAAKyP,uBAE7DC,EAAwBpJ,aAAS5H,GAA4B,CACjE+K,YAAa,kBAAM8F,EAAmBG,EAAsB1P,KAAK2P,4BAG7DC,EAAQ,CACZ,eAAC,GAAD,CACEvB,gBAAiBA,EACjBC,gBAAiBA,EACjBjC,iBAAkBA,EAClBkC,oBAAqBA,IAEvB,eAAC,GAAD,CACE7M,QAASA,EACTmM,WAAYA,EACZ3H,SAAUA,EACV4H,YAAaA,EACbxB,OAAQA,EACRyB,UAAWA,EACXxB,cAAeA,EACfyB,iBAAkBA,EAClBxB,YAAaA,EACbyB,eAAgBA,IAElB,eAAC,GAAD,CACE5B,iBAAkBA,EAClB3K,QAASA,EACTwE,SAAUA,EACVoG,OAAQA,EACRC,cAAeA,EACfC,YAAaA,KAIjB,EAAsC7M,mBAAS,GAA/C,mBAAOkQ,EAAP,KAAoBC,EAApB,KAEA,GAAIN,EAAsBjJ,SAAWmJ,EAAsBnJ,QACzD,OAAO,eAAC,GAAD,IAgBT,OACE,iCACE,+BACGqJ,EAAMC,KAET,uBAAK3O,UAAU,6CAAf,UACE,eAAC,GAAD,CAAQiC,YAnBU,WACtB0M,GAAgBD,EAAMzO,OAAS,GAC1B0O,EAAc,GACdC,EAAeD,EAAc,IAgBQ3M,KAAK,SAC3C,eAAC,GAAD,CAAQC,YAdU,WACtB0M,EAAeD,EAAMzO,OAAS,GACzB0O,GAAe,GACfC,EAAeD,EAAc,IAWQ3M,KAAK,gBC9EpC6M,GARG,WAChB,OACE,+BACE,eAAC,GAAD,OC8BSC,GA7BG,WAChB,IAAMvQ,EAAcC,qBAAWd,IACzB8N,EAASpG,aAASlI,GAA+B,CAAE8B,UAAW,CAAEC,GAAIV,EAAYT,aAMtF,OAAI0N,EAAOnG,QACF,eAAC,GAAD,IAIP,iCACE,6CACCmG,EAAO1M,KAAKK,gBAAgB4P,WAAW7O,KAAI,SAACoM,GAC3C,OACE,uBAAgBtM,UAAU,OAA1B,UACE,gDACc,eAAC,GAAD,CAAQ6B,MAAOyK,EAAE0C,QAASlN,YAAa,kBAfpC7C,EAe4DqN,EAAErN,QAdvFyK,QAAQC,IAAI,oBAAqB1K,GADT,IAACA,QAiBjB,6BAAeqN,EAAE9L,SAAT8L,EAAErN,MAJFqN,EAAErN,WCoDPgQ,I,OAjEE,WACf,IAAM1Q,EAAcC,qBAAWd,IACzBwR,EAAa9J,aAAStI,IAC5B,EAAkD2B,mBAAS,IAA3D,mBAAO0Q,EAAP,KAA0BC,EAA1B,KACMC,EAA0BjK,aAAS3H,GAAsB,CAC7D8K,YAAa,SAACzJ,GACZsQ,EAAqBtQ,EAAKqQ,sBAG9B,EAA0BtF,aAAY/B,IAA/BwH,EAAP,oBACMnR,EAAUC,cAChB,EAAsCK,mBAAiB,IAAvD,mBAAOuI,EAAP,KAAoBC,EAApB,KAEA,GAAIiI,EAAW7J,SAAWgK,EAAwBhK,QAChD,OAAO,eAAC,GAAD,IAGT,IAAMkK,EAAwB,uCAAG,WAAOC,GAAP,iBAAA3P,EAAA,6DAC/B6J,QAAQC,IAAI,6BAA8B6F,GADX,SAGVF,EAAgB,CACnCtQ,UAAW,CACTuL,SAAUhM,EAAYT,UACtB0R,WAAYA,KANe,OAGzBhE,EAHyB,OASzBiE,EAAoBjE,EAAO1M,KAAK4Q,mBAAmBzQ,GACzDd,EAAQmC,KAAR,oBAA0BmP,IAVK,2CAAH,sDAa9B,OACE,uBAAKzP,UAAU,0BAAf,UACE,uBAAKA,UAAU,yCAAf,UACE,2CACA,sBAAKA,UAAU,+BAAf,SACE,eAAC,GAAD,CAAWmC,MAAO6E,EAAa5E,SAAU6E,SAI7C,sBAAKjH,UAAU,qBAAf,SACGmP,EAAkBjP,KAAI,SAACyP,GAEtB,GADaA,EAAKhK,QAAQzE,KACjBwG,cAAcnD,SAASyC,EAAYU,eAAgB,CAC1D,IAAMkI,EAAU,oBAAgBD,EAAK1Q,IACrC,OACE,sBAAKe,UAAU,oBAAf,SACE,eAAC,GAAD,CACEf,GAAI0Q,EAAK1Q,GACTyD,MAAOiN,EAAKhK,QAAQjD,MACpBxB,KAAMyO,EAAKhK,QAAQzE,KACnB8B,OAAQ2M,EAAKhK,QAAQ3C,QAAU2M,EAAKhK,QAAQkK,WAC5C5M,IAAK2M,EACL1M,gBAAiB,kBAAMqM,EAAyBI,EAAK1Q,QAPjB0Q,EAAK1Q,IAYjD,OAAO,eCnDF6Q,GAbK,WAClB,OACE,iCACE,qEACA,gCAAI,0CACF,wDACA,kEAEJ,eAAC,GAAD,QCgBWC,GArBC,WACd,IAAQ9Q,EAAYkJ,cAAZlJ,GACF+Q,EAAgB5K,aAAShI,GAAe,CAC5C4B,UAAW,CAAEC,QAGf,GAAI+Q,EAAc3K,QAChB,OAAO,eAAC,GAAD,IAGT,IAAK2K,EAAclR,KACjB,OAAO,kHAET,IAAMmM,EAAM+E,EAAclR,KAAKmR,aAE/B,OACE,eAAC,GAAD,CAAYhF,IAAKA,KCUNiF,GAtBG,WAChB,OACE,qCACE,eAAC,IAAD,UACE,uBAAKlQ,UAAU,WAAf,UACE,eAAC,GAAD,IACA,sBAAKA,UAAU,YAAf,SACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAAO8K,KAAK,0BAA0BC,UAAW+E,KACjD,eAAC,IAAD,CAAOhF,KAAK,yBAAyBC,UAAWgF,KAChD,eAAC,IAAD,CAAOjF,KAAK,sBAAsBC,UAAWQ,KAC7C,eAAC,IAAD,CAAOT,KAAK,wBAAwBC,UAAW8D,KAC/C,eAAC,IAAD,CAAO/D,KAAK,wBAAwBC,UAAW+D,kBC2D9CqB,I,OAvEA,WACb,IAAM5R,EAAcC,qBAAWd,IACzBS,EAAUC,cAChB,EAAgCK,mBAAS,IAAzC,mBAAOqH,EAAP,KAAiBsK,EAAjB,KACA,EAAgC3R,mBAAS,IAAzC,mBAAO4R,EAAP,KAAiBC,EAAjB,KAEA,EAAwBzG,aAAYlC,GAAO,CACzCmC,QAAS,SAACC,GAERL,QAAQC,IAAI,gCAAiCI,EAAMwG,cAAc,GAAGjH,YAHxE,mBAAOkH,EAAP,KAAchF,EAAd,KAOAzM,qBAAU,WACR,GAAIyM,EAAO1M,KAAM,CACf,IAAMG,EAAKuM,EAAO1M,KAAK0R,MAAMvR,GACvBrB,EAAQ4N,EAAO1M,KAAK0R,MAAMnO,MAChCmD,aAAaK,QAAQpF,GAAe7C,GACpCW,EAAYV,SAASD,GACrB8H,eAAeG,QAAQnF,GAAezB,GACtCV,EAAYR,aAAakB,GACzBd,EAAQmC,KAAK,QAEd,CAACkL,EAAO1M,OAEX,IAAM+O,EAAM,uCAAG,WAAOxD,GAAP,SAAAxK,EAAA,sDACbwK,EAAMC,iBAENkG,EAAM,CAAExR,UAAW,CAAE8G,WAAUuK,cAHlB,2CAAH,sDAMZ,OACE,sBAAKrQ,UAAU,yBAAf,SACE,uBAAKA,UAAU,sCAAf,UACE,uBAAKA,UAAU,wCAAf,UACE,eAAC,GAAD,IACA,6CAEF,wBAAMyQ,SAAU5C,EAAhB,UACE,uBAAK7N,UAAU,gCAAf,UACE,qDAEE,wBACA,wBACEqC,MAAOyD,EACPxD,SAAU,gBAAGE,EAAH,EAAGA,OAAH,OAAgB4N,EAAY5N,EAAOH,aAGjD,wBACA,4CAEE,wBACA,wBACEsI,KAAK,WACLtI,MAAOgO,EACP/N,SAAU,gBAAGE,EAAH,EAAGA,OAAH,OAAgB8N,EAAY9N,EAAOH,gBAInD,sBAAKrC,UAAU,uCAAf,SACE,yBAAQA,UAAU,cAAc2K,KAAK,SAArC,0BAGJ,qBAAG3K,UAAU,gCAAb,yBACY,oBAAGkO,KAAK,UAAR,+BCgCLwC,GApGA,WACb,IAAMvS,EAAUC,cAChB,EAAkCK,mBAAS,IAA3C,mBAAOoI,EAAP,KAAkB8J,EAAlB,KACA,EAAgClS,mBAAS,IAAzC,mBAAOmS,EAAP,KAAiBC,EAAjB,KACA,EAAgCpS,mBAAS,IAAzC,mBAAOqH,EAAP,KAAiBsK,EAAjB,KACA,EAAgC3R,mBAAS,IAAzC,mBAAO4R,EAAP,KAAiBC,EAAjB,KAEA,EAAyBzG,aAAYjC,GAAQ,CAC3CkC,QAAS,SAACC,GACRL,QAAQC,IAAI,gCAAiCI,EAAMwG,cAAc,GAAGjH,YAFxE,mBAAOwH,EAAP,KAAetF,EAAf,KAMAzM,qBAAU,WACJyM,EAAO1M,MAETX,EAAQmC,KAAK,aAEd,CAACkL,EAAO1M,OAEX,IAAM+O,EAAM,uCAAG,WAAOxD,GAAP,SAAAxK,EAAA,sDACbwK,EAAMC,iBACNwG,EAAO,CACL9R,UAAW,CACT6H,UAAWA,EACX+J,SAAUA,EACV9K,SAAUA,EACVuK,SAAUA,KAPD,2CAAH,sDAYZ,OACE,sBAAKrQ,UAAU,yBAAf,SACE,uBAAKA,UAAU,sCAAf,UACE,uBAAKA,UAAU,wCAAf,UACE,eAAC,GAAD,IACA,6CAEF,wBAAMyQ,SAAU5C,EAAhB,UACE,uBAAK7N,UAAU,gCAAf,UACE,8CAEE,wBACA,wBACEqC,MAAOwE,EACPvE,SAAU,gBAAGE,EAAH,EAAGA,OAAH,OAAgBmO,EAAanO,EAAOH,aAGlD,wBACA,6CAEE,wBACA,wBACEA,MAAOuO,EACPtO,SAAU,gBAAGE,EAAH,EAAGA,OAAH,OAAgBqO,EAAYrO,EAAOH,aAGjD,wBACA,qDAEE,wBACA,wBACEA,MAAOyD,EACPxD,SAAU,gBAAGE,EAAH,EAAGA,OAAH,OAAgB4N,EAAY5N,EAAOH,aAGjD,wBACA,4CAEE,wBACA,wBACEsI,KAAK,WACLtI,MAAOgO,EACP/N,SAAU,gBAAGE,EAAH,EAAGA,OAAH,OAAgB8N,EAAY9N,EAAOH,aAG/C,wBACF,oDAEE,wBACA,wBACEsI,KAAK,WACLtI,MAAOgO,EACP/N,SAAU,gBAAGE,EAAH,EAAGA,OAAH,OAAgB8N,EAAY9N,EAAOH,gBAInD,sBAAKrC,UAAU,uCAAf,SACE,yBAAQA,UAAU,cAAc2K,KAAK,SAArC,0BAGJ,qBAAG3K,UAAU,gCAAb,sCAC2B,oBAAGkO,KAAK,UAAR,8BCnGpB,I,OAAA,IAA0B,0CCA1B,OAA0B,yCCA1B,OAA0B,qCCiE1B6C,GA1DF,WAEX,OACE,uBAAK/Q,UAAU,iBAAf,UACE,uBAAKA,UAAU,uBAAf,UACE,uBAAKA,UAAU,oDAAf,UACE,qBAAGkO,KAAK,QAAQlO,UAAU,uBAA1B,8BAAkE,oBAAGA,UAAU,0BAC/E,uBAAKA,UAAU,oBAAf,UACE,oBAAGkO,KAAK,SAASlO,UAAU,uBAA3B,mBACA,oBAAGkO,KAAK,YAAYlO,UAAU,uBAA9B,4BAGJ,uBAAKA,UAAU,kDAAf,UACE,oBAAGkO,KAAK,UAAUlO,UAAU,iCAA5B,qBACA,oBAAGkO,KAAK,UAAUlO,UAAU,iCAA5B,2BAIJ,uBAAKA,UAAU,mBAAf,UAEE,uBAAKA,UAAU,4BAA4Bf,GAAG,OAA9C,UACE,sBAAKe,UAAU,4BAAf,SACE,sBAAK2C,IAAKqO,GAAcpO,IAAI,GAAG5C,UAAU,gDAE3C,sBAAKA,UAAU,kBAAf,SACE,sBAAIA,UAAU,QAAd,yBAAkC,wBAAlC,0BAIJ,uBAAKA,UAAU,4BAA4Bf,GAAG,QAA9C,UACE,sBAAKe,UAAU,4BAAf,SACE,sBAAK2C,IAAKsO,GAAcrO,IAAI,GAAG5C,UAAU,gDAE3C,uBAAKA,UAAU,sBAAf,UACE,wCACA,kwBAIJ,uBAAKA,UAAU,+BAA+Bf,GAAG,WAAjD,UACE,sBAAKe,UAAU,4BAAf,SACE,sBAAK2C,IAAKuO,GAAUtO,IAAI,GAAG5C,UAAU,4CAEvC,uBAAKA,UAAU,sBAAf,UACE,2CACA,+wBAIJ,uBAAKA,UAAU,6BAAf,UACE,yCACA,iwBCTKmR,I,OAxCC,WACd,IAAM5S,EAAcC,qBAAWd,IACzB8N,EAASpG,aAASvI,IAElBuU,EAAchM,aAASpI,GAAoB,CAAEgC,UAAW,CAAEC,GAAIV,EAAYT,aAC1EK,EAAUC,cAEhB,GAAIoN,EAAOnG,SAAW+L,EAAY/L,QAChC,OAAO,eAAC,GAAD,IAkBT,OACE,uBAAKrF,UAAU,yBAAf,UACE,sBAAIA,UAAU,qBAAd,UAjBmB,WACrB,IAAMqR,GAAc,IAAI7R,MAAO8R,WAC/B,OAAID,EAAc,GAAKA,GAAe,GAC7B,eAEAA,EAAc,IAAMA,GAAe,GACnC,WAEAA,EAAc,IAAMA,GAAe,GACnC,eAEA,UAM6BE,GAApC,KAAuD,6BAAI/F,EAAO1M,KAAKqG,GAAGW,cAC1E,6BAAG,iDAAmB0F,EAAO1M,KAAKqG,GAAGlG,SACnCuM,EAAO1M,KAAKqG,GAAGQ,QAAQ6L,gBACvB,sBAAKxR,UAAU,OAAOI,QAAS,kBAAMjC,EAAQmC,KAAK,mBAAlD,SAAqE,8DACvE,wBACiD,UAAhD8Q,EAAYtS,KAAKK,gBAAgBsS,YAClC,oEAAqC,6BAAIL,EAAYtS,KAAKK,gBAAgBwG,QAAQzE,UACjF3C,EAAYT,eCtCJ4T,GAJE,WACf,OAAO,4CCYMC,GAfD,SAAC,GAA4B,IAA1B3P,EAAyB,EAAzBA,KAAM4P,EAAmB,EAAnBA,QACrB,OACE,iCACE,sDACA,2BACEvP,MAAOL,EACPM,SAAU,SAAAC,GAAC,OAAIqP,EAAQrP,EAAEC,OAAOH,QAChC2K,KAAM,GACNC,KAAM,SC2BC4E,GAtBK,SAAC,GAA2B,IAAzB7O,EAAwB,EAAxBA,OAAQ8O,EAAgB,EAAhBA,UAC7B,EAA0CrT,mBAAqB,IAA/D,mBAAO6E,EAAP,KAAsByO,EAAtB,KACA,EAAsCtT,mBAAS,MAAC6O,IAAhD,mBAAO7J,EAAP,KAAoBC,EAApB,KACA,EAA0B0B,aAAS5H,GAA4B,CAAE+K,YAAa,kBAAMwJ,EAAiBjT,EAAK2P,4BAAlGpJ,EAAR,EAAQA,QAASvG,EAAjB,EAAiBA,KAEjB,OAAIuG,EAAgB,eAAC,GAAD,IAGlB,iCACA,qDACE,eAAC,GAAD,CACE9B,mBAAoBP,EACpBQ,sBAAuBsO,EACvBxO,cAAeA,EACfG,YAAaA,EACbC,eAAgBA,IAEnBV,EAAO9C,KAAI,SAAAoE,GAAC,OAAI,+BAAiBA,EAAEpD,MAAToD,EAAErF,WCHlB+S,GA3BM,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,UAAWC,EAAoC,EAApCA,aAAqBC,GAAe,EAAtBzP,MAAsB,EAAfyP,UAkBtD,OACE,iCACE,2DACA,wBAAO9P,MAAO4P,EAAW3P,SAAU,SAAAC,GAAC,OAAI2P,EAAa3P,EAAEC,OAAOH,UAC9D,wBAAOsI,KAAK,OAAOzJ,KAAK,QAAQkR,OAAO,oBAAoB9P,SAAU,SAAAC,GAAC,OApBhD,SAAC8H,GAEzB,GAAIA,EAAM7H,OAAO6P,OAAShI,EAAM7H,OAAO6P,MAAM,GAE3C,GADA3I,QAAQC,IAAI,YAAaU,EAAM7H,OAAO6P,MAAM,GAAGC,MAC3CjI,EAAM7H,OAAO6P,MAAM,GAAGC,MAAQ,IAChC5I,QAAQC,IAAI,uBACP,CACL,IAAM4I,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAACpI,GAAW,IAAD,EACzB8H,EAASO,OAAM,OAACrI,QAAD,IAACA,GAAD,UAACA,EAAO7H,cAAR,aAAC,EAAegJ,UAEjC+G,EAAOI,cAActI,EAAM7H,OAAO6P,MAAM,KASgCO,CAAkBrQ,UCwCnFgL,GAxDC,SAAC,GAAwD,IAAtDsF,EAAqD,EAArDA,cAAeZ,EAAsC,EAAtCA,UAAWvP,EAA2B,EAA3BA,MAAOM,EAAoB,EAApBA,OAAQ8P,EAAY,EAAZA,MAC1D,EAA8CrU,oBAAS,GAAvD,mBAAO+O,EAAP,KAAwBC,EAAxB,KACA,EAA4ChP,mBAAS,IAArD,mBAAOiP,EAAP,KAAuBC,EAAvB,KAEA,EAAmC9D,aAAY7B,GAAc,CAC3D8B,QAAS,SAACC,GACRL,QAAQC,IAAI,4CAA6CI,MAF7D,mBAAOgJ,EAAP,KAAsB1N,EAAtB,KAAsBA,QAMhB2N,EAAY,uCAAG,kCAAAnT,EAAA,6DACboT,EAAWjQ,EAAO9C,KAAI,SAAAiD,GAAK,OAAIA,EAAMlE,MACrCiU,EAAUL,EAAc3S,KAAI,SAAAiT,GAAI,OAAIA,EAAKlU,MAF5B,SAII8T,EAAY,CACjC/T,UAAW,CACTkC,KAAM+Q,EACNmB,MAAOF,EACPJ,MAAOA,EACPpQ,MAAOA,EACPM,OAAQiQ,KAVO,OAIbjF,EAJa,OAaqB,WAApC,UAAAA,EAASlP,YAAT,eAAeiU,YAAYM,OAC7B5F,GAAmB,GACnBE,EAAkB,aAAD,OAAcK,EAASlP,KAAKiU,YAAY9T,MAEzDyK,QAAQC,IAAI,2BAjBK,2CAAH,qDAsBlB,OAAItE,EACK,eAAC,GAAD,IAINmI,EAYC,iCACE,4DACA,yCAAU,oBAAGU,KAAMR,EAAT,wBAZZ,iCACE,0CADF,UAEUmF,EAAc3S,KAAI,SAAAoT,GAAC,OAAI,6BAAIA,EAAExN,cAFvC,SAGSmM,EACP,sBAAKtP,IAAKD,EAAOE,IAAI,iBACpBI,EAAO9C,KAAI,SAAAiD,GAAK,OAAI,6BAAIA,EAAMjC,UALjC,UAMU4R,EACR,eAAC,GAAD,CAAQ7Q,YAAa+Q,EAAchR,KAAK,eCgBjCuR,I,OAxDO,SAAC,GAAyC,IAAvCV,EAAsC,EAAtCA,cAAeW,EAAuB,EAAvBA,iBAChCC,EAAiBrO,aAAS9H,IAC1B4R,EAAa9J,aAAStI,IAY5B,GAVAiC,qBAAU,WACR,GAAImQ,EAAWpQ,MAAQ2U,EAAe3U,KAAM,CAC1C,IAAM4U,EAAWD,EAAe3U,KAAK6U,SAAS3S,MAAK,SAACmS,GAAD,OAAgBA,EAAKlU,KAAOiQ,EAAWpQ,KAAKqG,GAAGlG,MAC7F4T,EAAc3S,KAAI,SAAAoT,GAAC,OAAIA,EAAErU,MAAIsF,SAAS2K,EAAWpQ,KAAKqG,GAAGlG,KAC5DuU,EAAiBX,EAAcrO,OAAOkP,OAIzC,CAACxE,EAAWpQ,KAAM2U,EAAe3U,OAEhC2U,EAAepO,SAAW6J,EAAW7J,QACvC,OAAO,eAAC,GAAD,IAST,OACE,uBAAKrF,UAAU,sBAAf,UACE,iDAEA,uBAAKA,UAAU,2BAAf,UACE,2CACC6S,EAAc3S,KAAI,SAAAoT,GACjB,OACE,uBACEtT,UAAU,gBACVI,QAAS,kBAhBiB,SAACkT,GACjCA,EAAErU,KAAOiQ,EAAWpQ,KAAKqG,GAAGlG,IAC9BuU,EAAiBX,EAAczR,QAAO,SAAA+R,GAAI,OAAIA,EAAKrN,WAAawN,EAAExN,aAc3C8N,CAA8BN,IAF/C,UAGE,eAAC,GAAD,CAAkBrU,GAAIqU,EAAErU,GAAIyD,MAAO4Q,EAAE3N,QAAQjD,MAAOxB,KAAMoS,EAAExN,WAC5D,sBAAK9F,UAAU,mDAAf,6BAKR,sBAAKA,UAAU,sBAAf,SACGyT,EAAe3U,KAAK6U,SAASzT,KAAI,SAAAoT,GAChC,OACE,uBAAKtT,UAAU,qBAAqBI,QAAS,kBAAMoT,EAAiBX,EAAcrO,OAAO8O,KAAzF,WACIT,EAAc7R,MAAK,SAAAmS,GAAI,OAAIA,EAAKrN,WAAawN,EAAExN,aAC/C,eAAC,GAAD,CAAkB7G,GAAIqU,EAAErU,GAAIyD,MAAO4Q,EAAE3N,QAAQjD,MAAOxB,KAAMoS,EAAExN,WAC9D,sBAAK9F,UAAU,8CAAf,8BCVC6T,GApCS,WACtB,MAA0CpV,mBAAiB,IAA3D,mBAAOoU,EAAP,KAAsBW,EAAtB,KACA,EAA4B/U,mBAAiB,IAA7C,mBAAOuE,EAAP,KAAe8O,EAAf,KACA,EAAkCrT,mBAAS,cAA3C,mBAAOwT,EAAP,KAAkBC,EAAlB,KACA,EAA0BzT,mBAAS,IAAnC,mBAAOqU,EAAP,KAAcgB,EAAd,KACA,EAA0BrV,mBAAS,IAAnC,mBAAOiE,EAAP,KAAcyP,EAAd,KACA,EAAsC1T,mBAAS,GAA/C,mBAAOkQ,EAAP,KAAoBC,EAApB,KACMF,EAAQ,CACZ,eAAC,GAAD,CAAemE,cAAeA,EAAeW,iBAAkBA,IAC/D,eAAC,GAAD,CAAaxQ,OAAQA,EAAQ8O,UAAWA,IACxC,eAAC,GAAD,CAAcG,UAAWA,EAAWC,aAAcA,EAAcxP,MAAOA,EAAOyP,SAAUA,IACxF,eAAC,GAAD,CAAOnQ,KAAM8Q,EAAOlB,QAASkC,IAC7B,eAAC,GAAD,CAASjB,cAAeA,EAAeZ,UAAWA,EAAWvP,MAAOA,EAAOM,OAAQA,EAAQ8P,MAAOA,KAWpG,OACE,uBAAK9S,UAAU,8BAAf,UACE,sBAAKA,UAAU,4BAAf,SACG0O,EAAMC,KAET,uBAAK3O,UAAU,6CAAf,UACE,eAAC,GAAD,CAAQiC,YAdU,WACtB0M,GAAgBD,EAAMzO,OAAS,GAAM0O,EAAc,GAAKC,EAAeD,EAAc,IAa3C3M,KAAK,SAC3C,eAAC,GAAD,CAAQC,YAXU,WACtB0M,EAAeD,EAAMzO,OAAS,GAAM0O,GAAe,GAAKC,EAAeD,EAAc,IAU3C3M,KAAK,gBClCpC+R,GANK,WAClB,OACE,eAAC,GAAD,KCuDWC,GAtDC,WACd,IAAQ/U,EAAYkJ,cAAZlJ,GACFuM,EAASpG,aAASpI,GAAoB,CAC1CgC,UAAW,CAAEC,QAGf,GAAIuM,EAAOnG,QACT,OAAO,eAAC,GAAD,IAKT,GAFAqE,QAAQC,IAAI,oBAAqB6B,EAAO1M,OAEnC0M,EAAO1M,KACV,OAAO,uDAGT,IAAMuU,EAAO7H,EAAO1M,KAAKK,gBAAgBkU,KAEzC,MAAa,SAATA,EAEA,+BACG7H,EAAO1M,KAEJ,iCACE,gCAAK0M,EAAO1M,KAAKK,gBAAgB2G,SAAjC,gBACC0F,EAAO1M,KAAKK,gBAAgBwG,QAAQmN,MACrC,sBAAKnQ,IAAK6I,EAAO1M,KAAKK,gBAAgBwG,QAAQjD,MAAOE,IAAI,GAAG3D,GAAG,MAAMe,UAAU,MAAMiU,MAAO,SAI9F,iCAAK,yDAAL,IAAqChV,OAK3B,UAAToU,EAEP,+BACG7H,EAAO1M,KACH,iCACD,6BAAI0M,EAAO1M,KAAKK,gBAAgBwG,QAAQzE,OACxC,sBAAKyB,IAAK6I,EAAO1M,KAAKK,gBAAgBwG,QAAQjD,MAAOE,IAAI,GAAG3D,GAAG,MAAMe,UAAU,MAAMiU,MAAO,MAC3FzI,EAAO1M,KAAKK,gBAAgBiU,MAAMlT,KAAI,SAAAiT,GAAI,OAAI,+BAAoBA,EAAKrN,UAAfqN,EAAKlU,UAE7D,sDAKP,6CC7CSiV,GARW,SAAC,GAAc,IAAZhT,EAAW,EAAXA,KAC3B,OACE,wCACM,6BAAIA,IADV,kCC+BWiT,GAtBA,SAAC,GAA2B,IAAzBnR,EAAwB,EAAxBA,OAAQ8O,EAAgB,EAAhBA,UACxB,EAA0CrT,mBAAqB,IAA/D,mBAAO6E,EAAP,KAAsByO,EAAtB,KACA,EAAsCtT,mBAAS,MAAC6O,IAAhD,mBAAO7J,EAAP,KAAoBC,EAApB,KACA,EAA0B0B,aAAS7H,GAAsB,CAAEgL,YAAa,kBAAMwJ,EAAiBjT,EAAKyP,uBAA5FlJ,EAAR,EAAQA,QAASvG,EAAjB,EAAiBA,KAEjB,OAAIuG,EAAgB,eAAC,GAAD,IAGlB,iCACE,qDACA,eAAC,GAAD,CACE9B,mBAAoBP,EACpBQ,sBAAuBsO,EACvBxO,cAAeA,EACfG,YAAaA,EACbC,eAAgBA,IAEjBV,EAAO9C,KAAI,SAAAoE,GAAC,OAAI,+BAAiBA,EAAEpD,MAAToD,EAAErF,WCfpB0S,GAfD,SAAC,GAA4B,IAA1B3P,EAAyB,EAAzBA,KAAM4P,EAAmB,EAAnBA,QACrB,OACE,iCACE,oDACA,2BACEvP,MAAOL,EACPM,SAAU,SAAAC,GAAC,OAAIqP,EAAQrP,EAAEC,OAAOH,QAChC2K,KAAM,GACNC,KAAM,SCeCmH,GArBD,SAAC,GAAuB,IAAtB1R,EAAqB,EAArBA,MAAOyP,EAAc,EAAdA,SAYrB,OACE,iCACE,4CACA,wBAAOxH,KAAK,OAAOzJ,KAAK,QAAQkR,OAAO,oBAAoB9P,SAAU,SAAAC,GAAC,OAbhD,SAAC8H,GACzB,GAAIA,EAAM7H,OAAO6P,OAAShI,EAAM7H,OAAO6P,MAAM,GAAI,CAC/C,IAAME,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAACpI,GAAW,IAAD,EACzB8H,EAASO,OAAM,OAACrI,QAAD,IAACA,GAAD,UAACA,EAAO7H,cAAR,aAAC,EAAegJ,UAEjC+G,EAAOI,cAActI,EAAM7H,OAAO6P,MAAM,KAOkCO,CAAkBrQ,MAC5F,sBAAKI,IAAKD,EAAOE,IAAI,GAAGqR,MAAO,UCqCtB1G,GAhDC,SAAC,GAA8B,IAA5BvK,EAA2B,EAA3BA,OAAQ8P,EAAmB,EAAnBA,MAAOpQ,EAAY,EAAZA,MAC1B2R,EAAOjP,aAAStI,GAAO,CAAEyL,YAAa,kBAAMoF,EAAkB,aAAD,OAAc0G,EAAKvV,KAAKqG,GAAGlG,QAC9F,EAA8CR,oBAAS,GAAvD,mBAAO+O,EAAP,KAAwBC,EAAxB,KACA,EAA4ChP,mBAAS,IAArD,mBAAOiP,EAAP,KAAuBC,EAAvB,KAEA,EAAyC9D,aAAY5B,GAAqB,CACxE6B,QAAS,SAACC,GACRL,QAAQC,IAAI,4CAA6CI,MAF7D,mBAAOuK,EAAP,KAA4BjP,EAA5B,KAA4BA,QAMtB2N,EAAY,uCAAG,4BAAAnT,EAAA,6DACboT,EAAWjQ,EAAO9C,KAAI,SAAAoE,GAAC,OAAIA,EAAErF,MADhB,SAEIqV,EAAkB,CACvCtV,UAAW,CACTgE,OAAQiQ,EACRH,MAAOA,EACPpQ,MAAOA,KANQ,cASN5D,KAAKwV,kBAAkBxB,QAAUA,GAC5CrF,GAAmB,GAVF,2CAAH,qDAclB,OAAIpI,EACK,eAAC,GAAD,IAINmI,EAWC,iCACE,8DACA,yCAAU,oBAAGU,KAAMR,EAAT,wBAXZ,iCACE,0CACC1K,EAAO9C,KAAI,SAAAoE,GAAC,OAAI,+BAAiBA,EAAEpD,MAAToD,EAAErF,OAC7B,wBACC6T,EACD,sBAAKnQ,IAAKD,EAAOE,IAAI,GAAGqR,MAAO,MAC/B,eAAC,GAAD,CAAQjS,KAAK,SAASC,YAAa+Q,QCmB5BuB,I,OA5CW,WACxB,MAA4B9V,mBAAqB,IAAjD,mBAAOuE,EAAP,KAAe8O,EAAf,KACA,EAAkCrT,mBAAS,IAA3C,mBAAO+V,EAAP,KAAkBC,EAAlB,KACA,EAA0BhW,qBAA1B,mBAAOiE,EAAP,KAAcyP,EAAd,KACA,EAA0B/M,aAASvI,GAAI,CAAE0L,YAAa,WACpDuJ,EAAUhT,EAAKqG,GAAGQ,QAAQ3C,QAC1BmP,EAASrT,EAAKqG,GAAGQ,QAAQjD,OACzB+R,EAAa3V,EAAKqG,GAAGQ,QAAQmN,UAHvBzN,EAAR,EAAQA,QAASvG,EAAjB,EAAiBA,KAKjB,EAAsCL,mBAAS,GAA/C,mBAAOkQ,EAAP,KAAoBC,EAApB,KACMF,EAAQ,CACZ,eAAC,GAAD,CAAmBxN,KAAI,OAAEpC,QAAF,IAAEA,OAAF,EAAEA,EAAMqG,GAAGW,WAClC,eAAC,GAAD,CAAQ9C,OAAQA,EAAQ8O,UAAWA,IACnC,eAAC,GAAD,CAAO9P,KAAMwS,EAAW5C,QAAS6C,IACjC,eAAC,GAAD,CAAO/R,MAAOA,EAAOyP,SAAUA,IAC/B,eAAC,GAAD,CAASnP,OAAQA,EAAQ8P,MAAO0B,EAAW9R,MAAOA,KAGpD,GAAI2C,EACF,OAAO,eAAC,GAAD,IAWT,OACE,uBAAKrF,UAAU,gCAAf,UACE,gEACA,sBAAKA,UAAU,4BAAf,SACG0O,EAAMC,KAET,uBAAK3O,UAAU,6CAAf,UACE,eAAC,GAAD,CAAQiC,YAfU,WACtB0M,GAAgBD,EAAMzO,OAAS,GAAM0O,EAAc,GAAKC,EAAeD,EAAc,IAc3C3M,KAAK,SAC3C,eAAC,GAAD,CAAQC,YAZU,WACtB0M,EAAeD,EAAMzO,OAAS,GAAM0O,GAAe,GAAKC,EAAeD,EAAc,IAW3C3M,KAAK,iBC/CpC0S,GARO,WACpB,OACE,+BACE,eAAC,GAAD,O,6CCuBSC,G,oDA1Bb,WAAYC,GAAQ,IAAD,+BACjB,cAAMA,IACD/S,MAAQ,CAAEgT,UAAU,GAFR,E,sDAUnB,SAAkB9K,EAAO+K,GAGvBpL,QAAQC,IAAI,4BAA6BI,EAAO,eAAgB+K,K,oBAGlE,WACE,OAAIC,KAAKlT,MAAMgT,SAEN,wDAGFE,KAAKH,MAAM1Q,Y,uCAjBpB,SAAgC6F,GAE9B,MAAO,CAAE8K,UAAU,O,GARKG,IAAMC,WCInBC,GANG,WAChB,OACE,gFCoEWC,GA7CH,WACV,IAAMC,EAAoB5P,aAAa6P,QAAQ5U,IAC/C,EAA0BhC,mBAAS2W,GAAnC,mBAAOxX,EAAP,KAAcC,EAAd,KACA,EAAkCY,mBAASiH,eAAe2P,QAAQ3U,KAAlE,mBAAO5C,EAAP,KAAkBC,EAAlB,KAEA,OACE,eAAC,GAAD,UACE,gBAAC,IAAD,WAEI,sBAAKiC,UAAU,8BAAf,4BAIF,eAACtC,GAAY4X,SAAb,CAAsBjT,MAAO,CAAEzE,QAAOC,WAAUC,YAAWC,gBAA3D,SACIH,EAOA,uCACE,eAAC,GAAD,IACA,sBAAKoC,UAAU,QAAf,SACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAAO8K,KAAK,YAAYC,UAAWH,KACnC,eAAC,IAAD,CAAOE,KAAK,aAAaC,UAAWmF,KACpC,eAAC,IAAD,CAAOpF,KAAK,gBAAgBC,UAAWiJ,KACvC,eAAC,IAAD,CAAOlJ,KAAK,YAAYC,UAAWkE,KACnC,eAAC,IAAD,CAAOnE,KAAK,YAAYC,UAAW2G,KACnC,eAAC,IAAD,CAAO5G,KAAK,eAAeC,UAAWgJ,KACtC,eAAC,IAAD,CAAOjJ,KAAK,iBAAiBC,UAAW2J,KACxC,eAAC,IAAD,CAAO5J,KAAK,iBAAiBC,UAAWmK,KACxC,eAAC,IAAD,CAAOxO,OAAK,EAACoE,KAAK,IAAIC,UAAWoG,aAlBrC,gBAAC,IAAD,WACA,eAAC,IAAD,CAAOrG,KAAK,UAAUC,UAAW,kBAAM,eAAC,GAAD,OACvC,eAAC,IAAD,CAAOD,KAAK,UAAUC,UAAW,kBAAM,eAAC,GAAD,OACvC,eAAC,IAAD,CAAOD,KAAK,IAAIC,UAAWgG,gBCxBnCwE,GAAWC,aAAW,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,QAC1B9X,EAAQ4H,aAAa6P,QAAQ5U,IACnC,MAAO,CACLiV,QAAQ,2BACHA,GADE,IAELC,cAAe/X,EAAK,iBAAaA,GAAU,WAS3CgY,GAAW,IAAIC,IAAS,CAAEC,IAF5B,mDAIEC,GAAS,IAAIC,IAAc,CAC/BF,IAEI,+CACJG,QAAS,CACPC,WAAW,KAITC,GAAYC,iBAAM,YAAgB,IAAb5M,EAAY,EAAZA,MACnB6M,EAAaC,YAAkB9M,GACrC,MACsB,wBAApB6M,EAAWhD,MACc,iBAAzBgD,EAAWE,YAGbR,GACAR,GAAS/Q,OAAOoR,KAGZY,GAAQ,IAAIC,IAAc,CAC9BC,aAAc,CACZxO,aAAc,CACZyO,OAAQ,CACNlO,SAAU,CACRmO,MADQ,WAC+B,IAAlBC,EAAiB,uCAEpC,OAAOA,MAKfC,KAAM,CACJH,OAAQ,CACNhR,QAAS,CACPiR,MADO,SACDG,EAAUF,GAEd,OAAOA,MAKfG,MAAO,CACLL,OAAQ,CACNnO,iBAAkB,CAChBoO,MADgB,SACVG,EAAUF,GAEd,OAAOA,IAGX1X,gBAAiB,CACfyX,MADe,SACTG,EAAUF,GAEd,OAAOA,SAiBbxY,GAAS,IAAI4Y,IAAa,CAC9BT,MAAOA,GACPjW,KAAM4V,GACNe,mBAAmB,IAGrBC,IAASC,OACP,eAACC,EAAA,EAAD,CAAgBhZ,OAAQA,GAAxB,SACE,eAAC,GAAD,MAEFuK,SAASC,eAAe,U","file":"static/js/main.370c774f.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\n\nexport const MESSAGE_ADDED = gql`\n  subscription {\n    messageAdded {\n      body\n    }\n  }\n`\n\nexport const NOTIFICATION_ADDED = gql`\n  subscription {\n    notificationAdded {\n      content\n    }\n  }\n`","import { gql } from '@apollo/client';\n\nexport const ME = gql`\n  query me {\n    me {\n      id\n      username\n      jobQueries {\n        id, \n        content, \n        postedOn,\n        visible\n      },\n      groups {\n        id\n        profile {\n          name\n        }\n      },\n      profile {\n        skills {\n          id\n          name\n          parent {\n            name\n          }\n          children {\n            name\n          }\n        }\n        about\n        image\n        isEditedByUser\n      }\n    }\n  }\n`\n\nexport const MY_ID = gql`\n  query myId {\n    me {\n      id,\n      username\n    }\n  }\n`\n\nexport const GET_NOTIFICATIONS = gql`\n  query getNotifications($id: ID!) {\n    findUserOrGroup(id: $id) {\n        ... on User {\n        notifications {\n          id\n          content\n          link\n          date\n        }\n      }\n      ... on Group {\n        notifications {\n          id\n          content\n          link\n          date\n        }\n      }\n    }\n  }\n`\n\nexport const FIND_USER = gql`\n  query findUser($id: ID!) {\n    findUser (id: $id) {\n      username,\n      profile {\n        about,\n        image\n      }\n    }\n  }\n`\n\nexport const FIND_GROUP = gql`\n  query findGroup($id: ID!) {\n    findGroup(id: $id) {\n      name\n    }\n  }\n`\n\nexport const FIND_USER_OR_GROUP = gql`\n  query findUserOrGroup($id: ID!) {\n    findUserOrGroup(id: $id) {\n        ... on User {\n        id\n        kind\n        username\n        profile {\n          about,\n          image,\n          firstName,\n          name\n        }\n      }\n      ... on Group {\n        id\n        kind\n        users {\n          id\n          username\n        }\n        profile {\n          name,\n          image\n        }\n      }\n    }\n  }\n`\n\nexport const MY_CONVERSATIONS_PARTICIPANTS_LIST = gql`\n  query myConversationsParticipantsList {\n      me {\n        username\n        conversations {\n          id,\n          participants {\n            object {\n            ...on User {\n              id,\n              kind,\n              username\n            }\n            ...on Group {\n              id,\n              kind,\n              profile {\n                name\n              }\n            }\n          }\n        }  \n      }\n    }\n  }\n`\n\nexport const CONVERSATION_PARTICIPANTS_BY_SESSION_ID = gql`\n  query conversationParticipantsById ($id: ID!) {\n    findUserOrGroup(id: $id) {\n      ...on User {\n        username\n        conversations {\n          id\n          participants {\n            object {\n              ...on User {\n                id\n                kind\n                profile {\n                  name\n                }\n              }\n              ...on Group {\n                id\n                kind\n                profile {\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n      ...on Group {\n        profile {\n          name\n        }\n        conversations {\n          id\n          participants {\n            kind\n            object {\n              ...on User {\n                id\n                kind\n                username\n                profile {\n                  name\n                }\n              }\n              ...on Group {\n                id\n                kind\n                profile {\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const JOBQUERIES_SENT_BY_SESSION_ID = gql`\n  query jobqueriesBySessionId($id: ID!) {\n    findUserOrGroup(id: $id) {\n        ... on User {\n        jobQueries {\n          id\n          content\n          visible\n        }\n      }\n      ... on Group {\n        jobQueries {\n          id\n          content\n          visible\n        }\n      }\n    }\n  }\n`\n\nexport const FIND_CONVERSATION = gql`\n  query findConversation($id: ID!) {\n    findConversation(id: $id) {\n      id\n      participants {\n        object {\n          ... on User {\n            id\n            username\n          }\n        ... on Group {\n            id,\n            profile {\n              name\n            }\n          }\n        }\n      }\n      messages {\n        id\n        body\n        time\n        sender {\n          object {\n            ...on User {\n              id \n              username\n              profile {\n                image\n              }\n            }\n            ...on Group {\n              id\n              profile {\n                name\n                image  \n              }\n            }\n          }\n        }\n      } \n    }\n  }\n`\n\nexport const FIND_JOBQUERY = gql`\n  query findJobquery($id: ID!) {\n    findJobquery(id: $id) {\n      id,\n      content,\n      postedOn,\n      startSchedule,\n      endSchedule,\n      location,\n      salary,\n      postedBy {\n        kind \n        object {\n          ...on User {\n            username\n            profile {\n              image\n            }\n          }\n          ...on Group {\n            profile {\n              name\n              image\n            }\n          }\n        }\n      }\n      wantedCategories {\n        object {\n          ...on SkillCategory {\n            name\n          }\n          ... on GroupCategory {\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const ALL_JOBQUERIES = gql`\n  query allJobqueries {\n    allJobqueries {\n      id,\n      content,\n      postedOn,\n      startSchedule,\n      endSchedule,\n      location,\n      salary,\n      postedBy {\n        kind \n        object {\n          ...on User {\n            profile {\n              firstName\n              name\n              image\n            }\n          }\n          ...on Group {\n            profile {\n              name\n              image\n            }\n          }\n        }\n      }\n      wantedCategories {\n        object {\n          ...on SkillCategory {\n            name\n            profession\n          }\n          ... on GroupCategory {\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const ALL_USERS = gql`\n  query allUsers {\n    allUsers {\n      id\n      username \n      profile {\n        image\n      }\n    }\n  }\n`\n\nexport const ALL_USER_PROFILES = gql`\n  query allUserProfiles {\n    allUserProfiles {\n      id\n      user {\n        id\n        username\n        }\n      about\n      skills {\n        id\n        name\n      }\n      image\n    }\n  }\n`\n\nexport const ALL_SKILL_CATEGORIES = gql`\n  query allSkillCategories {\n    allSkillCategories {\n      id\n      name\n      parent {\n        name\n      }\n      children {\n        name\n      }\n    }\n  }\n`\n\nexport const ALL_GROUP_SKILL_CATEGORIES = gql`\n  query allGroupSkillCategories {\n    allGroupSkillCategories {\n      id\n      name\n      parent {\n        name\n      }\n      children {\n        name\n      }\n    }\n  }\n`\n\nexport const ALL_USERS_AND_GROUPS = gql`\n  query allUsersAndGroups {\n    allUsersAndGroups {\n      ...on User {\n        id\n        kind\n        username\n        profile {\n          name\n          about\n          image\n          skills {\n            id\n            name\n            profession\n            parent {\n              name\n            }\n          }\n        }\n      }\n      ...on Group {\n        id\n        kind\n        profile {\n          name\n          image\n          about\n          groupTypes {\n            id\n            name\n            parent {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","import { createContext } from \"react\"\n\nexport type UserContextType = {\n  token: string | null,\n  setToken: (c: string) => void,\n  sessionId: string | null,\n  setSessionId: (c: string) => void\n}\n\nexport const UserContext = createContext<UserContextType>({ \n  token: null, \n  setToken: () => {},\n  sessionId: null, \n  setSessionId: () => {} \n})\n","import React, { useContext, useEffect, useState } from 'react'\nimport { useApolloClient, useLazyQuery, useSubscription } from '@apollo/client'\nimport { useHistory } from 'react-router-dom'\n\nimport './Dropdown.css'\nimport { NOTIFICATION_ADDED } from '../../../graphql/subscriptions'\nimport { GET_NOTIFICATIONS } from '../../../graphql/queries'\nimport { UserContext } from '../../UtilityComponents/UserContext'\n\ninterface INotification {\n  id: string,\n  content: string,\n  link: string,\n  date: string\n}\n\nconst NotificationsDropdown = ({ show, setShow }: any) => {\n  const history = useHistory()\n  const client = useApolloClient()\n  const userContext = useContext(UserContext)\n  const [notifications, setNotifications] = useState<INotification[]>([])\n  const [getNotifications, { data }] = useLazyQuery(GET_NOTIFICATIONS)\n\n  useEffect(() => {\n    getNotifications({\n      variables: { id: userContext.sessionId },\n    })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [userContext.sessionId])\n\n  useEffect(() => {\n    if (data) {\n      const sorted = [...data.findUserOrGroup.notifications].sort((n1: any, n2: any) => {\n        const n1date = new Date(n1.date).getTime()\n        const n2date = new Date(n2.date).getTime()\n        return n2date - n1date\n      })\n      setNotifications(sorted)\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }\n  }, [data])\n\n  useSubscription(NOTIFICATION_ADDED, {\n    onSubscriptionData: async ({ subscriptionData }) => {\n      // below works, but not optimal\n      client.reFetchObservableQueries()\n    },\n  })\n\n  const handleNotificationPress = (notification) => {\n    setShow(false)\n    history.push(notification.link)\n  }\n\n  return (\n    <div className={show ? \"dropdown active\" : \"dropdown\"}>\n      <h3 className=\"notifications-title\">Notifications</h3>\n      {notifications.length !== 0\n        ?\n        notifications.map(n => {\n          return (\n            <div key={n.id}>\n              <ul>\n                <li className=\"notification-container\" onClick={() => handleNotificationPress(n)}>{n.content}</li>\n              </ul>\n            </div>\n          )\n        })\n        :\n        <div>No notifications</div>\n      }\n    </div>\n  )\n}\n\nexport default NotificationsDropdown;","export const SIGN_IN_TOKEN = 'kulttuurisome-user-token'\nexport const SESSION_TOKEN = 'kulttuurisome-session-token'","\ninterface Category {\n  id: string,\n  name: string\n  profession: string\n}\n\nexport const categoriesWithParentsRemoved = (categories): Category[] => {\n  let filtered = [...categories]\n  for (let category of categories) {\n    const parentObj = filtered.find(c => c.name === category.parent?.name)\n    if (parentObj) {\n      filtered = filtered.filter(c => c.name !== parentObj.name)\n    }\n  }\n  return filtered\n}\n\nexport const dateAsDDMMYYYY = (dateInput) => {\n  const date = dateInput.substring(0, 10)\n  const year = date.substring(0,4)\n  const month = date.substring(5, 7)\n  const day = date.substring(8, 10)\n  return `${day}.${month}.${year}`\n}","import React, { useContext } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { categoriesWithParentsRemoved } from '../../utils/utilityFunctions'\nimport { UserContext } from './UserContext'\nimport './UtilityComponents.css'\n\n\nexport const Loading = () => {\n  return <div className=\"loader\">\n  </div>\n}\n\nexport const Toggle = ({ state, toggleClick }: any) => {\n  return (\n    <div\n      className={state ? \"toggle-container toggle-on\" : \"toggle-container toggle-off\"}\n      onClick={toggleClick}>\n      <div\n        className={state ? \"toggle-circle toggle-on-circle\" : \"toggle-circle toggle-off-circle\"}>\n      </div>\n    </div>\n  )\n}\n\nexport const Button = ({ text, handleClick }) => {\n  return (\n    <div\n      className=\"button-container\"\n      onClick={handleClick}>\n      {text}\n    </div>\n  )\n}\n\nexport const Searchbar = ({input, setInput}: any) => {\n\n  return (\n    <div className=\"searchbar-container\">\n      <div className={input === '' ? \"searchbar-outline empty\": \"searchbar-outline\"}>\n        <input className=\"searchbar-input\" value={input} onChange={e => setInput(e.target.value)}></input>\n        <div className=\"searchbar-icon-container\">\n          <div className=\"searchbar-icon\">⚲</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport const SmallProfileImage = ({ image }) => {\n  return (\n    <img src={image} alt=\"profileimg\" className=\"small-profile-image\"></img>\n  )\n}\n\nexport const LargeProfileImage = ({ image }) => {\n  return (\n    <img src={image} alt=\"profileimg\" className=\"large-profile-image\"></img>\n  )\n}\n\nexport const SmallProfileCard = ({ id, image, name }) => {\n  return (\n    <div className=\"small-profile-card-container\">\n      <div className=\"upper-container\">\n        <div className=\"profile-image-container\">\n          <SmallProfileImage image={image} />\n        </div>\n      </div>\n      <div className=\"lower-container\">\n        <div className=\"name-container\">\n          <h3 className=\"small-profile-name\">{name}</h3>\n        </div>\n      </div>\n    </div>\n\n  )\n}\n\nexport const LargeProfileCard = ({ id, image, name, skills, url, contactFunction }) => {\n  const history = useHistory()\n  const userContext = useContext(UserContext)\n  return (\n    <div className=\"large-profile-card-container\">\n      <div className=\"upper-container\">\n        <div className=\"profile-image-container\">\n          <LargeProfileImage image={image} />\n        </div>\n      </div>\n      <div className=\"lower-container\">\n        <div className=\"name-container\">\n          <h3 className=\"profile-name\">{name}</h3>\n          {/* {skills?.map(skill => <p key={skill.id}>{skill.profession || skill.name}</p>)} */}\n          {categoriesWithParentsRemoved(skills).map(skill => <p key={skill.id}>{skill.profession || skill.name}</p>)}\n        </div>\n        <div className=\"profiles-buttons-container\">\n          <Button text='Profile' handleClick={() => history.push(url)} />\n          {id !== userContext.sessionId\n            ? <Button text='Contact' handleClick={contactFunction} />\n            : null\n          }\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport const CategorySelection = ({ allCategories, selectedCategories, setSelectedCategories, currentPath, setCurrentPath }) => {\n  \n  const skillsIncludeCategory = (selectedObj) => {\n    const objId = selectedObj.id\n    let found = false\n    selectedCategories.forEach(skill => (objId === skill.id) && (found = true))\n    return found\n  }\n\n  const categoriesToRemove = (obj, children, removableArray) => {\n    for (let child of children) {\n      const childObj = allCategories.find(obj => obj.name === child.name)\n      if (childObj && selectedCategories.map(s => s.id).includes(childObj?.id)) {\n        removableArray = categoriesToRemove(childObj, childObj.children, removableArray)\n      }\n    }\n    return removableArray.concat(obj)\n  }\n\n  const handlePathClick = (clickedName) => {\n    const obj = allCategories.find(obj => obj.name === clickedName)\n    if (obj) {\n      if (!skillsIncludeCategory(obj)) {\n        obj.children.length && setCurrentPath(currentPath.concat(clickedName))\n        setSelectedCategories(selectedCategories.concat(obj))\n      } else if (skillsIncludeCategory(obj)) {\n        const removableArray = categoriesToRemove(obj, obj.children, [])\n        const filteredSkills = selectedCategories.filter((category) => {\n          return !removableArray.map(c => c.id).includes(category.id)\n        })\n        setSelectedCategories(filteredSkills)\n      }\n    }\n  }\n\n  const handlePathChangeToPrevious = () => {\n    if (currentPath.length > 1) {\n      setCurrentPath(currentPath.splice(0, currentPath.length - 1))\n    }\n  }\n  \n  return (\n    <div className=\"skills-container\">\n      <h3>{currentPath.map(name => <span key={currentPath.indexOf(name)}>{name} → </span>)}</h3>\n      {allCategories.map(obj => {\n        return (\n          currentPath[currentPath.length - 1] === obj.parent?.name &&\n          <div\n            className={skillsIncludeCategory(obj) ? \"skill-container skill-container-selected\" : \"skill-container\"}\n            key={obj.id}\n            onClick={() => handlePathClick(obj.name)}>\n            {obj.name} {obj.children.length ? '→' : '☑'}</div>\n        )\n      })}\n      <Button handleClick={() => handlePathChangeToPrevious()} text={`←`} />\n    </div>\n  )\n}\n\nexport const TitleAndLogo = () => {\n  return (\n    <h3 className=\"title-and-logo\" onClick={() => window.location.assign('/')}>HalfEatenBiscuit <i className=\"fas fa-cookie-bite\"></i></h3>\n  )\n}\n","import React, { useContext, useEffect } from 'react'\nimport { useApolloClient, useQuery, useLazyQuery } from \"@apollo/client\";\nimport { useHistory } from 'react-router';\n\nimport { FIND_USER_OR_GROUP, ME } from '../../../graphql/queries';\nimport { SESSION_TOKEN } from '../../../utils/constants';\nimport './Dropdown.css'\nimport { UserContext } from '../../UtilityComponents/UserContext';\nimport { LargeProfileImage, Loading } from '../../UtilityComponents/UtilityComponents';\n\nconst ProfileDropdown = ({ show, setShow }: any) => {\n  const client = useApolloClient()\n\n  const me = useQuery(ME)\n  const userContext = useContext(UserContext)\n\n  const [findUserOrGroup, { loading, data }] = useLazyQuery(FIND_USER_OR_GROUP)\n  useEffect(() => {\n    userContext.sessionId && findUserOrGroup({ variables: { id: userContext.sessionId } })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const history = useHistory()\n\n  if (loading || me.loading) {\n    return <div className={show ? \"dropdown active\" : \"dropdown\"}>\n      <Loading />\n    </div>\n  }\n\n  const handleLogout = async () => {\n    await client.resetStore()\n    localStorage.clear()\n    sessionStorage.clear()\n    window.location.assign('/')\n  }\n\n  const handleProfileClick = () => {\n    history.push(`/profiles/${data.findUserOrGroup.id}`)\n    setShow(false)\n  }\n\n  const handleSettingsClick = () => {\n    history.push('/settings')\n    setShow(false)\n  }\n\n  const handleMeClick = () => {\n    sessionStorage.setItem(SESSION_TOKEN, me.data.me.id)\n    userContext.setSessionId(me.data.me.id)\n    findUserOrGroup({ variables: { id: me.data.me.id } })\n  }\n\n  const handleProfileChange = (groupId) => {\n    sessionStorage.setItem(SESSION_TOKEN, groupId)\n    userContext.setSessionId(groupId)\n    findUserOrGroup({ variables: { id: groupId } })\n  }\n\n  const handleNewGroupClick = () => {\n    history.push('/creategroup')\n    setShow(false)\n  }\n\n  return (\n    <div className={show ? \"dropdown active\" : \"dropdown\"}>\n      <div className=\"dropdown-profile\" onClick={handleProfileClick}>\n        <div>\n          <LargeProfileImage image={data.findUserOrGroup.profile.image} />\n        </div>\n        <h3 className=\"profile-name\">{data.findUserOrGroup.profile.name}</h3>\n        <p className=\"secondary-text\">Show profile</p>\n      </div>\n      {me.data.me.groups.length > 0 &&\n        <div className=\"profile-switch-options\">\n          <b>Switch profile</b>\n          {me.data.me.id !== userContext.sessionId &&\n            <div className=\"dropdown-link\" onClick={handleMeClick}>{me.data.me.username}</div>\n          }\n          {me.data.me.groups.map(group =>\n            group.id !== userContext.sessionId &&\n            <div\n              className=\"dropdown-link\"\n              onClick={() => handleProfileChange(group.id)}\n              key={group.id}>\n              {group.profile.name}\n            </div>\n          )}\n        </div>\n      }\n      <div className=\"dropdown-link\" onClick={handleNewGroupClick}>New group +</div>\n      <div className=\"dropdown-link\" onClick={handleSettingsClick}>Settings</div>\n      <div className=\"dropdown-link\" onClick={handleLogout}>Log out</div>\n    </div>\n  )\n}\n\nexport default ProfileDropdown","import React, { useContext, useState } from 'react';\nimport { NavLink } from \"react-router-dom\";\nimport './Navbar.css'\nimport NotificationsDropdown from './Dropdowns/NotificationsDropdown'\nimport ProfileOptionsDropdown from './Dropdowns/ProfileDropdown'\nimport { UserContext } from '../UtilityComponents/UserContext';\nimport { useQuery } from '@apollo/client';\nimport { FIND_USER_OR_GROUP } from '../../graphql/queries';\n\nconst Navbar = () => {\n  const userContext = useContext(UserContext)\n  const currentUserNameResult = useQuery(FIND_USER_OR_GROUP, {variables: {id: userContext.sessionId}})\n\n  const [showMenu, setShowMenu] = useState(false);\n  const [showNotification, setShowNotifications] = useState(false)\n  const [showProfileOptionsDropdown, setShowProfileOptionsDropdown] = useState(false)\n\n  const handleClick = () => {\n    setShowMenu(!showMenu);\n    setShowNotifications(false)\n    setShowProfileOptionsDropdown(false)\n  }\n\n  const handleNotificationDrop = () => {\n    setShowProfileOptionsDropdown(false)\n    setShowNotifications(!showNotification)\n    setShowMenu(false)\n  };\n\n  const handleProfileDrop = () => {\n    setShowNotifications(false)\n    setShowProfileOptionsDropdown(!showProfileOptionsDropdown)\n    setShowMenu(false)\n  };\n\n  const handleMessagesView = () => {\n    setShowMenu(false)\n    setShowNotifications(false)\n    setShowProfileOptionsDropdown(false)\n  };\n\n  return (\n    <>\n      <nav className=\"navbar\">\n        <div className=\"nav-container\">\n\n          <div className=\"nav-icon nav-menu\" onClick={handleClick}>\n            <i className={showMenu ? \"fas fa-arrow-left\" : \"fas fa-bars\"}></i>\n          </div>\n\n          <NavLink to=\"/\" className=\"nav-logo nav-menu\" onClick={() => window.location.assign('/')}>\n            HalfEatenBiscuit <i className=\"fas fa-cookie-bite\"></i>\n          </NavLink>\n\n          <ul className={showMenu ? \"nav-menu hidden-links active\" : \"nav-menu hidden-links\"} >\n            <li className=\"nav-item\">\n              <NavLink exact to=\"/\" activeClassName=\"active\" className=\"nav-links\" onClick={handleClick}>\n                Home\n              </NavLink>\n            </li>\n            <li className=\"nav-item\">\n              <NavLink exact to=\"/jobmarket/queries\" activeClassName=\"active\" className=\"nav-links\" onClick={handleClick}>\n                Jobmarket\n              </NavLink>\n            </li>\n            <li className=\"nav-item\">\n              <NavLink exact to=\"/profiles\" activeClassName=\"active\" className=\"nav-links\" onClick={handleClick}>\n                Profiles\n              </NavLink>\n            </li>\n          </ul>\n\n          <ul className=\"nav-menu constant-links\">\n            <li className=\"nav-item\">\n              <NavLink exact to=\"/messages\" activeClassName=\"active\" className=\"nav-links\" onClick={handleMessagesView}>\n                {/* Messages */}\n                <i className=\"fa fa-comment\"></i>\n              </NavLink>\n            </li>\n\n            {/* Dropdowns */}\n            <li className=\"nav-item dropdown-container\">\n              <div\n                onClick={handleNotificationDrop}\n                tabIndex={0}\n                className=\"nav-links\">\n                {/* Notifications ▼ */}\n                <i className=\"fa fa-bell\"> ▿</i>\n              </div>\n              <NotificationsDropdown\n                show={showNotification}\n                setShow={setShowNotifications} />\n            </li>\n\n            <li className=\"nav-item dropdown-container\">\n              <div\n                onClick={handleProfileDrop}\n                tabIndex={0}\n                className=\"nav-links\">\n                <i className=\"fa fa-user\"> ▿ </i>\n                <span className=\"nav-current-session-name\"> {currentUserNameResult.data && (currentUserNameResult.data.findUserOrGroup.profile.firstName || currentUserNameResult.data.findUserOrGroup.profile.name)}</span>\n              </div>\n              <ProfileOptionsDropdown\n                show={showProfileOptionsDropdown}\n                setShow={setShowProfileOptionsDropdown}\n              />\n            </li>\n          </ul>\n        </div>\n\n      </nav>\n    </>\n  );\n}\n\nexport default Navbar;\n","import React, { useContext, useState } from 'react'\nimport { useQuery } from '@apollo/client';\nimport { NavLink } from \"react-router-dom\";\nimport { CONVERSATION_PARTICIPANTS_BY_SESSION_ID } from '../../../../graphql/queries';\n\nimport './MessageNavigation.css'\nimport { Loading, Searchbar } from '../../../UtilityComponents/UtilityComponents';\nimport { UserContext } from '../../../UtilityComponents/UserContext';\n\nconst MessageNavigation = ({ setShowContacts }: any) => {\n  const [searchInput, setSearchInput] = useState('')\n  const userContext = useContext(UserContext)\n  const participants = useQuery(CONVERSATION_PARTICIPANTS_BY_SESSION_ID, {\n    variables: {\n      id: userContext.sessionId\n    }\n  })\n\n  if (participants.loading) {\n    return <Loading />\n  }\n\n  return (\n    <nav className=\"msg-navigation\">\n      <div className=\"msg-nav-container\">\n        <div className=\"messages-filter-container\">\n          <Searchbar input={searchInput} setInput={setSearchInput} />\n        </div>\n        <ul className=\"msg-nav-menu\">\n          {participants.data?.findUserOrGroup.conversations.map(conversation => {\n            const names = conversation.participants.map(participant => participant.object.profile.name).join(', ')\n            const linkTo = `/messages/${conversation.id}`\n            if (names.toLowerCase().includes(searchInput.toLowerCase())) {\n              return (\n                <li className=\"msg-nav-item\" key={conversation.id}>\n                  <NavLink exact to={linkTo} activeClassName=\"msg-active\" className=\"msg-nav-links\" onClick={() => setShowContacts(false)}>\n                    {names}\n                  </NavLink>\n                </li>\n              )\n            } return null\n          })}\n        </ul>\n      </div>\n    </nav>\n  )\n}\n\nexport default MessageNavigation;","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($username: String!, $password: String!) {\n    login(username: $username, password: $password)  {\n      value, \n      id\n    }\n  }\n`\n\nexport const SIGNUP = gql`\n  mutation createUser($username: String!, $password: String!, $firstName: String!, $lastName: String!) {\n    createUser(username: $username, password: $password, firstName: $firstName, lastName: $lastName) {\n      username\n    }\n}\n`\nexport const CREATE_JOBQUERY = gql`\n  mutation createJobquery ($content: String!, $startSchedule: Date!, $endSchedule: Date, $wantedCategories: [ID!]!, $postedBy: ID!, $location: String!, $salary: String!) {\n    createJobquery(content: $content, startSchedule: $startSchedule, endSchedule: $endSchedule, wantedCategories: $wantedCategories, postedBy: $postedBy, location: $location, salary: $salary) {\n      id\n      content\n    }\n  }\n`\n\nexport const NEW_CONVERSATION = gql`\n  mutation newConversation($senderId: ID!, $receiverId: ID!) {\n    createConversation(senderId: $senderId, receiverId: $receiverId) {\n      id\n    }\n  }\n`\n\nexport const SEND_MESSAGE = gql`\n  mutation sendMessage($senderId: ID!, $conversationId: ID!, $body: String!){\n    sendMessage(senderId: $senderId, conversationId: $conversationId, body: $body) {\n      id, body\n    }\n  }\n`\n\nexport const CREATE_GROUP = gql`\n  mutation createGroup($name: String!, $users: [ID!]!, $about: String!, $image: String!, $skills: [ID]!){\n    createGroup(name: $name, users: $users, about: $about, image: $image, skills: $skills) {\n      id\n      kind\n    }\n  }\n`\n\nexport const CREATE_USER_PROFILE = gql`\n  mutation createUserProfile($skills: [ID]!, $about: String!, $image: String){\n    createUserProfile(skills: $skills, about: $about, image: $image) {\n      id\n      about\n    }\n  }\n`","import React, { useContext, useState, useEffect } from 'react'\nimport { useParams } from 'react-router-dom';\nimport { useQuery, useMutation, useApolloClient, useSubscription } from '@apollo/client';\n\nimport './Conversation.css'\nimport { FIND_CONVERSATION } from '../../../../graphql/queries';\nimport { SEND_MESSAGE } from '../../../../graphql/mutations';\nimport { MESSAGE_ADDED } from '../../../../graphql/subscriptions';\nimport { UserContext } from '../../../UtilityComponents/UserContext';\nimport { Loading } from '../../../UtilityComponents/UtilityComponents';\n\nconst Conversation = ({ setShowContacts }: any) => {\n  const userContext = useContext(UserContext)\n  const { id }: any = useParams();\n  const client = useApolloClient()\n  const [numberOfMessages, setNumberOfMessages] = useState(0)\n\n  const conversationResult = useQuery(FIND_CONVERSATION, {\n    variables: { id },\n    onCompleted: (data) => {\n      setNumberOfMessages(data.findConversation.messages.length)\n      //scrollToBottom()\n    }\n  })\n\n  useEffect(() => {\n    // console.log(\"NUMBER\", numberOfMessages)\n    scrollToBottom()\n  }, [numberOfMessages])\n\n  const scrollToBottom = () => {\n    const element = document.getElementById('conversation-content')\n    element?.scrollTo({\n      top: element.scrollHeight,\n      behavior: 'smooth'\n    })\n  }\n\n  const updateCacheWith = async (addedMessage) => {\n    const includedIn = (set, object) => {\n      const isIncluded = set.map(message => message.id).includes(object.id)\n      return isIncluded\n    }\n\n    const dataInStore = await client.readQuery({\n      query: FIND_CONVERSATION,\n      variables: { id }\n    })\n    //console.log(\"DATA IN STORE\", dataInStore)\n    if (dataInStore === null) {\n      console.log(\"NO DATA IN STORE\")\n      // BUG! Continue from here. After refreshing the page, dataInStore returns null even if the data is in the cache.\n      //Note, check useQuery documentation. There are some cache options\n      // Now the bug seems to have disappeared 2.8.2021\n    }\n    else if (!includedIn(dataInStore.findConversation.messages, addedMessage)) {\n      console.log(\"LENGTH NOW\", dataInStore.findConversation.messages.length)\n      client.writeQuery({\n        query: FIND_CONVERSATION,\n        variables: { id },\n        data: { findConversation: dataInStore.findConversation.messages.concat(addedMessage) }\n      })\n      setNumberOfMessages(numberOfMessages + 1)\n    }\n  }\n\n  useSubscription(MESSAGE_ADDED, {\n    onSubscriptionData: async ({ subscriptionData }) => {\n      console.log(\"SUBSCRIPTION DATA\", subscriptionData)\n      const addedMessage = subscriptionData.data\n      await updateCacheWith(addedMessage)\n    },\n  })\n\n  const [sendMessage] = useMutation(SEND_MESSAGE, {\n    onError: (error) => {\n      console.log(\"ERROR ON SENDING MESSAGE\", error)\n    }\n    // update: (store, response) => {\n    //   updateCacheWith(response.data.sendMessage)\n    // }\n  })\n\n  const [messageInput, setMessageInput] = useState('')\n\n  if (conversationResult.loading) {\n    return <Loading />\n  }\n\n  if (!conversationResult.data) {\n    return <h1>Conversation not found</h1>\n  }\n\n  const participants = conversationResult.data.findConversation.participants\n  const messages = conversationResult.data.findConversation.messages\n  const conversationId = conversationResult.data.findConversation.id\n\n  const handleSendMessage = async (event) => {\n    event.preventDefault()\n    await sendMessage({\n      variables: {\n        conversationId: conversationId,\n        senderId: userContext.sessionId,\n        body: messageInput\n      }\n    })\n    setMessageInput('')\n  }\n\n\n  if (!participants.map(p => p.object.id).includes(userContext.sessionId)) {\n    return null\n  }\n\n  return (\n    <div className=\"conversation-container\">\n      <div className=\"conversation-info\">\n        <div className=\"conversation-usernames\">\n          {participants.map(p => {\n            return p.object.id === userContext.sessionId\n              ? <b key={p.object.id}>Me • </b>\n              : <b key={p.object.id}>{p.object.username || p.object.profile.name} • </b>\n          }\n          )}\n        </div>\n        <div onClick={() => setShowContacts(true)} className=\"show-contacts-toggle\"><i className={\"fas fa-arrow-down\"}></i></div>\n      </div>\n      <div id='conversation-content' className=\"conversation-content\">\n        {messages.map(message => {\n          return (\n            <div\n              className={message.sender.object.id === userContext.sessionId ? \"message-container user-sent\" : \"message-container\"}\n              key={message.id}>\n              <img src={message.sender.object.profile.image} alt=\"profileimg\" className=\"message-profile-image\"></img>\n              {message.body}\n            </div>\n          )\n        })}\n      </div>\n      <div className=\"conversation-input-container\">\n        <form className=\"conversation-input-form\">\n          <input className=\"conversation-text-input\" type=\"text\" onChange={e => setMessageInput(e.target.value)} value={messageInput}></input>\n          <button className=\"conversation-send-button\" onClick={handleSendMessage}>➤</button>\n        </form>\n      </div>\n    </div >\n  )\n}\n\nexport default Conversation\n\n","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport MessageNavigation from './Navigation/MessageNavigation'\nimport Conversation from './Conversation/Conversation';\nimport './Messages.css'\n\n\nconst Messages = () => {\n  const [showContacts, setShowContacts] = useState(true)\n\n  return (\n    <div className=\"messages-container\">\n      <Router>\n        <div className={showContacts ? \"msg-contacts-container active\": \"msg-contacts-container\"}>\n          <MessageNavigation setShowContacts={setShowContacts} />\n        </div>\n        <div className=\"msg-conversation-container\">\n          <Switch>\n            <Route path=\"/messages/:id\" component={() => <Conversation setShowContacts={setShowContacts} />} />\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  )\n}\n\n\nexport default Messages","import { dateAsDDMMYYYY } from \"../../../../utils/utilityFunctions\"\nimport { LargeProfileImage } from \"../../../UtilityComponents/UtilityComponents\"\n\nconst JobDetails = ({ job }) => {\n  if (job) {\n    return (\n      <div>\n        <LargeProfileImage image={job.postedBy.object.profile.image} />\n        <div className=\"general-info-container\">\n          <div className=\"image-and-name-container\">\n\n            <p><b>{job.postedBy.object.username || job.postedBy.object.profile.name}</b> is looking for <br />\n              {job.wantedCategories.map(category => category.object.name)}\n            </p>\n\n          </div>\n          {/* <p>{job.content}</p> */}\n          <div className=\"details-container\">\n            <div className=\"details-item\">\n              <p>Salary</p>\n              <p className=\"details-value\">{job.salary}</p>\n            </div>\n            <div className=\"details-item\">\n              <p>Location</p>\n              <p className=\"details-value\">{job.location}</p>\n            </div>\n            <div className=\"details-item\">\n              <p>Schedule</p>\n              <p className=\"details-value\">{dateAsDDMMYYYY(job.startSchedule)} - {dateAsDDMMYYYY(job.endSchedule)}</p>\n            </div>\n          </div>\n        </div>\n        {job.content}\n      </div>\n    )\n  } else {\n    return null\n  }\n}\n\nexport default JobDetails","import React, { useState } from 'react';\nimport { useQuery } from '@apollo/client';\n\nimport '../Jobmarket.css'\nimport { ALL_JOBQUERIES } from '../../../../graphql/queries';\nimport { Button, Loading } from '../../../UtilityComponents/UtilityComponents';\nimport { dateAsDDMMYYYY } from '../../../../utils/utilityFunctions';\nimport JobDetails from './JobDetails';\n\ninterface Jobquery {\n  postedOn: Date\n}\n\nconst Jobqueries = () => {\n  const result = useQuery(ALL_JOBQUERIES, {\n    onCompleted: (data) => {\n      setOrderedQueries([...data.allJobqueries].sort((q1, q2) => new Date(q2.postedOn).getTime() - new Date(q1.postedOn).getTime()))\n    }\n  })\n  const orderOptions = ['Most recent post', 'Earliest post', 'Later starting date', 'Earlier starting date']\n  const [orderedQueries, setOrderedQueries] = useState<Jobquery[]>([])\n\n  const [selectedJob, setSelectedJob] = useState<Jobquery>()\n  const [showJobInfo, setShowJobInfo] = useState(false)\n\n  if (result.loading) {\n    return <Loading />\n  }\n  const handleMoreInfoClick = (q) => {\n    //history.push(`/jobmarket/queries/${q.id}`)\n    setSelectedJob(q)\n    setShowJobInfo(true)\n  }\n\n  const jobqueries = result.data.allJobqueries\n\n  const handleSelectedOrderChange = (value) => {\n    if (value === orderOptions[0]) {\n      setOrderedQueries([...jobqueries].sort((q1, q2) => new Date(q2.postedOn).getTime() - new Date(q1.postedOn).getTime()))\n    }\n    else if (value === orderOptions[1]) {\n      setOrderedQueries([...jobqueries].sort((q1, q2) => new Date(q1.postedOn).getTime() - new Date(q2.postedOn).getTime()))\n    }\n    else if (value === orderOptions[2]) {\n      setOrderedQueries([...jobqueries].sort((q1, q2) => new Date(q2.startSchedule).getTime() - new Date(q1.startSchedule).getTime()))\n    }\n    else if (value === orderOptions[3]) {\n      setOrderedQueries([...jobqueries].sort((q1, q2) => new Date(q1.startSchedule).getTime() - new Date(q2.startSchedule).getTime()))\n    }\n  }\n\n  return (\n    <div>\n      <div className={showJobInfo ? \"job-details-container active\" : \"job-details-container\"}>\n        <div className=\"job-details-content\">\n          <button onClick={() => setShowJobInfo(false)}>Back</button>\n          <JobDetails job={selectedJob} />\n        </div>\n      </div>\n\n      <div className={showJobInfo ? \"jobqueries-container\" : \"jobqueries-container active\"}>\n        Filter by: skill, group, posted on date, schedule, location\n        <label>Order by </label>\n        <select onChange={(e) => handleSelectedOrderChange(e.target.value)}>\n          {orderOptions.map(option => <option key={option}>{option}</option>)}\n        </select>\n\n        <ul>\n          {orderedQueries.map((q: any) => {\n            const contactText = `Contact ${q.postedBy.object.profile.firstName || q.postedBy.object.profile.name}`\n            return (\n              <div className=\"card\" key={q.id}>\n                <div className=\"general-info-container\">\n                  <div className=\"image-and-name-container\">\n                    <div className=\"image-container\">\n                      <img src={q.postedBy.object.profile.image} alt=\"profileimg\" className=\"jobquery-user-profile-image\"></img>\n                    </div>\n                    <p><b>{q.postedBy.object.profile.name}</b> is looking for <br />\n                      {q.wantedCategories.map(category => category.object.profession || category.object.name)}\n                    </p>\n\n                  </div>\n                  <div className=\"details-container\">\n                    <div className=\"details-item\">\n                      <p>Salary</p>\n                      <p className=\"details-value\">{q.salary}</p>\n                    </div>\n                    <div className=\"details-item\">\n                      <p>Location</p>\n                      <p className=\"details-value\">{q.location}</p>\n                    </div>\n                    <div className=\"details-item\">\n                      <p>Schedule</p>\n                      <p className=\"details-value\">{dateAsDDMMYYYY(q.startSchedule)} - {dateAsDDMMYYYY(q.endSchedule)}</p>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"buttons-container\">\n                  <Button text={contactText} handleClick={() => console.log(\"CONTACT SOMEBODY\")} />\n                  <Button text=\"More info\" handleClick={() => handleMoreInfoClick(q)} />\n                </div>\n              </div>\n\n            )\n          })}\n        </ul>\n      </div>\n    </div>\n  )\n};\n\nexport default Jobqueries;\n","import React from 'react';\nimport { NavLink } from \"react-router-dom\";\nimport '../Jobmarket.css'\n\nconst JobmarketNavigation = () => {\n  return (\n    <nav className=\"job-navigation\">\n        <div className=\"job-nav-container\">\n          <ul className=\"job-nav-menu\">\n            <li className=\"job-nav-item\">\n              <NavLink exact to=\"/jobmarket/queries/\" activeClassName=\"job-active\" className=\"job-nav-links\"> \n                Queries\n              </NavLink>\n            </li>\n            <li className=\"job-nav-item\">\n              <NavLink exact to=\"/jobmarket/findplayers/\" activeClassName=\"job-active\" className=\"job-nav-links\"> \n                Find players\n              </NavLink>\n            </li>\n            <li className=\"job-nav-item\">\n              <NavLink exact to=\"/jobmarket/sendquery/\" activeClassName=\"job-active\" className=\"job-nav-links\"> \n                Send query\n              </NavLink>\n            </li>\n            <li className=\"job-nav-item\">\n              <NavLink exact to=\"/jobmarket/myqueries/\" activeClassName=\"job-active\" className=\"job-nav-links\"> \n                My queries\n              </NavLink>\n            </li>\n          </ul>\n        </div>\n      </nav>\n  )\n}\n\nexport default JobmarketNavigation;","const JobqueryInfoForm = ({\n  content,\n  setContent,\n  location,\n  setLocation,\n  salary,\n  setSalary,\n  startSchedule,\n  setStartSchedule,\n  endSchedule,\n  setEndSchedule,\n}) => {\n  return (\n    <div>\n      <h1>\n        Jobquery info form\n      </h1>\n      <div>\n        description <textarea\n          cols={50}\n          rows={5}\n          value={content}\n          onChange={({ target }) => setContent(target.value)}\n        />\n      </div>\n      <div>\n        location <input\n          value={location}\n          onChange={({ target }) => setLocation(target.value)}\n        />\n      </div>\n      <div>\n        salary <input\n          value={salary}\n          onChange={({ target }) => setSalary(target.value)}\n        />\n      </div>\n      <div>\n        startSchedule (or Day, Month, Year dropdowns?)<input\n          value={startSchedule}\n          onChange={({ target }) => setStartSchedule(target.value)}\n        />\n      </div>\n      <div>\n        endSchedule <input\n          value={endSchedule}\n          onChange={({ target }) => setEndSchedule(target.value)}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default JobqueryInfoForm","import { useState } from \"react\"\nimport { CategorySelection } from \"../../../../../UtilityComponents/UtilityComponents\"\n\ninterface Category {\n  id: string,\n  name: string\n}\n\nconst WantedCategoriesSelection = ({ skillCategories, groupCategories, wantedCategories, setWantedCategories }) => {\n  const [currentPath, setCurrentPath] = useState([undefined])\n  const [selectedCategories, setSelectedCategories] = useState<Category[]>([])\n\n  return (\n    <div>\n      <h2>Select your wantedCategories</h2>\n      <button onClick={() => setSelectedCategories(skillCategories)}>I'm looking for individual artists</button>\n      <button onClick={() => setSelectedCategories(groupCategories)}>I'm looking for a group</button>\n      <CategorySelection\n        selectedCategories={wantedCategories}\n        setSelectedCategories={setWantedCategories}\n        allCategories={selectedCategories}\n        currentPath={currentPath}\n        setCurrentPath={setCurrentPath}\n      />\n      {wantedCategories.map(s => <div key={s.id}>{s.name}</div>)}\n    </div>\n  )\n}\n\nexport default WantedCategoriesSelection","import { useMutation } from \"@apollo/client\"\nimport { useContext, useState } from \"react\"\nimport { CREATE_JOBQUERY } from \"../../../../../../graphql/mutations\"\nimport { categoriesWithParentsRemoved } from \"../../../../../../utils/utilityFunctions\"\nimport { UserContext } from \"../../../../../UtilityComponents/UserContext\"\nimport { Button, Loading } from \"../../../../../UtilityComponents/UtilityComponents\"\n\n\nconst Summary = ({ wantedCategories, content, location, salary, startSchedule, endSchedule, }) => {\n\n  const [submitCompleted, setSubmitCompleted] = useState(false)\n  const [redirectAdress, setRedirectAdress] = useState('')\n\n  const userContext = useContext(UserContext)\n\n  const [createQuery, { loading }] = useMutation(CREATE_JOBQUERY, {\n    onError: (error) => {\n      console.log(\"Error at create query mutation: \\n\", error)\n    }\n  })\n\n  const submit = async () => {\n    const postedBy = userContext.sessionId\n    const parentsRemoved = categoriesWithParentsRemoved(wantedCategories)\n    const categoryIds = parentsRemoved.map(c => c.id)\n\n    const response = await createQuery({\n      variables: {\n        content: content,\n        startSchedule: startSchedule,\n        endSchedule: endSchedule,\n        wantedCategories: categoryIds,\n        postedBy: postedBy,\n        salary: salary,\n        location: location\n      }\n    })\n    if (response.data?.createJobquery.content === content) {\n      setSubmitCompleted(true)\n      setRedirectAdress(`/jobmarket/queries/${response.data.createJobquery.id}`)\n    } else {\n      console.log(\"The name might be taken\")\n    }\n  }\n\n  if (loading) {\n    return <Loading />\n  }\n\n  return (\n    !submitCompleted\n      ?\n      <div>\n        <h1>Summary</h1>\n        {categoriesWithParentsRemoved(wantedCategories).map(category => <div key={category.id}>{category.name}</div>)}\n        <p>content: {content}</p>\n        <p>location: {location}</p>\n        <p>salary: {salary}</p>\n        <p>startSchedule: {startSchedule}</p>\n        <p>endSchedule: {endSchedule}</p>\n        <Button text=\"Submit\" handleClick={submit} />\n      </div>\n      :\n      <div>\n        <h1>Jobpost added</h1>\n        <p>See it <a href={redirectAdress}>here</a></p>\n      </div>\n  )\n}\n\nexport default Summary","import React, { useState } from 'react';\nimport { useQuery } from '@apollo/client'\n\nimport { ALL_GROUP_SKILL_CATEGORIES, ALL_SKILL_CATEGORIES } from '../../../../../graphql/queries';\nimport JobqueryInfoForm from './Views/JobqueryInfoForm';\nimport WantedCategoriesSelection from './Views/WantedCategoriesSelection'\nimport Summary from './Views/Summary'\nimport { Button, Loading } from '../../../../UtilityComponents/UtilityComponents';\n\ninterface Category {\n  id: string,\n  name: string\n}\n\nconst SendQueryForm = () => {\n\n  const [content, setContent] = useState('Details about everything, detailed schedule, locations and addresses, nature of the project...')\n  const [location, setLocation] = useState('')\n  const [salary, setSalary] = useState('')\n  const [startSchedule, setStartSchedule] = useState('YYYY-MM-DD')\n  const [endSchedule, setEndSchedule] = useState('YYYY-MM-DD')\n\n  const [wantedCategories, setWantedCategories] = useState<Category[]>([])\n  const [skillCategories, setSkillCategories] = useState<Category[]>([])\n  const [groupCategories, setGroupCategories] = useState<Category[]>([])\n\n  const skillCategoriesResult = useQuery(ALL_SKILL_CATEGORIES, {\n    onCompleted: () => setSkillCategories(skillCategoriesResult.data.allSkillCategories)\n  })\n  const groupCategoriesResult = useQuery(ALL_GROUP_SKILL_CATEGORIES, {\n    onCompleted: () => setGroupCategories(groupCategoriesResult.data.allGroupSkillCategories)\n  })\n\n  const views = [\n    <WantedCategoriesSelection\n      skillCategories={skillCategories}\n      groupCategories={groupCategories}\n      wantedCategories={wantedCategories}\n      setWantedCategories={setWantedCategories}\n    />,\n    <JobqueryInfoForm\n      content={content}\n      setContent={setContent}\n      location={location}\n      setLocation={setLocation}\n      salary={salary}\n      setSalary={setSalary}\n      startSchedule={startSchedule}\n      setStartSchedule={setStartSchedule}\n      endSchedule={endSchedule}\n      setEndSchedule={setEndSchedule}\n    />,\n    <Summary\n      wantedCategories={wantedCategories}\n      content={content}\n      location={location}\n      salary={salary}\n      startSchedule={startSchedule}\n      endSchedule={endSchedule}\n    />\n  ]\n\n  const [currentView, setCurrentView] = useState(0)\n\n  if (skillCategoriesResult.loading || groupCategoriesResult.loading) {\n    return <Loading />\n  }\n\n  const handlePrevPress = () => {\n    currentView <= (views.length - 1)\n      && currentView > 0\n      && setCurrentView(currentView - 1)\n  }\n\n  const handleNextPress = () => {\n    currentView < (views.length - 1)\n      && currentView >= 0\n      && setCurrentView(currentView + 1)\n  }\n\n\n  return (\n    <div>\n      <div>\n        {views[currentView]}\n      </div>\n      <div className=\"profile-edit-switch-view-buttons-container\">\n        <Button handleClick={handlePrevPress} text=\"Prev\" />\n        <Button handleClick={handleNextPress} text=\"Next\" />\n      </div>\n    </div>\n  )\n};\n\nexport default SendQueryForm;","import SendQueryForm from \"./SendQueryForm/SendQueryForm\"\n\nconst SendQuery = () => {\n  return (\n    <div>\n      <SendQueryForm />\n    </div>\n  )\n}\n\nexport default SendQuery","import React, { useContext } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { JOBQUERIES_SENT_BY_SESSION_ID } from '../../../../graphql/queries';\nimport { Toggle, Loading } from '../../../UtilityComponents/UtilityComponents';\nimport { UserContext } from '../../../UtilityComponents/UserContext';\n\nconst MyQueries = () => {\n  const userContext = useContext(UserContext)\n  const result = useQuery(JOBQUERIES_SENT_BY_SESSION_ID, { variables: { id: userContext.sessionId } })\n\n  const handleToggleClick = (id) => {\n    console.log(\"SET VISIBILITY OF\", id)\n  }\n\n  if (result.loading) {\n    return <Loading />\n  }\n  \n  return (\n    <div>\n      <h3>My queries</h3>\n      {result.data.findUserOrGroup.jobQueries.map((q: any) => {\n        return (\n          <div key={q.id} className=\"card\">\n            <div>\n              Visibility: <Toggle state={q.visible} toggleClick={() => handleToggleClick(q.id)} />\n            </div>\n            <p key={q.id}>{q.content}</p>\n          </div>\n        )\n      })}\n    </div>\n  )\n};\n\nexport default MyQueries;","import React, { useContext, useState } from 'react';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { useHistory } from 'react-router-dom';\n\nimport './Profiles.css'\nimport { MY_ID, ALL_USERS_AND_GROUPS } from '../../../graphql/queries';\nimport { NEW_CONVERSATION } from '../../../graphql/mutations';\nimport { LargeProfileCard, Loading, Searchbar } from '../../UtilityComponents/UtilityComponents';\nimport { UserContext } from '../../UtilityComponents/UserContext';\n\nconst Profiles = () => {\n  const userContext = useContext(UserContext)\n  const myIdResult = useQuery(MY_ID)\n  const [allUsersAndGroups, setAllUsersAndGroups] = useState([])\n  const allUsersAndGroupsResult = useQuery(ALL_USERS_AND_GROUPS, {\n    onCompleted: (data) => {\n      setAllUsersAndGroups(data.allUsersAndGroups)\n    }\n  })\n  const [newConversation] = useMutation(NEW_CONVERSATION)\n  const history = useHistory()\n  const [searchInput, setSearchInput] = useState<string>('')\n\n  if (myIdResult.loading || allUsersAndGroupsResult.loading) {\n    return <Loading />\n  }\n\n  const handleContactButtonPress = async (receiverId: any) => {\n    console.log(\"CONTACT BUTTON PRESSED FOR\", receiverId)\n    //check for users conversations where only user is the receiver\n    const result = await newConversation({\n      variables: {\n        senderId: userContext.sessionId,\n        receiverId: receiverId\n      }\n    })\n    const newConversationId = result.data.createConversation.id\n    history.push(`/messages/${newConversationId}`)\n  }\n\n  return (\n    <div className=\"profiles-page-container\">\n      <div className=\"profiles-title-and-searchbar-container\">\n        <h1>Profiles</h1>\n        <div className=\"profiles-searchbar-container\">\n          <Searchbar input={searchInput} setInput={setSearchInput} />\n        </div>\n      </div>\n\n      <div className=\"profiles-container\">\n        {allUsersAndGroups.map((item: any) => {\n          const name = item.profile.name\n          if (name.toLowerCase().includes(searchInput.toLowerCase())) {\n            const profileUrl = `/profiles/${item.id}`\n            return (\n              <div className=\"profile-container\" key={item.id}>\n                <LargeProfileCard\n                  id={item.id}\n                  image={item.profile.image}\n                  name={item.profile.name}\n                  skills={item.profile.skills || item.profile.groupTypes}\n                  url={profileUrl}\n                  contactFunction={() => handleContactButtonPress(item.id)}\n                />\n              </div>\n            )\n          }\n          return null\n        })}\n      </div>\n    </div>\n  )\n}\n\n\nexport default Profiles","import React from 'react'\nimport Profiles from '../../Profiles/Profiles'\n\nconst FindPlayers = () => {\n  return (\n    <div>\n      <h1>Find players (only available ones)</h1>\n      <ul><b>Filter: </b>\n        <li>Group or individuals,</li>\n        <li>By instrument, by group type</li>\n      </ul>\n    <Profiles />\n    </div>\n  )\n}\n\nexport default FindPlayers","import { useQuery } from \"@apollo/client\";\nimport { useParams } from \"react-router-dom\"\nimport { FIND_JOBQUERY } from \"../../../../graphql/queries\";\nimport { Loading } from \"../../../UtilityComponents/UtilityComponents\";\nimport JobDetails from \"./JobDetails\";\n\nconst JobInfo = () => {\n  const { id }: any = useParams();\n  const jobInfoResult = useQuery(FIND_JOBQUERY, {\n    variables: { id }\n  })\n\n  if (jobInfoResult.loading) {\n    return <Loading />\n  }\n\n  if (!jobInfoResult.data) {\n    return <h1>Not found. The post might not be visible, or the poster has removed this query.</h1>\n  }\n  const job = jobInfoResult.data.findJobquery\n\n  return (\n    <JobDetails job={job}/>\n\n  )\n}\n\nexport default JobInfo","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport './Jobmarket.css'\nimport Jobqueries from './Pages/Jobqueries';\nimport JobmarketNavigation from './JobmarketNavigation/JobmarketNavigation';\nimport SendQuery from './Pages/SendQuery';\nimport MyQueries from './Pages/MyQueries';\nimport FindPlayers from './Pages/FindPlayers';\nimport JobInfo from './Pages/JobInfo';\n\nconst Jobmarket = () => {\n  return (\n    <>\n      <Router>\n        <div className=\"job-page\">\n          <JobmarketNavigation />\n          <div className=\"job-pages\">\n            <Switch>\n              <Route path=\"/jobmarket/findplayers/\" component={FindPlayers} />\n              <Route path=\"/jobmarket/queries/:id\" component={JobInfo} />\n              <Route path=\"/jobmarket/queries/\" component={Jobqueries} />\n              <Route path=\"/jobmarket/sendquery/\" component={SendQuery} />\n              <Route path=\"/jobmarket/myqueries/\" component={MyQueries} />\n            </Switch>\n          </div>\n        </div>\n      </Router>\n    </>\n  )\n}\n\n\nexport default Jobmarket","import React, { useState, useEffect, useContext } from 'react'\nimport { useMutation } from '@apollo/client'\nimport { LOGIN } from '../../../graphql/mutations'\nimport { useHistory } from 'react-router-dom'\nimport { SESSION_TOKEN, SIGN_IN_TOKEN } from '../../../utils/constants'\nimport { UserContext } from '../../UtilityComponents/UserContext'\n\nimport './Registrations.css'\nimport { TitleAndLogo } from '../../UtilityComponents/UtilityComponents'\n\nconst SignIn = () => {\n  const userContext = useContext(UserContext)\n  const history = useHistory()\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n\n  const [login, result] = useMutation(LOGIN, {\n    onError: (error) => {\n      //setError(error.graphQLErrors[0].message)\n      console.log(\"Error at sign in mutation: \\n\", error.graphQLErrors[0].message)\n    }\n  })\n\n  useEffect(() => {\n    if (result.data) {\n      const id = result.data.login.id\n      const token = result.data.login.value\n      localStorage.setItem(SIGN_IN_TOKEN, token)\n      userContext.setToken(token)\n      sessionStorage.setItem(SESSION_TOKEN, id)\n      userContext.setSessionId(id)\n      history.push('/')\n    }\n  }, [result.data]) // eslint-disable-line\n\n  const submit = async (event: any) => {\n    event.preventDefault()\n\n    login({ variables: { username, password } })\n  }\n\n  return (\n    <div className=\"registration-container\">\n      <div className=\"registration-items-container signin\">\n        <div className=\"registration-title-and-logo-container\">\n          <TitleAndLogo />\n          <h2>Sign in</h2>\n        </div>\n        <form onSubmit={submit}>\n          <div className=\"registration-inputs-container\">\n            <div>\n              Email or username \n              <br />\n              <input\n                value={username}\n                onChange={({ target }) => setUsername(target.value)}\n              />\n            </div>\n            <br />\n            <div>\n              Password \n              <br />\n              <input\n                type='password'\n                value={password}\n                onChange={({ target }) => setPassword(target.value)}\n              />\n            </div>\n          </div>\n          <div className=\"registration-submit-button-container\">\n            <button className=\"blue-button\" type='submit'>Sign in</button>\n          </div>\n        </form>\n        <p className=\"registration-switch-view-text\">\n        No account? <a href=\"/signup\">Sign up</a>\n        </p>\n      </div>\n    </div>\n  )\n}\n\nexport default SignIn","import React, { useState, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom';\nimport { useMutation } from '@apollo/client'\nimport { SIGNUP } from '../../../graphql/mutations'\nimport { TitleAndLogo } from '../../UtilityComponents/UtilityComponents';\n\nconst SignUp = () => {\n  const history = useHistory()\n  const [firstName, setFirstName] = useState('')\n  const [lastName, setLastName] = useState('')\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n\n  const [signup, result] = useMutation(SIGNUP, {\n    onError: (error) => {\n      console.log(\"Error at sign up mutation: \\n\", error.graphQLErrors[0].message)\n    }\n  })\n\n  useEffect(() => {\n    if (result.data) {\n      //console.log(\"(sign up) RESULT DATA USE EFFECT\", result.data)\n      history.push('/signin')\n    }\n  }, [result.data]) // eslint-disable-line\n\n  const submit = async (event: any) => {\n    event.preventDefault()\n    signup({\n      variables: {\n        firstName: firstName,\n        lastName: lastName,\n        username: username,\n        password: password\n      }\n    })\n  }\n\n  return (\n    <div className=\"registration-container\">\n      <div className=\"registration-items-container signup\">\n        <div className=\"registration-title-and-logo-container\">\n          <TitleAndLogo />\n          <h2>Sign up</h2>\n        </div>\n        <form onSubmit={submit}>\n          <div className=\"registration-inputs-container\">\n            <div>\n              First name\n              <br />\n              <input\n                value={firstName}\n                onChange={({ target }) => setFirstName(target.value)}\n              />\n            </div>\n            <br />\n            <div>\n              Last name\n              <br />\n              <input\n                value={lastName}\n                onChange={({ target }) => setLastName(target.value)}\n              />\n            </div>\n            <br />\n            <div>\n              Email or username\n              <br />\n              <input\n                value={username}\n                onChange={({ target }) => setUsername(target.value)}\n              />\n            </div>\n            <br />\n            <div>\n              Password\n              <br />\n              <input\n                type='password'\n                value={password}\n                onChange={({ target }) => setPassword(target.value)}\n              />\n            </div>\n              <br />\n            <div>\n              Confirm password\n              <br />\n              <input\n                type='password'\n                value={password}\n                onChange={({ target }) => setPassword(target.value)}\n              />\n            </div>\n          </div>\n          <div className=\"registration-submit-button-container\">\n            <button className=\"blue-button\" type='submit'>Sign up</button>\n          </div>\n        </form>\n        <p className=\"registration-switch-view-text\">\n          Already have an account? <a href=\"/signin\">Sign in</a>\n        </p>\n      </div>\n    </div>\n  )\n}\n\nexport default SignUp;","export default __webpack_public_path__ + \"static/media/musician1svg.d9d6643d.svg\";","export default __webpack_public_path__ + \"static/media/musician2svg.e4f9b507.svg\";","export default __webpack_public_path__ + \"static/media/pianosvg.50433489.svg\";","import React from 'react';\nimport './Home.css'\n\nimport Musician1Svg from '../../../images/musician1svg.svg'\nimport Musician2Svg from '../../../images/musician2svg.svg'\nimport Pianosvg from '../../../images/pianosvg.svg'\n\nconst Home = () => {\n\n  return (\n    <div className=\"home-container\">\n      <nav className=\"home-page-navigation\">\n        <div className=\"home-page-navigation-links home-page-scroll-links\">\n          <a href=\"#home\" className=\"home-navigation-link\">HalfEatenBiscuit <i className=\"fas fa-cookie-bite\"></i></a>\n          <div className=\"home-hidden-links\">\n            <a href=\"#about\" className=\"home-navigation-link\">About</a>\n            <a href=\"#features\" className=\"home-navigation-link\">Features</a>\n          </div>\n        </div>\n        <div className=\"home-page-navigation-links home-page-sign-links\">\n          <a href=\"/signin\" className=\"home-navigation-link sign-link\">Sign In</a>\n          <a href=\"/signup\" className=\"home-navigation-link sign-link\">Sign Up</a>\n        </div>\n      </nav>\n\n      <div className=\"scroll-container\">\n\n        <div className=\"scroll-page title-section\" id=\"home\">\n          <div className=\"home-page-image-container\">\n            <img src={Musician1Svg} alt=\"\" className=\"home-page-image home-page-musician1-image\" />\n          </div>\n          <div className=\"title-container\">\n            <h1 className=\"title\">Hey artist, <br></br>show your work!</h1>\n          </div>\n        </div>\n\n        <div className=\"scroll-page about-section\" id=\"about\">\n          <div className=\"home-page-image-container\">\n            <img src={Musician2Svg} alt=\"\" className=\"home-page-image home-page-musician2-image\" />\n          </div>\n          <div className=\"scroll-page-content\">\n            <h1>About</h1>\n            <p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. Non adipisci tempora necessitatibus molestiae eius ea tenetur quibusdam delectus, unde et, sint, itaque assumenda iusto modi. Voluptates architecto non, fugit cupiditate assumenda earum, libero temporibus nostrum unde qui ea totam ut, iure eligendi voluptas labore! Vel ratione enim ad autem! Blanditiis consequuntur ab perspiciatis. Incidunt architecto accusantium repellendus error laudantium delectus eius repudiandae, optio corporis quasi ut provident libero ex ducimus fugit aut id alias recusandae eaque voluptate fuga neque quod. Cumque aperiam assumenda illo rerum facere minima, labore ad amet molestias? Voluptate eligendi aliquid, repellat esse a sed ipsum qui?</p>\n          </div>\n        </div>\n\n        <div className=\"scroll-page features-section\" id=\"features\">\n          <div className=\"home-page-image-container\">\n            <img src={Pianosvg} alt=\"\" className=\"home-page-image home-page-piano-image\" />\n          </div>\n          <div className=\"scroll-page-content\">\n            <h1>Features</h1>\n            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Excepturi ut ipsa nesciunt quod sequi pariatur, cumque, unde esse earum aliquid officiis eligendi? Atque aspernatur sequi tenetur aut qui, incidunt numquam reiciendis neque, laudantium officia deserunt non, eius illum facilis magnam nihil dolor enim. Incidunt repellat ipsum sequi nihil dolor quas obcaecati, necessitatibus iusto eum. Quo voluptatem aspernatur harum totam! Beatae maxime fugit corrupti! Eveniet hic totam doloribus eos recusandae! Quidem culpa tenetur consequatur rem aut voluptatem illo, fugit quaerat quo, quis assumenda tempore asperiores architecto adipisci cum. Repudiandae voluptate exercitationem fugit magnam! Ab ipsa minima eveniet odit amet doloremque soluta!</p>\n          </div>\n        </div>\n\n        <div className=\"scroll-page footer-section\">\n          <h1>Footer</h1>\n          <p>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Animi, a assumenda eveniet deleniti itaque amet, vero excepturi alias voluptate cum at obcaecati beatae dolor aperiam tenetur ipsum impedit debitis officia sapiente! Id officiis ex mollitia veritatis. Ullam dignissimos impedit nemo culpa, non sunt perferendis modi officia odit molestiae repellendus? Laboriosam amet quos aspernatur? Rem iste, dolores officiis in, magni neque incidunt minus iusto pariatur eveniet error provident nobis nam animi ullam voluptates velit nihil reiciendis temporibus aut molestias. Quos voluptatibus praesentium, ut nam saepe culpa nisi iusto nostrum earum magni asperiores aspernatur? Voluptas officia fugit in vitae esse sunt placeat.</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Home","import React, { useContext } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { useHistory } from 'react-router'\n\nimport { FIND_USER_OR_GROUP, ME } from '../../../graphql/queries'\nimport './Welcome.css'\nimport { UserContext } from '../../UtilityComponents/UserContext'\nimport { Loading } from '../../UtilityComponents/UtilityComponents'\n\nconst Welcome = () => {\n  const userContext = useContext(UserContext)\n  const result = useQuery(ME)\n  //const userOrGroup = useQuery(FIND_USER_OR_GROUP, { variables: { id: sessionStorage.getItem(SESSION_TOKEN) } })\n  const userOrGroup = useQuery(FIND_USER_OR_GROUP, { variables: { id: userContext.sessionId} })\n  const history = useHistory()\n\n  if (result.loading || userOrGroup.loading) {\n    return <Loading />\n  }\n\n  const getTitleByTime = () => {\n    const currentHour = new Date().getHours()\n    if (currentHour > 4 && currentHour <= 11) {\n      return 'Good morning'\n    }\n    else if (currentHour > 11 && currentHour <= 18) {\n      return 'Good day'\n    }\n    else if (currentHour > 18 && currentHour <= 22) {\n      return 'Good evening'\n    } else {\n      return 'Welcome'\n    }\n  }\n\n  return (\n    <div className=\"welcome-page-container\">\n      <h1 className=\"welcome-page-title\">{getTitleByTime()}, <i>{result.data.me.username}</i></h1>\n      <p><i>Your userId is {result.data.me.id}</i></p>\n      {!result.data.me.profile.isEditedByUser &&\n        <div className=\"info\" onClick={() => history.push('/createprofile')}><b>⚠ Create your profile</b></div>}\n      <br></br>\n      {userOrGroup.data.findUserOrGroup.__typename === 'Group' && \n      <div>You are using group profile for <i>{userOrGroup.data.findUserOrGroup.profile.name}</i></div>}\n      {userContext.sessionId}\n    </div>\n  )\n}\n\nexport default Welcome","import React from 'react'\n\nconst Settings = () => {\n  return <h1>Settings</h1>\n}\n\nexport default Settings;","const About = ({ text, setText }: any) => {\n  return (\n    <div>\n      <h2>Describe your group</h2>\n      <textarea\n        value={text}\n        onChange={e => setText(e.target.value)}\n        cols={50}\n        rows={30}\n      >\n      </textarea>\n    </div>\n  )\n}\n\nexport default About","import { useState } from \"react\"\nimport { useQuery } from \"@apollo/client\"\nimport { ALL_GROUP_SKILL_CATEGORIES } from \"../../../../../graphql/queries\"\n\nimport { CategorySelection, Loading } from \"../../../../UtilityComponents/UtilityComponents\"\n\ninterface Category {\n  id: string,\n  name: String,\n  parent: Category\n  children: [Category]\n}\n\nconst GroupSkills = ({ skills, setSkills }) => {\n  const [allCategories, setAllCategories] = useState<Category[]>([])\n  const [currentPath, setCurrentPath] = useState([undefined])\n  const { loading, data } = useQuery(ALL_GROUP_SKILL_CATEGORIES, { onCompleted: () => setAllCategories(data.allGroupSkillCategories) })\n\n  if (loading) return <Loading />\n  \n  return (\n    <div>\n    <h2>Select your skills</h2>\n      <CategorySelection\n        selectedCategories={skills}\n        setSelectedCategories={setSkills}\n        allCategories={allCategories}\n        currentPath={currentPath}\n        setCurrentPath={setCurrentPath}\n      />\n    {skills.map(s => <div key={s.id}>{s.name}</div>)}\n  </div>\n  )\n}\n\nexport default GroupSkills","const NameAndImage = ({ groupName, setGroupName, image, setImage }) => {\n\n  const handleImageChange = (event) => {\n\n    if (event.target.files && event.target.files[0]) {\n      console.log(\"FILE SIZE\", event.target.files[0].size)\n      if (event.target.files[0].size >= 1000000) {\n        console.log(\"IMAGE TOO LARGE\")\n      } else {\n        const reader = new FileReader();\n        reader.onload = (event) => {\n          setImage(String(event?.target?.result));\n        };\n        reader.readAsDataURL(event.target.files[0]);\n      }\n    }\n  }\n\n  return (\n    <div>\n      <h1>Name and image component</h1>\n      <input value={groupName} onChange={e => setGroupName(e.target.value)}></input>\n      <input type=\"file\" name=\"image\" accept=\".jpg, .jpeg, .png\" onChange={e => handleImageChange(e)}></input>\n    </div>\n  )\n}\n\nexport default NameAndImage","import { useMutation } from \"@apollo/client\"\n\nimport { Button, Loading } from \"../../../../UtilityComponents/UtilityComponents\"\nimport { CREATE_GROUP } from \"../../../../../graphql/mutations\"\nimport { useState } from \"react\"\n\nconst Summary = ({ selectedUsers, groupName, image, skills, about }) => {\n  const [submitCompleted, setSubmitCompleted] = useState(false)\n  const [redirectAdress, setRedirectAdress] = useState('')\n\n  const [createGroup, { loading }] = useMutation(CREATE_GROUP, {\n    onError: (error) => {\n      console.log(\"Error at create user profile mutation: \\n\", error)\n    }\n  })\n\n  const handleSubmit = async () => {\n    const skillIds = skills.map(skill => skill.id)\n    const userIds = selectedUsers.map(user => user.id)\n\n    const response = await createGroup({\n      variables: {\n        name: groupName,\n        users: userIds,\n        about: about,\n        image: image,\n        skills: skillIds\n      }\n    })\n    if (response.data?.createGroup.kind === 'Group') {\n      setSubmitCompleted(true)\n      setRedirectAdress(`/profiles/${response.data.createGroup.id}`)\n    } else {\n      console.log(\"The name might be taken\")\n    }\n    //window.location.assign('/')\n  }\n\n  if (loading) {\n    return <Loading />\n  }\n\n  return (\n    !submitCompleted\n      ?\n      <div>\n        <h1>Summary</h1>\n        USERS: {selectedUsers.map(u => <p>{u.username}</p>)}\n        NAME: {groupName}\n        <img src={image} alt=\"summaryimage\"></img>\n        {skills.map(skill => <p>{skill.name}</p>)}\n        ABOUT: {about}\n        <Button handleClick={handleSubmit} text='Submit' />\n      </div>\n      :\n      <div>\n        <h1>Group created succesfully</h1>\n        <p>See it <a href={redirectAdress}>here</a></p>\n      </div>\n  )\n}\n\nexport default Summary","import React, { useEffect } from 'react'\nimport { useQuery } from '@apollo/client'\n\nimport { ALL_USERS, MY_ID } from '../../../../../graphql/queries'\nimport { Loading, SmallProfileCard } from '../../../../UtilityComponents/UtilityComponents'\nimport '../CreateGroupForm.css'\n\ninterface User {\n  id: String\n  username: String\n}\n\nconst UserSelection = ({ selectedUsers, setSelectedUsers }) => {\n  const allUsersResult = useQuery(ALL_USERS)\n  const myIdResult = useQuery(MY_ID)\n\n  useEffect(() => {\n    if (myIdResult.data && allUsersResult.data) {\n      const meObject = allUsersResult.data.allUsers.find((user: User) => user.id === myIdResult.data.me.id)\n      if (!selectedUsers.map(u => u.id).includes(myIdResult.data.me.id)) {\n        setSelectedUsers(selectedUsers.concat(meObject))\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [myIdResult.data, allUsersResult.data])\n\n  if (allUsersResult.loading || myIdResult.loading) {\n    return <Loading />\n  }\n\n  const handleRemoveFromSelectedUsers = (u) => {\n    if (u.id !== myIdResult.data.me.id) {\n      setSelectedUsers(selectedUsers.filter(user => user.username !== u.username))\n    }\n  }\n\n  return (\n    <div className=\"new-group-container\">\n      <h1>Select members</h1>\n\n      <div className=\"selected-users-container\">\n        <h3>Selected</h3>\n        {selectedUsers.map(u => {\n          return (\n            <div\n              className=\"selected-user\"\n              onClick={() => handleRemoveFromSelectedUsers(u)}>\n              <SmallProfileCard id={u.id} image={u.profile.image} name={u.username} />\n              <div className=\"small-profile-card-overlay selected-user-overlay\">Remove</div>\n            </div>\n          )\n        })}\n      </div>\n      <div className=\"all-users-container\">\n        {allUsersResult.data.allUsers.map(u => {\n          return (\n            <div className=\"all-user-container\" onClick={() => setSelectedUsers(selectedUsers.concat(u))}>\n              {!selectedUsers.find(user => user.username === u.username) &&\n                <SmallProfileCard id={u.id} image={u.profile.image} name={u.username} />}\n              <div className=\"small-profile-card-overlay all-user-overlay\">Add</div>\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n\nexport default UserSelection\n\n\n/*\nimport React, { useEffect, useState } from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\n\nimport { ALL_USERS, MY_ID } from '../../../../graphql/queries'\nimport { CREATE_GROUP } from '../../../../graphql/mutations'\nimport { Button } from '../../../UtilityComponents/UtilityComponents'\nimport './CreateGroupForm.css'\n\ninterface User {\n  id: String\n  username: String\n}\n\nconst CreateGroup = () => {\n  const [groupName, setGroupName] = useState('Group name')\n  const [selectedUsers, setSelectedUsers] = useState<User[]>([]);\n\n  const allUsersResult = useQuery(ALL_USERS)\n  const myIdResult = useQuery(MY_ID)\n\n  const [createGroup] = useMutation(CREATE_GROUP, {\n    onError: (error) => {\n      console.log(\"Error at create group mutation: \\n\", error)\n    }\n  })\n\n  useEffect(() => {\n    if (myIdResult.data && allUsersResult.data) {\n      const meObject = allUsersResult.data.allUsers.find((user: User) => user.id === myIdResult.data.me.id)\n      if (!selectedUsers.includes(meObject)) {\n        setSelectedUsers(selectedUsers.concat(meObject))\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [myIdResult.data, allUsersResult.data])\n\n  if (allUsersResult.loading || myIdResult.loading) {\n    return <div>Loading...</div>\n  }\n\n  const handleRemoveFromSelectedUsers = (u) => {\n    if (u.id !== myIdResult.data.me.id) {\n      setSelectedUsers(selectedUsers.filter(user => user.username !== u.username))\n    }\n  }\n\n  const handleNewGroupSubmit = () => {\n    console.log(\"NEW GROUP SUBMIT BUTTON PRESSED, users:\", selectedUsers, \"name:\", groupName)\n    const usersIds = selectedUsers.map(u => u.id)\n    createGroup({\n      variables: {\n        name: groupName,\n        users: usersIds\n      }\n    })\n    setSelectedUsers([])\n    setGroupName(\"\")\n  }\n\n  return (\n    <div className=\"new-group-container\">\n      <h1>Create group</h1>\n      <input value=\"Filter by name\" onChange={() => { }}></input>\n      <input value={groupName} onChange={({ target }) => setGroupName(target.value)}></input>\n\n      <div className=\"selected-users\">\n        <h3>Selected users</h3>\n        {selectedUsers.map(u => {\n          return (\n            <div\n              className=\"selected-user\"\n              onClick={() => handleRemoveFromSelectedUsers(u)}>\n              <p>{u.username}</p>\n            </div>\n          )\n        })}\n      </div>\n      <div className=\"all-users-container\">\n        {allUsersResult.data.allUsers.map(u => {\n          return (\n            !selectedUsers.find(user => user.username === u.username) &&\n            <div\n              className=\"user-container\"\n              onClick={() => setSelectedUsers(selectedUsers.concat(u))}>\n              <p>{u.username}</p>\n            </div>\n          )\n        })}\n      </div>\n      <Button text=\"Create group\" handleClick={handleNewGroupSubmit} />\n    </div>\n  )\n}\n\nexport default CreateGroup;\n\n*/","import React, { useState } from \"react\"\nimport { Button } from \"../../../UtilityComponents/UtilityComponents\"\nimport About from \"./Views/About\"\nimport GroupSkills from \"./Views/GroupSkills\"\nimport NameAndImage from \"./Views/NameAndImage\"\nimport Summary from \"./Views/Summary\"\nimport UserSelection from \"./Views/UserSelection\"\n\ninterface User {\n  id: String\n  username: String\n}\n\nconst CreateGroupForm = () => {\n  const [selectedUsers, setSelectedUsers] = useState<User[]>([]);\n  const [skills, setSkills] = useState<User[]>([]);\n  const [groupName, setGroupName] = useState('Group name')\n  const [about, setAbout] = useState('')\n  const [image, setImage] = useState('')\n  const [currentView, setCurrentView] = useState(0)\n  const views = [\n    <UserSelection selectedUsers={selectedUsers} setSelectedUsers={setSelectedUsers} />,\n    <GroupSkills skills={skills} setSkills={setSkills}/>,\n    <NameAndImage groupName={groupName} setGroupName={setGroupName} image={image} setImage={setImage} />,\n    <About text={about} setText={setAbout} />,\n    <Summary selectedUsers={selectedUsers} groupName={groupName} image={image} skills={skills} about={about}/>\n  ]\n\n  const handlePrevPress = () => {\n    currentView <= (views.length - 1) && currentView > 0 && setCurrentView(currentView - 1)\n  }\n\n  const handleNextPress = () => {\n    currentView < (views.length - 1) && currentView >= 0 && setCurrentView(currentView + 1)\n  }\n\n  return (\n    <div className=\"create-group-form-container\">\n      <div className=\"create-group-current-view\">\n        {views[currentView]}\n      </div>\n      <div className=\"create-group-switch-view-buttons-container\">\n        <Button handleClick={handlePrevPress} text=\"Prev\" />\n        <Button handleClick={handleNextPress} text=\"Next\" />\n      </div>\n    </div>\n  )\n}\n\nexport default CreateGroupForm\n","import React from 'react'\nimport CreateGroupForm from './CreateGroupForm';\n\nconst CreateGroup = () => {\n  return (\n    <CreateGroupForm />\n  )\n}\n\nexport default CreateGroup;","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport { FIND_USER_OR_GROUP } from '../../../../graphql/queries';\nimport { Loading } from '../../../UtilityComponents/UtilityComponents';\n\nconst Profile = () => {\n  const { id }: any = useParams();\n  const result = useQuery(FIND_USER_OR_GROUP, {\n    variables: { id }\n  })\n\n  if (result.loading) {\n    return <Loading />\n  }\n\n  console.log(\"USER/GROUP RESULT\", result.data)\n\n  if (!result.data) {\n    return <h1>Profile not found...</h1>\n  }\n\n  const kind = result.data.findUserOrGroup.kind\n\n  if (kind === 'User') {\n    return (\n      <div>\n        {result.data\n          ? (\n            <div>\n              <h3>{result.data.findUserOrGroup.username}'s profile</h3>\n              {result.data.findUserOrGroup.profile.about}\n              <img src={result.data.findUserOrGroup.profile.image} alt=\"\" id=\"img\" className=\"img\" width={300} />\n            </div>\n          )\n          : (\n            <div><b>No profile for dis guy:</b> {id}</div>\n          )\n        }\n      </div>\n    )\n  } else if (kind === 'Group') {\n    return (\n      <div>\n        {result.data\n          ? (<div>\n            <b>{result.data.findUserOrGroup.profile.name}</b>\n            <img src={result.data.findUserOrGroup.profile.image} alt=\"\" id=\"img\" className=\"img\" width={300} />\n            {result.data.findUserOrGroup.users.map(user => <div key={user.id}>{user.username}</div>)}\n            </div>)\n          : (<div>No group profile</div>)}\n      </div>\n    )\n  } else {\n    return (\n      <h1>Not found</h1>\n    )\n  }\n}\n\nexport default Profile;","import React from \"react\"\n\nconst CreateProfileInfo = ({ name }) => {\n  return (\n    <div>\n      Hey <b>{name}</b>, let's create your profile\n    </div>\n  )\n}\n\nexport default CreateProfileInfo","import { useState } from \"react\"\nimport { useQuery } from \"@apollo/client\"\nimport { ALL_SKILL_CATEGORIES } from \"../../../../../graphql/queries\"\n\nimport { CategorySelection, Loading } from \"../../../../UtilityComponents/UtilityComponents\"\n\ninterface Category {\n  id: string,\n  name: String,\n  parent: Category\n  children: [Category]\n}\n\nconst Skills = ({ skills, setSkills }) => {\n  const [allCategories, setAllCategories] = useState<Category[]>([])\n  const [currentPath, setCurrentPath] = useState([undefined])\n  const { loading, data } = useQuery(ALL_SKILL_CATEGORIES, { onCompleted: () => setAllCategories(data.allSkillCategories) })\n\n  if (loading) return <Loading />\n\n  return (\n    <div>\n      <h2>Select your skills</h2>\n      <CategorySelection\n        selectedCategories={skills}\n        setSelectedCategories={setSkills}\n        allCategories={allCategories}\n        currentPath={currentPath}\n        setCurrentPath={setCurrentPath}\n      />\n      {skills.map(s => <div key={s.id}>{s.name}</div>)}\n    </div>\n  )\n}\n\nexport default Skills","const About = ({ text, setText }: any) => {\n  return (\n    <div>\n      <h2>Describe yourself</h2>\n      <textarea\n        value={text}\n        onChange={e => setText(e.target.value)}\n        cols={50}\n        rows={30}\n      >\n      </textarea>\n    </div>\n  )\n}\n\nexport default About","import React from \"react\";\n\nconst Image = ({image, setImage}) => {\n\n  const handleImageChange = (event) => {\n    if (event.target.files && event.target.files[0]) {\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        setImage(String(event?.target?.result));\n      };\n      reader.readAsDataURL(event.target.files[0]);\n    }\n  }\n\n  return (\n    <div>\n      <h3>Set image</h3>\n      <input type=\"file\" name=\"image\" accept=\".jpg, .jpeg, .png\" onChange={e => handleImageChange(e)}></input>\n      <img src={image} alt=\"\" width={300} />\n    </div>\n  )\n}\n\nexport default Image\n\n","import React, { useState } from \"react\"\nimport { useMutation, useQuery } from \"@apollo/client\"\n\nimport { Button, Loading } from \"../../../../UtilityComponents/UtilityComponents\"\nimport { CREATE_USER_PROFILE } from \"../../../../../graphql/mutations\"\nimport { MY_ID } from \"../../../../../graphql/queries\"\n\nconst Summary = ({ skills, about, image }) => {\n  const myId = useQuery(MY_ID, { onCompleted: () => setRedirectAdress(`/profiles/${myId.data.me.id}`) })\n  const [submitCompleted, setSubmitCompleted] = useState(false)\n  const [redirectAdress, setRedirectAdress] = useState('')\n\n  const [createUserProfile, { loading }] = useMutation(CREATE_USER_PROFILE, {\n    onError: (error) => {\n      console.log(\"Error at create user profile mutation: \\n\", error)\n    }\n  })\n\n  const handleSubmit = async () => {\n    const skillIds = skills.map(s => s.id)\n    const response = await createUserProfile({\n      variables: {\n        skills: skillIds,\n        about: about,\n        image: image\n      }\n    })\n    if (response.data.createUserProfile.about === about) {\n      setSubmitCompleted(true)\n    }\n  }\n\n  if (loading) {\n    return <Loading />\n  }\n\n  return (\n    !submitCompleted\n      ?\n      <div>\n        <h3>Summary</h3>\n        {skills.map(s => <div key={s.id}>{s.name}</div>)}\n        <br></br>\n        {about}\n        <img src={image} alt=\"\" width={200} />\n        <Button text=\"Submit\" handleClick={handleSubmit} />\n      </div>\n      :\n      <div>\n        <h1>Profile created succesfully</h1>\n        <p>See it <a href={redirectAdress}>here</a></p>\n      </div>\n  )\n}\n\nexport default Summary","import { useState } from \"react\"\n\nimport CreateProfileInfo from \"./Views/CreateProfileInfo\"\nimport Skills from \"./Views/Skills\"\nimport About from \"./Views/About\"\nimport Image from \"./Views/Image\"\nimport Summary from \"./Views/Summary\"\n\nimport './CreateProfileForm.css'\nimport { useQuery } from \"@apollo/client\"\nimport { ME } from \"../../../../graphql/queries\"\nimport { Button, Loading } from \"../../../UtilityComponents/UtilityComponents\"\n\ninterface Category {\n  id: string,\n  name: String,\n  parent: Category\n  children: [Category]\n}\n\nconst CreateProfileForm = () => {\n  const [skills, setSkills] = useState<Category[]>([])\n  const [aboutText, setAboutText] = useState('')\n  const [image, setImage] = useState()\n  const { loading, data } = useQuery(ME, { onCompleted: () => {\n    setSkills(data.me.profile.skills)\n    setImage(data.me.profile.image)\n    setAboutText(data.me.profile.about)\n  } })\n  const [currentView, setCurrentView] = useState(0)\n  const views = [\n    <CreateProfileInfo name={data?.me.username}/>,\n    <Skills skills={skills} setSkills={setSkills} />,\n    <About text={aboutText} setText={setAboutText} />,\n    <Image image={image} setImage={setImage} />,\n    <Summary skills={skills} about={aboutText} image={image} />\n  ]\n\n  if (loading) {\n    return <Loading />\n  }\n\n  const handlePrevPress = () => {\n    currentView <= (views.length - 1) && currentView > 0 && setCurrentView(currentView - 1)\n  }\n\n  const handleNextPress = () => {\n    currentView < (views.length - 1) && currentView >= 0 && setCurrentView(currentView + 1)\n  }\n\n  return (\n    <div className=\"profile-edit-master-container\">\n      <h1>Create your profile/portfolio</h1>\n      <div className=\"profile-edit-current-view\">\n        {views[currentView]}\n      </div>\n      <div className=\"profile-edit-switch-view-buttons-container\">\n        <Button handleClick={handlePrevPress} text=\"Prev\" />\n        <Button handleClick={handleNextPress} text=\"Next\" />\n      </div>\n    </div>\n  )\n}\n\nexport default CreateProfileForm","import React from 'react'\nimport CreateProfileForm from './CreateProfileForm'\n\nconst CreateProfile = () => {\n  return (\n    <div>\n      <CreateProfileForm />\n    </div>\n  )\n}\n\nexport default CreateProfile","import React from \"react\";\n\nclass ErrorBoundary extends React.Component<{}, { hasError: boolean }> {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // You can also log the error to an error reporting service\n    //logErrorToMyService(error, errorInfo);\n    console.log(\"componentDidCatch\\nerror:\", error, \"\\nerrorInfo:\", errorInfo)\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary","const ErrorPage = () => {\n  return (\n    <h1>These are not the droids you are looking for</h1>\n  )\n}\n\nexport default ErrorPage","import React, { useState } from \"react\";\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Messages from \"./components/Pages/Messages/Messages\";\nimport Jobmarket from \"./components/Pages/Jobmarket/Jobmarket\";\nimport Profiles from \"./components/Pages/Profiles/Profiles\";\nimport SignIn from \"./components/Pages/Registrations/SignIn\";\nimport SignUp from \"./components/Pages/Registrations/SignUp\";\nimport Home from \"./components/Pages/Home/Home\";\nimport Welcome from \"./components/Pages/Welcome/Welcome\";\nimport Settings from \"./components/Pages/Settings/Settings\";\nimport CreateGroup from \"./components/Pages/Profiles/CreateGroup/CreateGroup\";\nimport Profile from \"./components/Pages/Profiles/Profile/Profile\";\nimport CreateProfile from \"./components/Pages/Profiles/CreateProfile/CreateProfile\";\n\nimport './App.css';\nimport { SESSION_TOKEN, SIGN_IN_TOKEN } from \"./utils/constants\";\n\nimport { UserContext } from \"./components/UtilityComponents/UserContext\";\nimport ErrorBoundary from \"./components/UtilityComponents/ErrorBoundary\";\nimport ErrorPage from \"./components/Pages/ErrorPage\";\n\n\nconst App = () => {\n  const localStorageToken = localStorage.getItem(SIGN_IN_TOKEN)\n  const [token, setToken] = useState(localStorageToken);\n  const [sessionId, setSessionId] = useState(sessionStorage.getItem(SESSION_TOKEN))\n\n  return (\n    <ErrorBoundary>\n      <Router>\n        {process.env.NODE_ENV !== 'development' &&\n          <div className=\"production-notice-container\">\n            In development\n          </div>\n        }\n        <UserContext.Provider value={{ token, setToken, sessionId, setSessionId }}>\n          {!token\n            ? <Switch>\n              <Route path=\"/signin\" component={() => <SignIn />} />\n              <Route path=\"/signup\" component={() => <SignUp />} />\n              <Route path=\"/\" component={Home} />\n            </Switch>\n            :\n            <>\n              <Navbar />\n              <div className=\"pages\">\n                <Switch>\n                  <Route path=\"/messages\" component={Messages} />\n                  <Route path=\"/jobmarket\" component={Jobmarket} />\n                  <Route path=\"/profiles/:id\" component={Profile} />\n                  <Route path=\"/profiles\" component={Profiles} />\n                  <Route path=\"/settings\" component={Settings} />\n                  <Route path=\"/creategroup\" component={CreateGroup} />\n                  <Route path=\"/createprofile\" component={CreateProfile} />\n                  <Route path=\"/:invalidroute\" component={ErrorPage} />\n                  <Route exact path=\"/\" component={Welcome} />\n                </Switch>\n              </div>\n            </>\n          }\n        </UserContext.Provider>\n      </Router>\n    </ErrorBoundary>\n  );\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  ApolloClient,\n  ApolloProvider,\n  HttpLink,\n  InMemoryCache,\n  split\n} from '@apollo/client'\n\nimport { setContext } from '@apollo/link-context';\n\nimport { getMainDefinition } from '@apollo/client/utilities'\nimport { WebSocketLink } from '@apollo/client/link/ws'\n\nimport './index.css';\nimport App from './App';\nimport { SIGN_IN_TOKEN } from './utils/constants';\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(SIGN_IN_TOKEN)\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `bearer ${token}` : null,\n    }\n  }\n})\n\nconst uri = process.env.NODE_ENV === 'development'\n  ? 'http://localhost:3001/graphql'\n  : 'https://halfeatenbiscuit.herokuapp.com/graphql'\n\nconst httpLink = new HttpLink({ uri: uri })\n\nconst wsLink = new WebSocketLink({\n  uri: process.env.NODE_ENV === 'development'\n    ? 'ws://localhost:3001/graphql'\n    : 'wss://halfeatenbiscuit.herokuapp.com/graphql',\n  options: {\n    reconnect: true\n  }\n})\n\nconst splitLink = split(({ query }) => {\n  const definition = getMainDefinition(query)\n  return (\n    definition.kind === 'OperationDefinition' &&\n    definition.operation === 'subscription'\n  )\n},\n  wsLink,\n  authLink.concat(httpLink),\n)\n\nconst cache = new InMemoryCache({\n  typePolicies: {\n    Conversation: {\n      fields: {\n        messages: {\n          merge(existing = [], incoming: any[]) {\n            // console.log(\"Convestaion cache\", existing, incoming)\n            return incoming\n          },\n        }\n      }\n    },\n    User: {\n      fields: {\n        profile: {\n          merge(existing, incoming) {\n            // console.log(\"profile\\nEX: \\n\", existing, \"\\nINC:\\n\", incoming)\n            return incoming\n          }\n        }\n      }\n    },\n    Query: {\n      fields: {\n        findConversation: {\n          merge(existing, incoming) {\n            // console.log(\"findConversation\\nEX: \\n\", existing, \"\\nINC:\\n\", incoming)\n            return incoming\n          }\n        },\n        findUserOrGroup: {\n          merge(existing, incoming) {\n            // console.log(\"findUserOrGroup\\nEX: \\n\", existing, \"\\nINC:\\n\", incoming)\n            return incoming\n          }\n        }\n      }\n    },\n    // UserOrGroup: {\n    //   fields: {\n    //     conversations: {\n    //       merge(existing, incoming) {\n    //         console.log(\"USERorGroup EX\", existing, \"USERorGroup INC\", incoming)\n    //       }\n    //     }\n    //   }\n    // }\n  }\n})\n\nconst client = new ApolloClient({\n  cache: cache,\n  link: splitLink,\n  connectToDevTools: true\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n)\n\n"],"sourceRoot":""}