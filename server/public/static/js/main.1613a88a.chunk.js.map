{"version":3,"sources":["components/Navbar/Dropdowns/NotificationsDropdown.tsx","graphql/queries.ts","utils/constants.ts","components/Navbar/Dropdowns/ProfileDropdown.tsx","components/Navbar/Navbar.tsx","components/Pages/Messages/Navigation/MessageNavigation.tsx","graphql/mutations.ts","graphql/subscriptions.ts","components/Pages/Messages/Conversation/Conversation.tsx","components/Pages/Messages/Messages.tsx","utils/UtilityComponents/UtilityComponents.tsx","components/Pages/Jobmarket/Pages/Jobqueries.tsx","components/Pages/Jobmarket/JobmarketNavigation/JobmarketNavigation.tsx","components/Pages/Jobmarket/Pages/SendQuery.tsx","components/Pages/Jobmarket/Pages/MyQueries.tsx","components/Pages/Jobmarket/Pages/FindPlayers.tsx","components/Pages/Jobmarket/Jobmarket.tsx","components/Pages/Profiles/Profiles.tsx","components/Pages/Registrations/SignIn.tsx","components/Pages/Registrations/SignUp.tsx","components/Pages/Home/Home.tsx","components/Pages/Welcome/Welcome.tsx","components/Pages/Settings/Settings.tsx","components/Pages/Profiles/NewGroup.tsx","components/Pages/Profiles/Profile/Profile.tsx","App.tsx","index.tsx"],"names":["NotificationsDropdown","show","setShow","className","ME","gql","FIND_USER","FIND_USER_OR_GROUP","MY_ID","CONVERSATION_INFOS","FIND_CONVERSATION","ALL_QUERIES","ALL_USERS","SIGN_IN_TOKEN","SESSION_TOKEN","ProfileDropdown","client","useApolloClient","me","useQuery","sessionId","sessionStorage","getItem","useLazyQuery","findUserOrGroup","loading","data","useEffect","variables","id","console","log","history","useHistory","handleLogout","a","resetStore","localStorage","clear","window","location","assign","handleProfileChange","groupId","setItem","onClick","push","src","alt","username","name","to","activeClassName","groups","map","group","Navbar","useState","click","setClick","showNotification","setShowNotifications","showProfileOptionsDropdown","setShowProfileOptionsDropdown","handleClick","exact","tabIndex","MessageNavigation","setShowContacts","result","conversations","value","conversation","usernames","users","user","linkTo","LOGIN","SIGNUP","CREATE_JOBQUERY","NEW_CONVERSATION","SEND_MESSAGE","CREATE_GROUP","MESSAGE_ADDED","Conversation","useParams","updateCacheWith","addedMessage","includedIn","set","object","message","includes","readQuery","query","dataInStore","findConversation","messages","writeQuery","concat","useSubscription","onSubscriptionData","subscriptionData","useMutation","onError","error","sendMessage","conversationResult","myIdResult","messageInput","setMessageInput","conversationId","myId","p","sender","body","type","onChange","e","target","event","preventDefault","Messages","showContacts","path","component","Toggle","state","toggleClick","Button","text","Jobqueries","handleButtonPress","allJobqueries","q","contactText","JobmarketNavigation","SendQuery","content","setContent","createQuery","submit","onSubmit","MyQueries","visible","setVisible","jobQueries","FindPlayers","Jobmarket","Profiles","allUsersResult","newConversation","handleContactButtonPress","receiverId","newConversationId","createConversation","allUsers","u","profileUrl","SignIn","setToken","setUsername","password","setPassword","graphQLErrors","login","token","SignUp","signup","Home","href","Welcome","Settings","NewGroup","groupName","setGroupName","selectedUsers","setSelectedUsers","meResult","createGroup","filter","find","usersIds","Profile","findUser","profile","about","App","localStorageItem","authLink","setContext","_","headers","authorization","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","splitLink","split","definition","getMainDefinition","kind","operation","ApolloClient","cache","InMemoryCache","link","connectToDevTools","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.1613a88a.chunk.js","sourcesContent":["import React from 'react'\nimport './Dropdown.css'\n\nconst NotificationsDropdown = ({show, setShow}: any) => {\n  if (!show) {\n    return null\n  }\n  return (\n    <div className=\"dropdown\">\n      <h3 className=\"notifications-title\">Notifications</h3>\n    </div>\n  )\n}\n\nexport default NotificationsDropdown;","import { gql } from '@apollo/client';\n\nexport const ME = gql`\n  query {\n    me {\n      id\n      username\n      jobQueries {\n        id, content, date\n      },\n      groups {\n        id\n        name\n      }\n    }\n  }\n`\n\nexport const FIND_USER = gql`\n  query findUser($id: ID!){\n    findUser (id: $id) {\n      username,\n      profile {\n        about\n      }\n    }\n  }\n`\n\nexport const FIND_GROUP = gql`\n  query ($id: ID!) {\n    findGroup(id: $id) {\n      name\n    }\n  }\n`\n\nexport const FIND_USER_OR_GROUP = gql`\n  query ($id: ID!) {\n    findUserOrGroup(id: $id) {\n        ... on User {\n        id,\n        username\n      }\n      ... on Group {\n        id,\n        name\n      }\n    }\n  }\n`\n\n\nexport const MY_ID = gql`\n  query {\n    me {\n      id\n    }\n  }\n`\n\nexport const CONVERSATION_INFOS = gql`\n  query {\n    me {\n      conversations {\n        id,\n        users {\n          username\n          }\n      }\n    }\n  }\n`\n\nexport const FIND_CONVERSATION = gql`\n  query ($id: ID!) {\n    findConversation(id: $id) {\n      id, \n      users {\n        id,\n        username\n      },\n      messages {\n        id\n        sender {\n          id\n        }\n        body \n      } \n    }\n  }\n`\n\nexport const ALL_QUERIES = gql`\n  query {\n    allJobqueries  {\n      content\n      date\n      user {\n        username\n      }\n    }\n  }\n`\n\nexport const ALL_USERS = gql`\n  query {\n    allUsers {\n      id\n      username \n      jobQueries {\n        content\n      }\n    }\n  }\n`\n","export const SIGN_IN_TOKEN = 'kulttuurisome-user-token'\nexport const SESSION_TOKEN = 'kulttuurisome-session-token'","import React, { useEffect } from 'react'\nimport { useApolloClient, useQuery, useLazyQuery } from \"@apollo/client\";\nimport { useHistory } from 'react-router';\nimport { NavLink } from \"react-router-dom\";\n\nimport { FIND_USER_OR_GROUP, ME } from '../../../graphql/queries';\nimport { SESSION_TOKEN } from '../../../utils/constants';\nimport './Dropdown.css'\n\nconst ProfileDropdown = ({ show, setShow }: any) => {\n  const client = useApolloClient()\n\n  const me = useQuery(ME)\n  const sessionId = sessionStorage.getItem(SESSION_TOKEN)\n  //const currentProfile = useQuery(FIND_USER_OR_GROUP, { variables: { id: sessionId } })\n  const [findUserOrGroup, { loading, data }] = useLazyQuery(FIND_USER_OR_GROUP)\n  useEffect(() => {\n    findUserOrGroup({ variables: { id: sessionId } })\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n  console.log(\"DATA\", data)\n\n  const history = useHistory()\n\n  if (!show) {\n    return null\n  }\n\n  if (loading) {\n    return <div className=\"dropdown\">Loading...</div>\n  }\n\n  const handleLogout = async () => {\n    await client.resetStore()\n    localStorage.clear()\n    sessionStorage.clear()\n    window.location.assign('/')\n  }\n\n  const handleProfileClick = () => {\n    history.push(`/profile/${data.findUserOrGroup.id}`)\n    setShow(false)\n  }\n\n  const handleSettingsClick = () => {\n    history.push('/settings')\n    setShow(false)\n  }\n\n  const handleMeClick = () => {\n    sessionStorage.setItem(SESSION_TOKEN, me.data.me.id)\n    findUserOrGroup({ variables: { id: me.data.me.id } })\n  }\n\n  const handleNewGroupClick = () => {\n    console.log(\"NEW GROUP CLICKED\")\n  }\n\n  const handleProfileChange = async (groupId) => {\n    console.log(\"SWITCH PROFILE TO \", groupId)\n    sessionStorage.setItem(SESSION_TOKEN, groupId)\n    findUserOrGroup({ variables: { id: groupId } })\n  }\n\n  return (\n    <div className=\"dropdown\">\n      <div className=\"dropdown-profile\" onClick={handleProfileClick}>\n        <div>\n          <img src=\"https://content.thriveglobal.com/wp-content/uploads/2018/01/Happy_guy.jpg\" alt=\"musician\" className=\"profile-image\"></img>\n        </div>\n        <h3 className=\"profile-name\">{data.findUserOrGroup.username || data.findUserOrGroup.name}</h3>\n        <p className=\"secondary-text\">Show profile</p>\n      </div>\n      <div className=\"dropdown-link\" onClick={handleMeClick}><b>Me</b></div>\n      <div className=\"dropdown-link\" onClick={handleNewGroupClick}><b>My groups +</b></div>\n      <NavLink to=\"/newgroup\" activeClassName=\"active\">New group</NavLink>\n      {me.data.me.groups.map(group => <div className=\"dropdown-link\" onClick={() => handleProfileChange(group.id)}>{group.name}</div>)}\n      <div className=\"dropdown-link\" onClick={handleSettingsClick}>Settings</div>\n      <div className=\"dropdown-link\" onClick={handleLogout} >Log out</div>\n    </div>\n  )\n}\n\nexport default ProfileDropdown","import React, { useState } from 'react';\nimport { NavLink } from \"react-router-dom\";\nimport './Navbar.css'\nimport NotificationsDropdown from './Dropdowns/NotificationsDropdown'\nimport ProfileOptionsDropdown from './Dropdowns/ProfileDropdown'\n\nconst Navbar = () => {\n  const [click, setClick] = useState(false);\n  const [showNotification, setShowNotifications] = useState(false)\n  const [showProfileOptionsDropdown, setShowProfileOptionsDropdown] = useState(false)\n\n  const handleClick = () => {\n    setClick(!click);\n    setShowNotifications(false)\n    setShowProfileOptionsDropdown(false)\n  }\n\n  const handleNotificationDrop = () => {\n    setShowProfileOptionsDropdown(false)\n    setShowNotifications(!showNotification)\n  };\n\n  const handleProfileDrop = () => {\n    setShowNotifications(false)\n    setShowProfileOptionsDropdown(!showProfileOptionsDropdown)\n  };\n\n  return (\n    <>\n      <nav className=\"navbar\">\n        <div className=\"nav-container\">\n\n          <div className=\"nav-icon nav-menu\" onClick={handleClick}>\n            <i className={click ? \"fas fa-arrow-left\" : \"fas fa-bars\"}></i>\n          </div>\n\n          <NavLink to=\"/\" className=\"nav-logo nav-menu\">\n            HalfEatenBiscuit <i className=\"fas fa-cookie-bite\"></i>\n          </NavLink>\n\n          <ul className={click ? \"nav-menu hidden-links active\" : \"nav-menu hidden-links\"} >\n            <li className=\"nav-item\">\n              <NavLink exact to=\"/\" activeClassName=\"active\" className=\"nav-links\" onClick={handleClick}>\n                Home\n              </NavLink>\n            </li>\n            <li className=\"nav-item\">\n              <NavLink exact to=\"/jobmarket/queries\" activeClassName=\"active\" className=\"nav-links\" onClick={handleClick}>\n                Jobmarket\n              </NavLink>\n            </li>\n            <li className=\"nav-item\">\n              <NavLink exact to=\"/profiles\" activeClassName=\"active\" className=\"nav-links\" onClick={handleClick}>\n                Profiles\n              </NavLink>\n            </li>\n          </ul>\n\n          <ul className=\"nav-menu constant-links\">\n            <li className=\"nav-item\">\n              <NavLink exact to=\"/messages\" activeClassName=\"active\" className=\"nav-links\">\n                {/* Messages */}\n                <i className=\"fa fa-comment\"></i>\n              </NavLink>\n            </li>\n\n            {/* Dropdowns */}\n            <li className=\"nav-item dropdown-container\">\n              <div\n                onClick={handleNotificationDrop}\n                tabIndex={0}\n                className=\"nav-links\">\n                {/* Notifications ▼ */}\n                <i className=\"fa fa-bell\"> ▿</i>\n              </div>\n              <NotificationsDropdown\n                show={showNotification}\n                setShow={setShowNotifications} />\n            </li>\n\n              <li className=\"nav-item dropdown-container\">\n                <div\n                  onClick={handleProfileDrop}\n                  tabIndex={0}\n                  className=\"nav-links\">\n                  <i className=\"fa fa-user\"> ▿</i>\n                </div>\n                <ProfileOptionsDropdown\n                  show={showProfileOptionsDropdown}\n                  setShow={setShowProfileOptionsDropdown}\n                />\n              </li>\n\n          </ul>\n        </div>\n\n      </nav>\n    </>\n      );\n}\n\n      export default Navbar;\n","import React from 'react'\nimport { useQuery } from '@apollo/client';\nimport { NavLink } from \"react-router-dom\";\nimport { CONVERSATION_INFOS } from '../../../../graphql/queries';\n\nimport './MessageNavigation.css'\n\nconst MessageNavigation = ({setShowContacts}: any) => {\n  const result = useQuery(CONVERSATION_INFOS)\n\n  if (result.loading) {\n    return <div>Loading...</div>\n  }\n\n  const conversations = result.data.me.conversations\n\n  return (\n    <nav className=\"msg-navigation\">\n      <div className=\"msg-nav-container\">\n        <input value=\"Search from conversations\"></input>\n        <ul className=\"msg-nav-menu\">\n          {conversations.map(conversation => {\n            const usernames = conversation.users.map(user => user.username)\n            const linkTo = `../messages/${conversation.id}`\n            return (\n              <li className=\"msg-nav-item\" key={conversation.id}>\n                <NavLink exact to={linkTo} activeClassName=\"msg-active\" className=\"msg-nav-links\" onClick={() => setShowContacts(false)}>\n                  {usernames}\n                </NavLink>\n              </li>\n            )\n          })}\n        </ul>\n      </div>\n    </nav>\n  )\n}\n\nexport default MessageNavigation;","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($username: String!, $password: String!) {\n    login(username: $username, password: $password)  {\n      value, \n      id\n    }\n  }\n`\n\nexport const SIGNUP = gql`\n  mutation createUser($username: String!, $password: String!) {\n    createUser(username: $username, password: $password) {\n      username\n    }\n}\n`\nexport const CREATE_JOBQUERY = gql`\n  mutation createJobquery($content: String!) {\n    createJobquery(content: $content) {\n      content\n    }\n}\n`\n\nexport const NEW_CONVERSATION = gql`\n  mutation newConversation($receiverId: ID!) {\n    createConversation(receiverId: $receiverId) {\n      id\n    }\n  }\n`\n\nexport const SEND_MESSAGE = gql`\n  mutation sendMessage($id: ID!, $body: String!) {\n    sendMessage(conversationId: $id, body: $body) {\n      body\n    }\n}\n`\n\nexport const CREATE_GROUP = gql`\n  mutation createGroup($name: String!, $users: [ID!]!){\n    createGroup(name: $name, users: $users) {\n      name\n    }\n  }\n`","import { gql } from '@apollo/client';\n\nexport const MESSAGE_ADDED = gql`\n  subscription {\n    messageAdded {\n      body\n    }\n  }\n`","import React, { useState } from 'react'\nimport { useParams } from 'react-router-dom';\nimport { useQuery, useMutation, useApolloClient, useSubscription } from '@apollo/client';\n\nimport './Conversation.css'\nimport { FIND_CONVERSATION, MY_ID } from '../../../../graphql/queries';\nimport { SEND_MESSAGE } from '../../../../graphql/mutations';\nimport { MESSAGE_ADDED } from '../../../../graphql/subscriptions';\n\nconst Conversation = ({ setShowContacts }: any) => {\n  const { id }: any = useParams();\n  const client = useApolloClient()\n\n  const updateCacheWith = async (addedMessage) => {\n    console.log(\"UPDATE CACHE WITH MESSAGE\", addedMessage)\n    const includedIn = (set, object) => {\n      console.log(\"INCLUDED IN SET\", set, \"OBJECT\", object)\n      return set.map(message => message.id).includes(object.id)\n    }\n\n    const dataInStore = await client.readQuery({ query: FIND_CONVERSATION, variables: { id } })\n    //tähän cache hallintaa, tutki client.writeQuery\n    console.log(\"DATA IN STORE\", dataInStore)\n    if (!includedIn(dataInStore.findConversation.messages, addedMessage)) {\n      client.writeQuery({\n        query: FIND_CONVERSATION,\n        variables: { id },\n        data: { findConversation: dataInStore.findConversation.messages.concat(addedMessage) }\n      })\n    }\n  }\n\n  useSubscription(MESSAGE_ADDED, {\n    onSubscriptionData: ({ subscriptionData }) => {\n      console.log(\"Subscription data\", subscriptionData)\n      const addedMessage = subscriptionData.data\n      console.log(addedMessage)\n      updateCacheWith(addedMessage)\n    }\n  })\n\n  const [sendMessage] = useMutation(SEND_MESSAGE, {\n    onError: (error) => {\n      console.log(\"ERROR ON SENDING MESSAGE\", error)\n    },\n    // update: (store, response) => {\n    //   updateCacheWith(response.data.sendMessage.messages)\n    // }\n  })\n\n  const conversationResult = useQuery(FIND_CONVERSATION, {\n    variables: { id }\n  })\n\n  const myIdResult = useQuery(MY_ID)\n\n  const [messageInput, setMessageInput] = useState('')\n\n  if (conversationResult.loading || myIdResult.loading) {\n    return <div>Loading...</div>\n  }\n\n  const users = conversationResult.data.findConversation.users\n  const messages = conversationResult.data.findConversation.messages\n  const conversationId = conversationResult.data.findConversation.id\n\n  const myId = myIdResult.data.me.id\n\n  const handleSendMessage = (event) => {\n    event.preventDefault()\n    console.log(\"HANDLE SEND MESSAGE CALLED\", messageInput)\n    sendMessage({ variables: { id: conversationId, body: messageInput } })\n    setMessageInput('')\n  }\n\n  return (\n    <div className=\"conversation-container\">\n      <div className=\"conversation-info\">\n        {users.map(p => p.username + \", \")}\n        <div onClick={() => setShowContacts(true)} className=\"show-contacts-toggle\"><i className={\"fas fa-arrow-down\"}></i></div>\n      </div>\n      <h2>Conversation {id}</h2>\n      <div className=\"conversation-content\">\n        {messages.map(message => {\n          return (\n            message.sender.id === myId\n              ? <div className=\"message-container user-sent\" key={message.id}>\n                {message.body}\n              </div>\n              : <div className=\"message-container\" key={message.id}>\n                {message.body}\n              </div>\n          )\n        })}\n      </div>\n      <div className=\"conversation-input-container\">\n        <form>\n          <input type=\"text\" onChange={e => setMessageInput(e.target.value)} value={messageInput}></input>\n          <button onClick={handleSendMessage}>Send</button>\n        </form>\n      </div>\n    </div >\n  )\n}\n\nexport default Conversation\n\n","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport MessageNavigation from './Navigation/MessageNavigation'\nimport Conversation from './Conversation/Conversation';\nimport './Messages.css'\n\n\nconst Messages = () => {\n  const [showContacts, setShowContacts] = useState(true)\n\n  return (\n    <div className=\"messages-container\">\n      <Router>\n        <div className={showContacts ? \"msg-contacts-container active\": \"msg-contacts-container\"}>\n          <MessageNavigation setShowContacts={setShowContacts} />\n        </div>\n        <div className=\"msg-conversation-container\">\n          <Switch>\n            <Route path=\"/messages/:id\" component={() => <Conversation setShowContacts={setShowContacts} />} />\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  )\n}\n\n\nexport default Messages","import React from 'react'\nimport './UtilityComponents.css'\n\nexport const Toggle = ({ state, toggleClick }: any) => {\n  return (\n    <div\n      className={state ? \"toggle-container toggle-on\" : \"toggle-container toggle-off\"}\n      onClick={toggleClick}>\n      <div\n        className={state ? \"toggle-circle toggle-on-circle\" : \"toggle-circle toggle-off-circle\"}>\n      </div>\n    </div>\n  )\n}\n\nexport const Button = ({ text, handleClick }) => {\n  return (\n    <div\n      className=\"button-container\"\n      onClick={handleClick}>\n      {text}\n    </div>\n  )\n}\n\n//button,\n//hover-info-box","import React from 'react';\nimport { useQuery } from '@apollo/client';\n\nimport '../Jobmarket.css'\nimport { ALL_QUERIES } from '../../../../graphql/queries';\nimport { Button } from '../../../../utils/UtilityComponents/UtilityComponents';\n\nconst Jobqueries = () => {\n  const result = useQuery(ALL_QUERIES)\n\n  if (result.loading) {\n    return <div>loading...</div>\n  }\n  const handleButtonPress = () => {\n    console.log(\"Button pressed\")\n  }\n\n  //console.log(\"RESULT QUERIES\", result)\n\n  return (\n    <div>\n      <ul>\n        {result.data.allJobqueries.map((q: any) => {\n          const contactText = `Contact ${q.user.username}`\n          return (\n            // <div className=\"card\"> <li key={q.content}>{q.user.username}, {q.content}, {q.date}</li></div>\n            <div className=\"card\">\n              <div className=\"general-info-container\">\n                <div className=\"image-and-name-container\">\n                  <div className=\"image-container\">\n                  </div>\n                  <p><b>{q.user.username}</b> is looking for <br />\n                    string ensemble</p>\n\n                </div>\n                {/* <p>{q.content}</p> */}\n                <div className=\"details-container\">\n                  <div className=\"details-item\">\n                    <p>Salary</p>\n                    <p className=\"details-value\">250</p>\n                  </div>\n                  <div className=\"details-item\">\n                    <p>Location</p>\n                    <p className=\"details-value\">Helsinki</p>\n                  </div>\n                  <div className=\"details-item\">\n                    <p>Schedule</p>\n                    <p className=\"details-value\">16.8.2021</p>\n                  </div>\n                </div>\n              </div>\n              <div className=\"buttons-container\">\n                <Button text={contactText} handleClick={handleButtonPress} />\n                <Button text=\"More info\" handleClick={handleButtonPress} />\n                {/* <button className=\"card-button jq-contact-button\" onClick={handleButtonPress}>Contact {q.user.username}</button>\n                <button className=\"card-button more-info-button\" onClick={handleButtonPress}>More info</button> */}\n              </div>\n            </div>\n          )\n        })}\n      </ul>\n\n    </div>\n\n  )\n};\n\nexport default Jobqueries;\n","import React from 'react';\nimport { NavLink } from \"react-router-dom\";\nimport '../Jobmarket.css'\n\nconst JobmarketNavigation = () => {\n  return (\n    <nav className=\"job-navigation\">\n        <div className=\"job-nav-container\">\n          <ul className=\"job-nav-menu\">\n            <li className=\"job-nav-item\">\n              <NavLink exact to=\"/jobmarket/queries/\" activeClassName=\"job-active\" className=\"job-nav-links\"> \n                Queries\n              </NavLink>\n            </li>\n            <li className=\"job-nav-item\">\n              <NavLink exact to=\"/jobmarket/findplayers/\" activeClassName=\"job-active\" className=\"job-nav-links\"> \n                Find players\n              </NavLink>\n            </li>\n            <li className=\"job-nav-item\">\n              <NavLink exact to=\"/jobmarket/sendquery/\" activeClassName=\"job-active\" className=\"job-nav-links\"> \n                Send query\n              </NavLink>\n            </li>\n            <li className=\"job-nav-item\">\n              <NavLink exact to=\"/jobmarket/myqueries/\" activeClassName=\"job-active\" className=\"job-nav-links\"> \n                My queries\n              </NavLink>\n            </li>\n          </ul>\n        </div>\n      </nav>\n  )\n}\n\nexport default JobmarketNavigation;","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client'\nimport { CREATE_JOBQUERY } from '../../../../graphql/mutations';\n\nconst SendQuery = () => {\n\n  const [content, setContent] = useState('')\n\n  const [createQuery] = useMutation(CREATE_JOBQUERY, {\n    onError: (error) => {\n      console.log(\"Error at create query mutation: \\n\", error)\n    }\n  })\n\n\n  const submit = async (event: any) => {\n    event.preventDefault()\n    console.log(`submit called with ${content}`)\n    createQuery({ variables: { content } })\n    setContent('')\n  }\n\n  return (\n    <div>\n      <h2>Send Query</h2>\n      <div>\n        <form onSubmit={submit}>\n          <ul>\n            <li>what are you lookin for? ( single players | group )</li>\n            <li>salary ( no | negotiable | by hour | fixed )</li>\n            <li>description</li>\n            <li>location ( single | multiple )</li>\n          </ul>\n          <br></br>\n          <div>\n            description <input\n              value={content}\n              onChange={({ target }) => setContent(target.value)}\n            />\n          </div>\n          <button type='submit'>send</button>\n        </form>\n      </div>\n    </div>\n  )\n};\n\nexport default SendQuery;","import React, { useState } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { ME } from '../../../../graphql/queries';\nimport { Toggle } from '../../../../utils/UtilityComponents/UtilityComponents';\n\nconst MyQueries = () => {\n  const result = useQuery(ME)\n\n  const [visible, setVisible] = useState(false)\n  console.log(visible)\n\n  const handleToggleClick = (id) => {\n    console.log(\"TOGGLE CLICKED\", id)\n    setVisible(!visible)\n  }\n\n  if (result.loading) {\n    return <div>loading...</div>\n  }\n\n  console.log(\"RESULT MY QUERIES \\n\", result)\n\n  return (\n    <div>\n      <h3>My queries</h3>\n      {result.data.me.jobQueries.map((q: any) => {\n        return (\n          <div>\n            <Toggle state={visible} toggleClick={() => handleToggleClick(q.id)}/>\n            <p key={q.id}>{q.content}</p>\n          </div>\n        )\n      })}\n    </div>\n  )\n};\n\nexport default MyQueries;","import React from 'react'\n\nconst FindPlayers = () => {\n  return (\n    <div>\n      <h1>Find players (only available ones)</h1>\n      <ul><b>Filter: </b>\n        <li>Group or individuals,</li>\n        <li>By instrument, by group type</li>\n      </ul>\n    </div>\n  )\n}\n\nexport default FindPlayers","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport './Jobmarket.css'\nimport Jobqueries from './Pages/Jobqueries';\nimport JobmarketNavigation from './JobmarketNavigation/JobmarketNavigation';\nimport SendQuery from './Pages/SendQuery';\nimport MyQueries from './Pages/MyQueries';\nimport FindPlayers from './Pages/FindPlayers';\n\nconst Jobmarket = () => {\n  return (\n    <>\n      <Router>\n        <div className=\"job-page\">\n          <JobmarketNavigation />\n          <div className=\"job-pages\">\n            <Switch>\n              <Route path=\"/jobmarket/findplayers/\" component={FindPlayers} />\n              <Route path=\"/jobmarket/queries/\" component={Jobqueries} />\n              <Route path=\"/jobmarket/sendquery/\" component={SendQuery} />\n              <Route path=\"/jobmarket/myqueries/\" component={MyQueries} />\n            </Switch>\n          </div>\n        </div>\n      </Router>\n    </>\n  )\n}\n\n\nexport default Jobmarket","import React from 'react';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { useHistory } from 'react-router-dom';\n\nimport './Profiles.css'\nimport { ALL_USERS, MY_ID } from '../../../graphql/queries';\nimport { NEW_CONVERSATION } from '../../../graphql/mutations';\nimport { Button } from '../../../utils/UtilityComponents/UtilityComponents';\n\nconst Profiles = () => {\n  const allUsersResult = useQuery(ALL_USERS)\n  const myIdResult = useQuery(MY_ID)\n  const [newConversation] = useMutation(NEW_CONVERSATION)\n  const history = useHistory()\n\n  if (allUsersResult.loading || myIdResult.loading) {\n    return <div>loading...</div>\n  }\n\n  const handleContactButtonPress = async (receiverId: any) => {\n    console.log(\"CONTACT BUTTON PRESSED FOR\", receiverId)\n    //check for users conversations where only user is the receiver\n    const result = await newConversation({ variables: { receiverId } })\n    const newConversationId = result.data.createConversation.id\n    history.push(`/messages/${newConversationId}`)\n  }\n\n  return (\n    <div>\n      <h1>Profiles</h1>\n      <b>Filters:</b> name <input></input>, group or individual, instrument\n      \n      <div className=\"profiles-container\">\n        {allUsersResult.data.allUsers.map((u: any) => {\n          const profileUrl = `/profile/${u.id}`\n          return (\n            <div className=\"profile-container\">\n              <div className=\"upper-container\">\n                <div className=\"profile-image-container\">\n                  <div className=\"profile-image\">\n                    <img src=\"https://content.thriveglobal.com/wp-content/uploads/2018/01/Happy_guy.jpg\" alt=\"musician\" className=\"profile-image\"></img>\n                  </div>\n                </div>\n              </div>\n              <div className=\"lower-container\">\n                <div className=\"name-container\">\n                  <h3 className=\"profile-name\">{u.username}</h3>\n                  <p>violinist, saxophonist</p>\n                </div>\n                <div className=\"profiles-buttons-container\">\n                  <Button text='To profile' handleClick={() => history.push(profileUrl)} />\n                  {u.id !== myIdResult.data.me.id\n                    ? <Button text='Contact' handleClick={() => handleContactButtonPress(u.id)} />\n                    : null\n                  }\n                </div>\n              </div>\n            </div>\n          )\n        }\n        )}\n      </div>\n    </div>\n  )\n}\n\n\nexport default Profiles","import React, { useState, useEffect } from 'react'\nimport { useMutation } from '@apollo/client'\nimport { LOGIN } from '../../../graphql/mutations'\nimport { useHistory } from 'react-router-dom'\nimport { SESSION_TOKEN, SIGN_IN_TOKEN } from '../../../utils/constants'\n\ninterface SignInProps {\n  setToken: any;\n}\n\nconst SignIn = ({ setToken }: SignInProps) => {\n  const history = useHistory()\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n\n  const [login, result] = useMutation(LOGIN, {\n    onError: (error) => {\n      //setError(error.graphQLErrors[0].message)\n      console.log(\"Error at sign in mutation: \\n\", error.graphQLErrors[0].message)\n    }\n  })\n\n  useEffect(() => {\n    if (result.data) {\n      console.log(\"RESULT DATA USE EFFECT\", result.data)\n      const token = result.data.login.value\n      const id = result.data.login.id\n      setToken(token)\n      localStorage.setItem(SIGN_IN_TOKEN, token)\n      sessionStorage.setItem(SESSION_TOKEN, id)\n      history.push('/')\n    }\n  }, [result.data]) // eslint-disable-line\n\n  const submit = async (event: any) => {\n    event.preventDefault()\n\n    login({ variables: { username, password } })\n  }\n\n  return (\n    <div>\n      <form onSubmit={submit}>\n        <div>\n          username <input\n            value={username}\n            onChange={({ target }) => setUsername(target.value)}\n          />\n        </div>\n        <div>\n          password <input\n            type='password'\n            value={password}\n            onChange={({ target }) => setPassword(target.value)}\n          />\n        </div>\n        <button type='submit'>login</button>\n      </form>\n    </div>\n  )\n}\n\nexport default SignIn","import React, { useState, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom';\nimport { useMutation } from '@apollo/client'\nimport { SIGNUP } from '../../../graphql/mutations'\n\nconst SignUp = () => {\n  const history = useHistory()\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n\n  const [signup, result] = useMutation(SIGNUP, {\n    onError: (error) => {\n      console.log(\"Error at sign up mutation: \\n\", error.graphQLErrors[0].message)\n    }\n  })\n\n  useEffect(() => {\n    if (result.data) {\n      console.log(\"(sign up) RESULT DATA USE EFFECT\", result.data)\n      history.push('/signin')\n    }\n  }, [result.data]) // eslint-disable-line\n\n  const submit = async (event: any) => {\n    event.preventDefault()\n    signup({ variables: { username, password } })\n  }\n\n  return (\n    <div>\n      <h2>Sign up</h2>\n      <form onSubmit={submit}>\n        <div>\n          username <input\n            value={username}\n            onChange={({ target }) => setUsername(target.value)}\n          />\n        </div>\n        <div>\n          password <input\n            type='password'\n            value={password}\n            onChange={({ target }) => setPassword(target.value)}\n          />\n        </div>\n        <button type='submit'>Sign up</button>\n      </form>\n    </div>\n  )\n}\n\nexport default SignUp;","import React from 'react';\nimport './Home.css'\n\nconst Home = () => {\n\n  return (\n    <div>\n      <div className=\"title-and-links-container\">\n        <div className=\"title-and-links\">\n          <h1 className=\"title\">Hey freelancer, <br></br>you are needed!</h1>\n          <div className=\"links\">\n            <a href=\"../signin\" className=\"link signin\">Sign In</a>\n            <a href=\"../signup\" className=\"link signup\">Sign Up</a>\n          </div>\n        </div>\n      </div>\n      <div>\n        <h1>About</h1>\n      </div>\n      <div>\n        <h1>Features</h1>\n      </div>\n      <div>\n        <h1>Footer</h1>\n      </div>\n    </div>\n  )\n}\n\nexport default Home","import React from 'react'\nimport { useQuery } from '@apollo/client'\n\nimport { ME } from '../../../graphql/queries'\nimport { SIGN_IN_TOKEN } from '../../../utils/constants'\n\nconst Welcome = () => {\n\n const result = useQuery(ME)\n const token = localStorage.getItem(SIGN_IN_TOKEN)\n\n  if (result.loading) {\n    return <div>Loading...</div>\n  }\n\n  return (\n    <div>\n      <h1>Welcome <i>{result.data.me.username}</i></h1>\n      <p><b>You token is: </b>{token}</p>\n    </div>\n  )\n}\n\nexport default Welcome","import React from 'react'\n\nconst Settings = () => {\n  return <h1>Settings</h1>\n}\n\nexport default Settings;","import React, { useState } from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\n\nimport { ALL_USERS, ME } from '../../../graphql/queries'\nimport { Button } from '../../../utils/UtilityComponents/UtilityComponents'\nimport './NewGroup.css'\nimport { CREATE_GROUP } from '../../../graphql/mutations'\n\ninterface User {\n  id: String\n  username: String\n}\n\nconst NewGroup = () => {\n  const [groupName, setGroupName] = useState(\"\")\n  const [selectedUsers, setSelectedUsers] = useState<User[]>([]);\n  const allUsersResult = useQuery(ALL_USERS)\n  const meResult = useQuery(ME)\n  const [createGroup] = useMutation(CREATE_GROUP, {\n    onError: (error) => {\n      console.log(\"Error at create group mutation: \\n\", error)\n    }\n  })\n\n  console.log(\"ME REUSLT\", meResult)\n\n\n  if (allUsersResult.loading || meResult.loading) {\n    return <div>Loading...</div>\n  }\n\n  const handleNewGroupSubmit = () => {\n    console.log(\"NEW GROUP SUBMIT BUTTON PRESSED, users:\", selectedUsers, \"name:\", groupName)\n    const usersIds = selectedUsers.map(u => u.id)\n    createGroup({\n      variables: {\n        name: groupName,\n        users: usersIds\n      }\n    })\n    setSelectedUsers([])\n    setGroupName(\"\")\n\n  }\n\n  return (\n    <div className=\"new-group-container\">\n      <h1>New group component</h1>\n      <input value=\"Filter by name\"></input>\n      <input value={groupName} onChange={({target}) => setGroupName(target.value)}></input>\n      <div className=\"selected-users\">\n        <h3>Selected users</h3>\n        {selectedUsers.map(u => {\n          return (\n            <div\n              className=\"selected-user\"\n              onClick={() => setSelectedUsers(selectedUsers.filter(user => user.username !== u.username))}>\n              <p>{u.username}</p>\n            </div>\n          )\n        })}\n      </div>\n      <div className=\"all-users-container\">\n        {allUsersResult.data.allUsers.map(u => {\n          return (\n            selectedUsers.find(user => user.username === u.username)\n              ?\n              <div\n                className=\"user-container selected\"\n                onClick={() => setSelectedUsers(selectedUsers.concat(u))}>\n                <p>{u.username}</p>\n              </div>\n              :\n              <div\n                className=\"user-container\"\n                onClick={() => setSelectedUsers(selectedUsers.concat(u))}>\n                <p>{u.username}</p>\n              </div>\n          )\n\n        })}\n      </div>\n\n\n\n      <Button text=\"Create group\" handleClick={handleNewGroupSubmit} />\n    </div>\n  )\n}\n\nexport default NewGroup;","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport { FIND_USER } from '../../../../graphql/queries';\n\nconst Profile = () => {\n  const { id }: any = useParams();\n  const result = useQuery(FIND_USER, {\n    variables: { id }\n  })\n\n  if (result.loading) {\n    return <div>loading...</div>\n  }\n\n  console.log(\"PROFILE RESULT\", result)\n\n  return (\n    <div>\n      {result.data\n        ? (<div>\n          <h3>{result.data.findUser.username}'s profile</h3>\n          {result.data.findUser.profile.about}\n        </div>)\n        : (<div><b>No profile for dis guy:</b> {id}</div>)\n      }\n\n    </div>\n  )\n}\n\nexport default Profile;","import React, { useState } from \"react\";\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Messages from \"./components/Pages/Messages/Messages\";\nimport Jobmarket from \"./components/Pages/Jobmarket/Jobmarket\";\nimport Profiles from \"./components/Pages/Profiles/Profiles\";\nimport SignIn from \"./components/Pages/Registrations/SignIn\";\nimport SignUp from \"./components/Pages/Registrations/SignUp\";\nimport Home from \"./components/Pages/Home/Home\";\nimport Welcome from \"./components/Pages/Welcome/Welcome\";\nimport Settings from \"./components/Pages/Settings/Settings\";\nimport NewGroup from \"./components/Pages/Profiles/NewGroup\";\n\nimport './App.css';\nimport { SIGN_IN_TOKEN } from \"./utils/constants\";\nimport Profile from \"./components/Pages/Profiles/Profile/Profile\";\n\nconst App = () => {\n  const localStorageItem = localStorage.getItem(SIGN_IN_TOKEN)\n  const [token, setToken] = useState(localStorageItem);\n\n  return (\n    <Router>\n      {process.env.NODE_ENV !== 'development' && \n      <div className=\"production-notice-container\">\n        In development\n      </div>\n      }\n      {!token\n        ? <Switch>\n          <Route path=\"/signin\" component={() => <SignIn setToken={setToken} />} />\n          <Route path=\"/signup\" component={() => <SignUp/>} />\n          <Route path=\"/\" component={Home} />\n        </Switch>\n        :\n        <>\n          <Navbar />\n\n          <div className=\"pages\">\n            <Switch>\n              <Route path=\"/messages\" component={Messages} />\n              <Route path=\"/jobmarket\" component={Jobmarket} />\n              <Route path=\"/profiles\" component={Profiles} />\n              <Route path=\"/profile/:id\" component={Profile} />\n              <Route path=\"/settings\" component={Settings} />\n              <Route path=\"/newgroup\" component={NewGroup} />\n              <Route path=\"/\" component={Welcome} />\n            </Switch>\n          </div>\n        </>\n      }\n    </Router>\n  );\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  ApolloClient,\n  ApolloProvider,\n  HttpLink,\n  InMemoryCache,\n  split\n} from '@apollo/client'\n\nimport { setContext } from '@apollo/link-context';\n\nimport { getMainDefinition } from '@apollo/client/utilities'\nimport { WebSocketLink } from '@apollo/client/link/ws'\n\nimport './index.css';\nimport App from './App';\nimport { SIGN_IN_TOKEN } from './utils/constants';\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(SIGN_IN_TOKEN)\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `bearer ${token}` : null,\n    }\n  }\n})\n\nconst uri = process.env.NODE_ENV === 'development'\n  ? 'http://localhost:3001/graphql' //edit back to 3001 when using express!!\n  : 'https://halfeatenbiscuit.herokuapp.com/graphql'\n\nconst httpLink = new HttpLink({ uri: uri })\n\nconst wsLink = new WebSocketLink({\n  uri: 'ws://localhost:4000/graphql',\n  options: {\n    reconnect: true\n  }\n})\n\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query)\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    )\n  },\n  wsLink,\n  authLink.concat(httpLink),\n)\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  //link: authLink.concat(httpLink)\n  link: splitLink,\n  connectToDevTools: true\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n)\n\n"],"sourceRoot":""}