{"version":3,"sources":["components/Navbar/Dropdowns/NotificationsDropdown.tsx","components/Navbar/Dropdowns/ProfileOptionsDropdown.tsx","components/Navbar/Navbar.tsx","graphql/queries.ts","components/Pages/Messages/Navigation/MessageNavigation.tsx","graphql/mutations.ts","components/Pages/Messages/Conversation/Conversation.tsx","components/Pages/Messages/Messages.tsx","components/Pages/Jobmarket/Pages/Jobqueries.tsx","components/Pages/Jobmarket/JobmarketNavigation/JobmarketNavigation.tsx","components/Pages/Jobmarket/Pages/SendQuery.tsx","components/Pages/Jobmarket/Pages/MyQueries.tsx","components/Pages/Jobmarket/Jobmarket.tsx","components/Pages/Profiles/Profiles.tsx","utils/constants.ts","components/Pages/Registrations/SignIn.tsx","components/Pages/Registrations/SignUp.tsx","components/Pages/Home/Home.tsx","components/Pages/Welcome/Welcome.tsx","components/Pages/Settings/Settings.tsx","components/Pages/Profiles/Profile/Profile.tsx","App.tsx","index.tsx"],"names":["NotificationsDropdown","onClick","console","log","ProfileOptionsDropdown","client","useApolloClient","handleLogout","a","resetStore","result","localStorage","clear","window","location","assign","Navbar","useState","click","setClick","showNotification","setShowNotifications","showProfileOptionsDropdown","setShowProfileOptionsDropdown","className","to","exact","activeClassName","tabIndex","ME","gql","MY_ID","CONVERSATION_INFOS","FIND_CONVERSATION","ALL_QUERIES","FIND_USER","ALL_USERS","MessageNavigation","useQuery","loading","conversations","data","me","map","conversation","usernames","users","user","username","linkTo","id","LOGIN","SIGNUP","CREATE_JOBQUERY","NEW_CONVERSATION","SEND_MESSAGE","Conversation","useMutation","onError","error","sendMessage","useParams","conversationResult","variables","myIdResult","messageInput","setMessageInput","findConversation","messages","conversationId","myId","p","message","sender","body","type","onChange","e","target","value","event","preventDefault","Messages","path","component","Jobqueries","handleButtonPress","allJobqueries","q","content","JobmarketNavigation","SendQuery","setContent","createQuery","submit","onSubmit","MyQueries","jobQueries","Jobmarket","Profiles","allUsersResult","newConversation","history","useHistory","handleContactButtonPress","receiverId","newConversationId","createConversation","push","allUsers","u","profileUrl","src","alt","disabled","TOKEN_NAME","SignIn","setToken","setUsername","password","setPassword","graphQLErrors","login","useEffect","token","setItem","SignUp","signup","Home","href","Welcome","Settings","Profile","findUser","App","localStorageItem","getItem","authLink","setContext","_","headers","authorization","httpLink","HttpLink","uri","ApolloClient","cache","InMemoryCache","link","concat","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.496f7ff6.chunk.js","sourcesContent":["import React from 'react'\n\nconst NotificationsDropdown = () => {\n  return (\n    <div>\n      <h3>Notifications</h3>\n      <button onClick={() => console.log(\"FOOBAAR\")}>foobar</button>\n    </div>\n  )\n}\n\nexport default NotificationsDropdown;","import React from 'react'\nimport { useApolloClient } from \"@apollo/client\";\n\nconst ProfileOptionsDropdown = () => {\n  const client = useApolloClient()\n\n  const handleLogout = async () => {\n    const result = await client.resetStore()\n    console.log(\"LOGOUT RESULT\", result)\n    localStorage.clear()\n    window.location.assign('/')\n  }\n\n  return (\n    <div>\n      <h3>Profile drop options</h3>\n      <button onClick={handleLogout}>Log out</button>\n      <button onClick={() => console.log(\"HELLOO\")}>Hello</button>\n    </div>\n  )\n}\n\nexport default ProfileOptionsDropdown","import React, { useState } from 'react';\nimport { NavLink } from \"react-router-dom\";\nimport './Navbar.css'\nimport NotificationsDropdown from './Dropdowns/NotificationsDropdown'\nimport ProfileOptionsDropdown from './Dropdowns/ProfileOptionsDropdown'\n\nconst Navbar = () => {\n  const [click, setClick] = useState(false);\n  const [showNotification, setShowNotifications] = useState(false)\n  const [showProfileOptionsDropdown, setShowProfileOptionsDropdown] = useState(false)\n\n  const handleClick = () => {\n    setClick(!click);\n    setShowNotifications(false)\n    setShowProfileOptionsDropdown(false)\n  }\n\n  const handleNotificationDrop = () => {\n    setShowProfileOptionsDropdown(false)\n    setShowNotifications(!showNotification)\n  };\n\n  const handleProfileDrop = () => {\n    setShowNotifications(false)\n    setShowProfileOptionsDropdown(!showProfileOptionsDropdown)\n  };\n\n  return (\n    <>\n      <nav className=\"navbar\">\n        <div className=\"nav-container\">\n          <NavLink to=\"/\" className=\"nav-logo\">\n            PartialCookie <i className=\"fas fa-cookie-bite\"></i>\n          </NavLink>\n\n          <ul className=\"nav-menu constant-links\">\n            <li className=\"nav-item\">\n              <NavLink exact to=\"/\" activeClassName=\"active\" className=\"nav-links\">\n                Home\n              </NavLink>\n            </li>\n            <li className=\"nav-item\">\n              <NavLink exact to=\"/jobmarket/queries\" activeClassName=\"active\" className=\"nav-links\">\n                Jobmarket\n              </NavLink>\n            </li>\n            <li className=\"nav-item\">\n              <NavLink exact to=\"/profiles\" activeClassName=\"active\" className=\"nav-links\">\n                Profiles\n              </NavLink>\n            </li>\n          </ul>\n\n          <ul className={click ? \"nav-menu hidden-links active\" : \"nav-menu hidden-links\"} >\n            <li className=\"nav-item\">\n              <NavLink exact to=\"/messages\" activeClassName=\"active\" className=\"nav-links\">\n                Messages\n              </NavLink>\n            </li>\n\n            {/* Dropdowns */}\n            <div\n              onClick={handleNotificationDrop}\n              // onBlur={handleNotificationDrop}\n              // onFocus={handleNotificationDrop}\n              tabIndex={0}\n              className=\"dropdown-container\">\n              <p className=\"nav-links\">Notifications ∆</p>\n              <div className={showNotification ? \"dropdown notifications active\" : \"notifications\"}>\n                <NotificationsDropdown />\n              </div>\n            </div>\n\n\n            <div\n              onClick={handleProfileDrop}\n              // onBlur={handleProfileDrop}\n              // onFocus={handleProfileDrop}\n              tabIndex={0}\n              className=\"dropdown-container\">\n              <p className=\"nav-links\">Me ∆</p>\n              <div className={showProfileOptionsDropdown ? \"dropdown profile-options active\" : \"profile-options\"}>\n                <ProfileOptionsDropdown />\n              </div>\n            </div>\n          </ul>\n\n          <div className=\"nav-icon\" onClick={handleClick}>\n            <i className={click ? \"fas fa-times-circle\" : \"fas fa-bars\"}></i>\n          </div>\n        </div>\n\n      </nav>\n    </>\n  );\n}\n\nexport default Navbar;\n","import { gql } from '@apollo/client';\n\nexport const ME = gql`\n  query {\n    me {\n      username\n      jobQueries {\n        content, date\n      }\n    }\n  }\n`\n\nexport const MY_ID = gql`\n  query {\n    me {\n      id\n    }\n  }\n`\n\nexport const CONVERSATION_INFOS = gql`\n  query {\n    me {\n      conversations {\n        id,\n        users {\n          username\n          }\n      }\n    }\n  }\n`\n\nexport const FIND_CONVERSATION = gql`\n  query ($id: ID!) {\n    findConversation(id: $id) {\n      id, \n      users {\n        id,\n        username\n      },\n      messages {\n        id\n        sender {\n          id\n        }\n        body \n      } \n    }\n  }\n`\n\nexport const ALL_QUERIES = gql`\n  query {\n    allJobqueries  {\n      content\n      date\n      user {\n        username\n      }\n    }\n  }\n`\n\nexport const FIND_USER = gql`\n  query findUser($id: ID!){\n    findUser (id: $id) {\n      username\n    }\n  }\n`\n\nexport const ALL_USERS = gql`\n  query {\n    allUsers {\n      id\n      username \n      jobQueries {\n        content\n      }\n    }\n  }\n`\n","import { useQuery } from '@apollo/client';\nimport React from 'react'\nimport { NavLink } from \"react-router-dom\";\nimport { CONVERSATION_INFOS } from '../../../../graphql/queries';\n\nimport './MessageNavigation.css'\n\nconst MessageNavigation = () => {\n  const result = useQuery(CONVERSATION_INFOS)\n\n  if (result.loading) {\n    return <div>Loading...</div>\n  }\n\n  const conversations = result.data.me.conversations\n\n  return (\n    <nav className=\"msg-navigation\">\n      <div className=\"msg-nav-container\">\n        <ul className=\"msg-nav-menu\">\n          {conversations.map(conversation => {\n            const usernames = conversation.users.map(user => user.username)\n            const linkTo = `../messages/${conversation.id}`\n            return (\n              <li className=\"msg-nav-item\" key={conversation.id}>\n                <NavLink exact to={linkTo} activeClassName=\"msg-active\" className=\"msg-nav-links\">\n                  {usernames}\n                </NavLink>\n              </li>\n            )\n          })}\n        </ul>\n      </div>\n    </nav>\n  )\n}\n\nexport default MessageNavigation;","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($username: String!, $password: String!) {\n    login(username: $username, password: $password)  {\n      value\n    }\n  }\n`\n\nexport const SIGNUP = gql`\n  mutation createUser($username: String!, $password: String!) {\n    createUser(username: $username, password: $password) {\n      username\n    }\n}\n`\nexport const CREATE_JOBQUERY = gql`\n  mutation createJobquery($content: String!) {\n    createJobquery(content: $content) {\n      content\n    }\n}\n`\n\nexport const NEW_CONVERSATION = gql`\n  mutation newConversation($receiverId: ID!) {\n    createConversation(receiverId: $receiverId) {\n      id\n    }\n  }\n`\n\nexport const SEND_MESSAGE = gql`\n  mutation sendMessage($id: ID!, $body: String!) {\n    sendMessage(conversationId: $id, body: $body) {\n      messages {body}\n    }\n}\n`","import React, { useState } from 'react'\nimport { useParams } from 'react-router-dom';\nimport { useQuery, useMutation } from '@apollo/client';\n\nimport './Conversation.css'\nimport { FIND_CONVERSATION, MY_ID } from '../../../../graphql/queries';\nimport { SEND_MESSAGE } from '../../../../graphql/mutations';\n\nconst Conversation = () => {\n  const [sendMessage] = useMutation(SEND_MESSAGE, {\n    onError: (error) => {\n      console.log(\"ERROR ON SENDING MESSAGE\")\n    }\n  })\n  const { id }: any = useParams();\n  const conversationResult = useQuery(FIND_CONVERSATION, {\n    variables: { id }\n  })\n  const myIdResult = useQuery(MY_ID)\n\n  const [messageInput, setMessageInput] = useState('')\n\n  if (conversationResult.loading || myIdResult.loading) {\n    return <div>Loading...</div>\n  }\n\n  const users = conversationResult.data.findConversation.users\n  const messages = conversationResult.data.findConversation.messages\n  const conversationId = conversationResult.data.findConversation.id\n\n  const myId = myIdResult.data.me.id\n\n  const handleSendMessage = (event) => {\n    event.preventDefault()\n    console.log(\"HANDLE SEND MESSAGE CALLED\", messageInput)\n    sendMessage({ variables: { id: conversationId, body: messageInput } })\n    setMessageInput('')\n  }\n\n  return (\n    <div className=\"conversation-container\">\n      <div className=\"conversation-info\">\n        <h2>Conversation {id}</h2>\n        <p>Participants: {users.map(p => p.username + \", \")}</p>\n      </div>\n      <div className=\"conversation-content\">\n        {messages.map(message => {\n          return (\n            message.sender.id === myId\n              ? <div className=\"message-container user-sent\" key={message.id}>\n                {message.body}\n              </div>\n              : <div className=\"message-container\" key={message.id}>\n                {message.body}\n              </div>\n          )\n        })}\n      </div>\n      <div className=\"conversation-input-container\">\n        <form>\n          <input type=\"text\" onChange={e => setMessageInput(e.target.value)} value={messageInput}></input>\n          <button onClick={handleSendMessage}>Send</button>\n        </form>\n      </div>\n    </div >\n  )\n}\n\nexport default Conversation\n\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport MessageNavigation from './Navigation/MessageNavigation'\nimport Conversation from './Conversation/Conversation';\nimport './Messages.css'\n\n\nconst Messages = () => {\n  return (\n    <div className=\"messages-container\">\n      <Router>\n        <div className=\"msg-contacts-container\">\n          <MessageNavigation/>\n        </div>\n        <div className=\"msg-conversation-container\">\n          <Switch>\n            <Route path=\"/messages/:id\" component={Conversation} />\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  )\n}\n\n\nexport default Messages","import React from 'react';\nimport { useQuery } from '@apollo/client';\n\nimport '../Jobmarket.css'\nimport { ALL_QUERIES } from '../../../../graphql/queries';\n\nconst Jobqueries = () => {\n  const result = useQuery(ALL_QUERIES)\n\n  if (result.loading) {\n    return <div>loading...</div>\n  }\n  const handleButtonPress = () => {\n    console.log(\"Button pressed\")\n  }\n\n  //console.log(\"RESULT QUERIES\", result)\n\n  return (\n    <div>\n      <ul>\n        {result.data.allJobqueries.map((q: any) => {\n          return (\n            // <div className=\"card\"> <li key={q.content}>{q.user.username}, {q.content}, {q.date}</li></div>\n            <div className=\"card\">\n              <div className=\"general-info-container\">\n                <div className=\"image-and-name-container\">\n                  <div className=\"image-container\">\n\n                  </div>\n                  <p><b>{q.user.username}</b> is looking for <br />\n                    string ensemble</p>\n\n                </div>\n                <p>{q.content}</p>\n                <div className=\"details-container\">\n                  <p>250</p>\n                  <p>Helsinki</p>\n                  <p>16.8.2021</p>\n\n                </div>\n              </div>\n              <div className=\"buttons-container\">\n                <button className=\"card-button jq-contact-button\" onClick={handleButtonPress}>Contact {q.user.username}</button>\n                <button className=\"card-button more-info-button\" onClick={handleButtonPress}>More info</button>\n              </div>\n            </div>\n          )\n        })}\n      </ul>\n\n    </div>\n\n  )\n};\n\nexport default Jobqueries;\n","import React from 'react';\nimport { NavLink } from \"react-router-dom\";\nimport '../Jobmarket.css'\n\nconst JobmarketNavigation = () => {\n  return (\n    <nav className=\"job-navigation\">\n        <div className=\"job-nav-container\">\n          <ul className=\"job-nav-menu\">\n            <li className=\"job-nav-item\">\n              <NavLink exact to=\"/jobmarket/queries/\" activeClassName=\"job-active\" className=\"job-nav-links\"> \n                Queries\n              </NavLink>\n            </li>\n            <li className=\"job-nav-item\">\n              <NavLink exact to=\"/jobmarket/sendquery/\" activeClassName=\"job-active\" className=\"job-nav-links\"> \n                Send query\n              </NavLink>\n            </li>\n            <li className=\"job-nav-item\">\n              <NavLink exact to=\"/jobmarket/myqueries/\" activeClassName=\"job-active\" className=\"job-nav-links\"> \n                My queries\n              </NavLink>\n            </li>\n          </ul>\n        </div>\n      </nav>\n  )\n}\n\nexport default JobmarketNavigation;","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client'\nimport { CREATE_JOBQUERY } from '../../../../graphql/mutations';\n\nconst SendQuery = () => {\n\n  const [content, setContent] = useState('')\n\n  const [createQuery] = useMutation(CREATE_JOBQUERY, {\n    onError: (error) => {\n      console.log(\"Error at create query mutation: \\n\", error)\n    }\n  })\n\n\n  const submit = async (event: any) => {\n    event.preventDefault()\n    console.log(`submit called with ${content}`)\n    createQuery({ variables: { content } })\n    setContent('')\n  }\n\n  return (\n    <div>\n      <h2>Send Query</h2>\n      <div>\n        <form onSubmit={submit}>\n          <div>\n            content <input\n              value={content}\n              onChange={({ target }) => setContent(target.value)}\n            />\n          </div>\n          <button type='submit'>send</button>\n        </form>\n      </div>\n    </div>\n  )\n};\n\nexport default SendQuery;","import React from 'react';\nimport { useQuery } from '@apollo/client';\nimport { ME } from '../../../../graphql/queries';\n\nconst MyQueries = () => {\n  const result = useQuery(ME)\n\n  if (result.loading) {\n    return <div>loading...</div>\n  }\n\n  console.log(\"RESULT MY QUERIES \\n\", result)\n\n  return (\n    <div>\n      <h3>My queries</h3>\n      {result.data.me.jobQueries.map((q: any) => <p key={q.id}>{q.content}</p>)}\n    </div>\n  )\n};\n\nexport default MyQueries;","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport './Jobmarket.css'\nimport Jobqueries from './Pages/Jobqueries';\nimport JobmarketNavigation from './JobmarketNavigation/JobmarketNavigation';\nimport SendQuery from './Pages/SendQuery';\nimport MyQueries from './Pages/MyQueries';\n\nconst Jobmarket = () => {\n  return (\n    <>\n      <Router>\n        <div className=\"job-page\">\n          <JobmarketNavigation />\n          <div className=\"job-pages\">\n            <Switch>\n              <Route path=\"/jobmarket/queries/\" component={Jobqueries} />\n              <Route path=\"/jobmarket/sendquery/\" component={SendQuery} />\n              <Route path=\"/jobmarket/myqueries/\" component={MyQueries} />\n            </Switch>\n          </div>\n        </div>\n      </Router>\n    </>\n  )\n}\n\n\nexport default Jobmarket","import React from 'react';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { useHistory } from 'react-router-dom';\n\nimport './Profiles.css'\nimport { ALL_USERS, MY_ID } from '../../../graphql/queries';\nimport { NEW_CONVERSATION } from '../../../graphql/mutations';\n\nconst Profiles = () => {\n  const allUsersResult = useQuery(ALL_USERS)\n  const myIdResult = useQuery(MY_ID)\n  const [newConversation] = useMutation(NEW_CONVERSATION)\n  const history = useHistory()\n\n  if (allUsersResult.loading || myIdResult.loading) {\n    return <div>loading...</div>\n  }\n\n  const handleContactButtonPress = async (receiverId: any) => {\n    console.log(\"CONTACT BUTTON PRESSED FOR\", receiverId)\n    //check for users conversations where only user is the receiver\n    const result = await newConversation({ variables: { receiverId } })\n    const newConversationId = result.data.createConversation.id\n    history.push(`/messages/${newConversationId}`)\n  }\n\n  return (\n    <div>\n      <h1>Profiles</h1>\n      <div className=\"profiles-container\">\n        {allUsersResult.data.allUsers.map((u: any) => {\n          const profileUrl = `/profile/${u.id}`\n          return (\n            <div className=\"profile-container\">\n              <div className=\"upper-container\">\n                <div className=\"profile-image-container\">\n                  <div className=\"profile-image\">\n                    <img src=\"https://content.thriveglobal.com/wp-content/uploads/2018/01/Happy_guy.jpg\" alt=\"musician\" className=\"profile-image\"></img>\n                  </div>\n                </div>\n              </div>\n              <div className=\"lower-container\">\n                <div className=\"name-container\">\n                  <h3 className=\"profile-name\">{u.username}</h3>\n                  <p>violinist, saxophonist</p>\n                </div>\n                <div className=\"profiles-buttons-container\">\n                  <button className=\"profiles-button to-profile-button\" onClick={() => history.push(profileUrl)}>To profile</button>\n                  {u.id !== myIdResult.data.me.id\n                    ? <button className=\"profiles-button profiles-contact-button\" onClick={() => handleContactButtonPress(u.id)}>Contact {u.username}</button>\n                    : <button className=\"profiles-button disabled-button\" disabled>Contact {u.username}</button>\n                  }\n                </div>\n              </div>\n            </div>\n          )\n        }\n        )}\n      </div>\n    </div>\n  )\n}\n\n\nexport default Profiles","export const TOKEN_NAME = 'kulttuurisome-user-token'","import React, { useState, useEffect } from 'react'\nimport { useMutation } from '@apollo/client'\nimport { LOGIN } from '../../../graphql/mutations'\nimport { useHistory } from 'react-router-dom'\nimport { TOKEN_NAME } from '../../../utils/constants'\n\ninterface SignInProps {\n  setToken: any;\n}\n\nconst SignIn = ({ setToken }: SignInProps) => {\n  const history = useHistory()\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n\n  const [login, result] = useMutation(LOGIN, {\n    onError: (error) => {\n      //setError(error.graphQLErrors[0].message)\n      console.log(\"Error at sign in mutation: \\n\", error.graphQLErrors[0].message)\n    }\n  })\n\n  useEffect(() => {\n    if (result.data) {\n      console.log(\"RESULT DATA USE EFFECT\", result.data)\n      const token = result.data.login.value\n      setToken(token)\n      localStorage.setItem(TOKEN_NAME, token)\n      history.push('/')\n    }\n  }, [result.data]) // eslint-disable-line\n\n  const submit = async (event: any) => {\n    event.preventDefault()\n\n    login({ variables: { username, password } })\n  }\n\n  return (\n    <div>\n      <form onSubmit={submit}>\n        <div>\n          username <input\n            value={username}\n            onChange={({ target }) => setUsername(target.value)}\n          />\n        </div>\n        <div>\n          password <input\n            type='password'\n            value={password}\n            onChange={({ target }) => setPassword(target.value)}\n          />\n        </div>\n        <button type='submit'>login</button>\n      </form>\n    </div>\n  )\n}\n\nexport default SignIn","import React, { useState, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom';\nimport { useMutation } from '@apollo/client'\nimport { SIGNUP } from '../../../graphql/mutations'\n\nconst SignUp = () => {\n  const history = useHistory()\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n\n  const [signup, result] = useMutation(SIGNUP, {\n    onError: (error) => {\n      console.log(\"Error at sign up mutation: \\n\", error.graphQLErrors[0].message)\n    }\n  })\n\n  useEffect(() => {\n    if (result.data) {\n      console.log(\"(sign up) RESULT DATA USE EFFECT\", result.data)\n      history.push('/signin')\n    }\n  }, [result.data]) // eslint-disable-line\n\n  const submit = async (event: any) => {\n    event.preventDefault()\n    signup({ variables: { username, password } })\n  }\n\n  return (\n    <div>\n      <h2>Sign up</h2>\n      <form onSubmit={submit}>\n        <div>\n          username <input\n            value={username}\n            onChange={({ target }) => setUsername(target.value)}\n          />\n        </div>\n        <div>\n          password <input\n            type='password'\n            value={password}\n            onChange={({ target }) => setPassword(target.value)}\n          />\n        </div>\n        <button type='submit'>Sign up</button>\n      </form>\n    </div>\n  )\n}\n\nexport default SignUp;","import React from 'react';\nimport './Home.css'\n\nconst Home = () => {\n\n  return (\n    <div>\n      <div className=\"title-and-links-container\">\n        <div className=\"title-and-links\">\n          <h1 className=\"title\">Hey freelancer, <br></br>you are needed!</h1>\n          <div className=\"links\">\n            <a href=\"../signin\" className=\"link signin\">Sign In</a>\n            <a href=\"../signup\" className=\"link signup\">Sign Up</a>\n          </div>\n        </div>\n      </div>\n      <div>\n        <h1>About</h1>\n      </div>\n      <div>\n        <h1>Features</h1>\n      </div>\n      <div>\n        <h1>Footer</h1>\n      </div>\n    </div>\n  )\n}\n\nexport default Home","import React from 'react'\nimport { useQuery } from '@apollo/client'\n\nimport { ME } from '../../../graphql/queries'\n\nconst Welcome = () => {\n\n  const result = useQuery(ME)\n\n  if (result.loading) {\n    return <div>Loading...</div>\n  }\n\n  return (\n    <div>\n      <h1>Welcome <i>{result.data.me.username}</i></h1>\n    </div>\n  )\n}\n\nexport default Welcome","import React from 'react'\n\nconst Settings = () => {\n  return <h1>Settings</h1>\n}\n\nexport default Settings;","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport { FIND_USER } from '../../../../graphql/queries';\n\nconst Profile = () => {\n  const { id }: any = useParams();\n  const result = useQuery(FIND_USER, {\n    variables: { id }\n  })\n\n  if (result.loading) {\n    return <div>loading...</div>\n  }\n\n  console.log(result)\n  return (\n  <div>\n    <h3>Profile</h3>\n    {result.data.findUser.username}\n  </div>\n  )\n}\n\nexport default Profile;","import React, { useState } from \"react\";\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Messages from \"./components/Pages/Messages/Messages\";\nimport Jobmarket from \"./components/Pages/Jobmarket/Jobmarket\";\nimport Profiles from \"./components/Pages/Profiles/Profiles\";\nimport SignIn from \"./components/Pages/Registrations/SignIn\";\nimport SignUp from \"./components/Pages/Registrations/SignUp\";\nimport Home from \"./components/Pages/Home/Home\";\nimport Welcome from \"./components/Pages/Welcome/Welcome\";\nimport Settings from \"./components/Pages/Settings/Settings\";\n\nimport './App.css';\nimport { TOKEN_NAME } from \"./utils/constants\";\nimport Profile from \"./components/Pages/Profiles/Profile/Profile\";\n\nconst App = () => {\n  const localStorageItem = localStorage.getItem(TOKEN_NAME)\n  const [token, setToken] = useState(localStorageItem);\n\n  return (\n    <Router>\n      {!token\n        ? <Switch>\n          <Route path=\"/signin\" component={() => <SignIn setToken={setToken} />} />\n          <Route path=\"/signup\" component={() => <SignUp/>} />\n          <Route path=\"/\" component={Home} />\n        </Switch>\n        :\n        <>\n          <Navbar />\n\n          <div className=\"pages\">\n            <Switch>\n              <Route path=\"/messages\" component={Messages} />\n              <Route path=\"/jobmarket\" component={Jobmarket} />\n              <Route path=\"/profiles\" component={Profiles} />\n              <Route path=\"/profile/:id\" component={Profile} />\n              <Route path=\"/settings\" component={Settings} />\n              <Route path=\"/\" component={() => <Welcome />} />\n            </Switch>\n          </div>\n        </>\n      }\n    </Router>\n  );\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  ApolloClient,\n  HttpLink,\n  InMemoryCache,\n  ApolloProvider\n} from '@apollo/client'\n\nimport { setContext } from '@apollo/link-context';\n\nimport './index.css';\nimport App from './App';\nimport { TOKEN_NAME } from './utils/constants';\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(TOKEN_NAME)\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `bearer ${token}` : null,\n    }\n  }\n})\n\nconst uri = process.env.NODE_ENV === 'development'\n  ? 'http://localhost:3001/graphql'\n  : 'https://halfeatenbiscuit.herokuapp.com/graphql'\n\nconst httpLink = new HttpLink({ uri: uri })\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: authLink.concat(httpLink)\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n)\n\n"],"sourceRoot":""}